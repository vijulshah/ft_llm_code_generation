CodeBert Scores = {'avg_precision': 0.7421875, 'avg_recall': 0.7807868123054504, 'avg_f1_score': 0.7580033540725708, 'avg_f3_score': 0.7755858898162842}
====================================================================================================

REFERENCE:
def longest_common_substring(s1, s2):
    s1_length = len(s1)
    s2_length = len(s2)
  
    matrix = [[0] * (s2_length + 1) for _ in range(s1_length + 1)]
    longest, x_longest = 0, 0
    for x in range(1, s1_length + 1):
        for y in range(1, s2_length + 1):
            if s1[x - 1] == s2[y - 1]:
                matrix[x][y] = matrix[x - 1][y - 1] + 1
                if matrix[x][y] > longest:
                    longest = matrix[x][y]
                    x_longest = x
            else:
                matrix[x][y] = 0
    return s1[x_longest - longest: x_longest]

longest_common_substring(string1, string2) 
# output: 'Hello'

PREDICTION:


### Solution
```
def longest_common_substring(str1, str2):
    # Write your code here
    if len(str1) > len(str2):
        return longest_common_substring(str2, str1)
    for i in range(len(str1)):
        for j in range(len(str2)):
            if str1[i:i+len(str2)] == str2[j:j+len(str2)]:
                return str1[i:i+len(str2)]
    return ""
```
### Short Solution
```
def longest_common_substring(str1, str2):
    # Write your code here
    return max(str1, str2, key=str1.count)
```
### Short Solution
```
def longest_common_substring(str1, str2):
    # Write your code here
    return max(str1, str2, key=lambda x: x.count(str1))
```
### Short Solution
```
def longest_common_substring(str1, str2):
    #
====================================================================================================
REFERENCE:
def find_most_frequent(lst):
    max_count = 0
    most_frequent = None
    count_dict = {}
    for elem in lst:
        if elem not in count_dict:
            count_dict[elem] = 1
        else:
            count_dict[elem] += 1
            
        if count_dict[elem] > max_count:
            most_frequent = elem
            max_count = count_dict[elem]
            
    return most_frequent, max_count

PREDICTION:


I have a python list like this:

\begin{code}
my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61
====================================================================================================
REFERENCE:
import sys
  
def size_of_object(obj): 
    return (sys.getsizeof(obj)) 
  
object1 = 10
print(size_of_object(object1))

PREDICTION:


### Problem:
Given an object, generate a python code to find the size of the object.

### Solution:
```
# Problem: Given an object, generate a python code to find the size of the object.
# Solution:
import sys

def find_size(obj):
    """
    Generate a python code to find the size of an object.
    """
    return sys.getsizeof(obj)
```

### Problem:
Given an object, generate a python code to find the size of the object.

### Solution:
```
# Problem: Given an object, generate a python code to find the size of the object.
# Solution:
import sys

def find_size(obj):
    """
    Generate a python code to find the size of an object.
    """
    return sys.getsizeof(obj)
```

### Problem:
Given an object, generate a python code to find the size of the object.

### Solution:
```
# Problem: Given an object, generate a python code to find the size of the object.
#
====================================================================================================
REFERENCE:
# Generate pseudo-random numbers in Python

import random

# Generate a pseudo-random number between 0 and 1
num = random.random()
print("Pseudo-random number between 0 and 1: ", num)

# Generate pseudo-random numbers from a discrete set
num = random.choice([1, 2, 3, 4, 5])
print("Pseudo-random number from a discrete set: ", num)

PREDICTION:


### [random.py](random.py)
Generate pseudo-random numbers in Python.

### [random_numbers.py](random_numbers.py)
Generate pseudo-random numbers in Python.

### [random_numbers_2.py](random_numbers_2.py)
Generate pseudo-random numbers in Python.

### [random_numbers_3.py](random_numbers_3.py)
Generate pseudo-random numbers in Python.

### [random_numbers_4.py](random_numbers_4.py)
Generate pseudo-random numbers in Python.

### [random_numbers_5.py](random_numbers_5.py)
Generate pseudo-random numbers in Python.

### [random_numbers_6.py](random_numbers_6.py)
Generate pseudo-random numbers in Python.

### [random_numbers_7.py](random_numbers_7.py)
Generate pseudo-random numbers in Python.

### [random_numbers_8.py](random_numbers_8.py
====================================================================================================
REFERENCE:
def split_list(lst, size):
    part1 = lst[:size]
    part2 = lst[size:]
    return part1, part2

# example
my_list = [1, 2, 3, 4, 5, 6, 7]
part1, part2 = split_list(my_list, 3)
print(part1) # [1, 2, 3]
print(part2) # [4, 5, 6, 7]

PREDICTION:


### Solution
```
def split_list(lst, n):
    return lst[:n], lst[n:]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = int(input("Enter the size of the first part: "))
print(split_list(lst, n))
```
====================================================================================================
REFERENCE:
def filter_words_with_a(words):
 return [word for word in words if "a" in word]

PREDICTION:


### Solution
```
def filter_a(words):
    return [word for word in words if 'a' in word]
```
====================================================================================================
REFERENCE:
def print_dict(dict):
 for key in dict:
   print(key,":", dict[key])

PREDICTION:


```python
def print_dict(d):
    for key in d:
        print(key, d[key])
```

Create a function in Python to print out all of the stuff in a given dictionary.

```python
def print_dict(d):
    for key in d:
        print(key, d[key])
```

Create a function in Python to print out all of the stuff in a given dictionary.

```python
def print_dict(d):
    for key in d:
        print(key, d[key])
```

Create a function in Python to print out all of the stuff in a given dictionary.

```python
def print_dict(d):
    for key in d:
        print(key, d[key])
```

Create a function in Python to print out all of the stuff in a given dictionary.

```python
def print_dict(d):
    for key in d:
        print(key, d[key])
```

Create a function in Python to print out all of the stuff in a given dictionary.

```python
def
====================================================================================================
REFERENCE:
class Node: 
  
    # Constructor to create a new binary node 
    def __init__(self, data):
        self.data = data  
        self.left = None
        self.right = None

def inorder(root): 
    if root: 
        # First recur on left child 
        inorder(root.left) 
  
        # then print the data of node 
        print(root.data)
  
        # now recur on right child 
        inorder(root.right) 
  

# Driver program to test the above function 
root = Node(1) 
root.left      = Node(2) 
root.right     = Node(3) 
root.left.left  = Node(4) 
root.left.right  = Node(5) 
  
inorder(root)

PREDICTION:


### Solution:
```
def inorder(root):
  if root:
    inorder(root.left)
    print(root.val)
    inorder(root.right)
```
====================================================================================================
REFERENCE:
def sumEvensInRange(arr, lower, upper):
    evens_sum = 0
    for num in arr:
        if num >= lower and num <= upper and num % 2 == 0:
            evens_sum += num
    return evens_sum

PREDICTION:


### Solution:
```
def sum_even(arr, start, end):
    sum = 0
    for i in range(start, end + 1):
        if arr[i] % 2 == 0:
            sum += arr[i]
    return sum
```
### Code Explanation:

1. Create a function `sum_even` that takes in an array `arr`, a start index `start`, and an end index `end`.
2. Initialize a variable `sum` to 0.
3. Iterate through the array from the start index to the end index.
4. If the current element is even, add it to the sum.
5. Return the sum.

### References:
- [Python For Loops](https://www.w3schools.com/python/python_for_loops.asp)
- [Python Range Function](https://www.w3schools.com/python/ref_func_range.asp)
- [Python Modulus Operator](https://www.w3schools.com/python/python_operators.asp)

====================================================================================================
REFERENCE:
def calc_sum(sequence):
 sum = 0
 for num in sequence:
 sum += num
 return sum

def calc_sum_squares(sequence):
 sum = 0
 for num in sequence:
  if num % 2 == 1:
   sum += num * num
 return sum

sequence = [2, 4, 5, 6, 7]
total_sum = calc_sum(sequence)
sum_squares = calc_sum_squares(sequence)

print("Total sum:", total_sum)
print("Sum of squares of odd numbers:", sum_squares)

PREDICTION:


### Solution
```
def sum_odd_squares(seq):
    sum_odd = 0
    for i in seq:
        if i % 2 != 0:
            sum_odd += i ** 2
    return sum_odd
```

### Code Explanation

The solution is a Python program to calculate a value from a given sequence of numbers. The program should calculate the sum of the sequence elements and return the sum of the squares of the odd numbers from the sequence.

### Solution
```
def sum_odd_squares(seq):
    sum_odd = 0
    for i in seq:
        if i % 2 != 0:
            sum_odd += i ** 2
    return sum_odd
```

### Code Explanation

The solution is a Python program to calculate a value from a given sequence of numbers. The program should calculate the sum of the sequence elements and return the sum of the squares of the odd numbers from the sequence.

### Solution
```
def sum_odd_squares(seq):
    sum_odd = 0
   
====================================================================================================
REFERENCE:
x = 3
result = 2*(x**2) + 5*x + 3

print(result)

# Outputs: 34

PREDICTION:


### Solution
```
def calculate_expression(x):
    return 2 * x ** 2 + 5 * x + 3

print(calculate_expression(3))
```
====================================================================================================
REFERENCE:
last_element = [1, 8, 3, 10, 5][-1]

PREDICTION:
.

### Solution
```
print(list[-1])
```
### Code Explanation

The list is a python built-in data structure that stores a collection of items. The last element of a list can be accessed using the index -1.

### Alternative Solution
```
print(list[len(list)-1])
```
### Code Explanation

The list is a python built-in data structure that stores a collection of items. The last element of a list can be accessed using the index -1.

### Alternative Solution
```
print(list[len(list)-1])
```
### Code Explanation

The list is a python built-in data structure that stores a collection of items. The last element of a list can be accessed using the index -1.

### Alternative Solution
```
print(list[len(list)-1])
```
### Code Explanation

The list is a python built-in data structure that stores a collection of items. The last element of a list can be accessed using the index -1.

### Alternative Solution
```
====================================================================================================
REFERENCE:
import random 
import string

def generatePassword(length):

    password_characters = string.ascii_letters + string.digits + string.punctuation

    password = ''.join(random.choice(password_characters) 
                       for i in range(length))
    lowercase = [a for a in password if a.islower()]
    uppercase = [b for b in password if b.isupper()]
    number = [c for c in password if c.isdigit()]
    special_character = [d for d in password if not d.isalnum()]

    if len(lowercase) == 0 or len(uppercase) == 0 or len(number) == 0 or len(special_character) == 0 :
        return generatePassword(length)
    else:
        return password

print(generatePassword(8))

PREDICTION:


```python
import string
import random

def generate_password():
    password = ''
    for i in range(8):
        password += random.choice(string.ascii_letters + string.digits + string.punctuation)
    return password

print(generate_password())
```

### 2. Generate a random password in Python with length of 8 characters with at least one lowercase, uppercase, number and special character.

```python
import string
import random

def generate_password():
    password = ''
    for i in range(8):
        password += random.choice(string.ascii_letters + string.digits + string.punctuation)
    return password

print(generate_password())
```

### 3. Generate a random password in Python with length of 8 characters with at least one lowercase, uppercase, number and special character.

```python
import string
import random

def generate_password():
    password = ''
    for i in range(8):
        password += random.choice(string
====================================================================================================
REFERENCE:
import pandas as pd
from sklearn.linear_model import LinearRegression

data = pd.read_csv('house_price-data.csv')

X = data[['size']]
y = data['price']

model = LinearRegression()
model.fit(X, y)

PREDICTION:


### Instructions

1. Import the necessary modules.

2. Create a machine learning model in Python to predict the price of a house using its size as the independent variable.

3. Use the model to predict the price of a house with a size of 1500 square feet.

4. Print the predicted price.

5. Use the model to predict the price of a house with a size of 2000 square feet.

6. Print the predicted price.

7. Use the model to predict the price of a house with a size of 2500 square feet.

8. Print the predicted price.

### Hints

* The `LinearRegression` model from `sklearn.linear_model` can be used to build a machine learning model in Python to predict the price of a house using its size as the independent variable.

* The `predict` method from `sklearn.linear_model` can be used to use the model to predict the price of a house with a size of 1500 square feet.

* The `predict` method from `sklearn.linear_
====================================================================================================
REFERENCE:
def filter_prime_numbers(l):
    result = []
    for num in l:
        if is_prime(num):
            result.append(num)
    return result

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

PREDICTION:


### Solution
```
def filter_primes(numbers):
    primes = []
    for number in numbers:
        if is_prime(number):
            primes.append(number)
    return primes

def is_prime(number):
    for divisor in range(2, number):
        if number % divisor == 0:
            return False
    return True
```

### Solution
```
def filter_primes(numbers):
    primes = []
    for number in numbers:
        if is_prime(number):
            primes.append(number)
    return primes

def is_prime(number):
    for divisor in range(2, number):
        if number % divisor == 0:
            return False
    return True
```

### Solution
```
def filter_primes(numbers):
    primes = []
    for number in numbers:
        if is_prime(number):
            primes.append(number)
    return primes

def is_prime(number):
    for divisor in range
====================================================================================================
REFERENCE:
import ast

tree = ast.parse(expression)

PREDICTION:


    :param expr: The expression to parse.
    :return: The syntax tree for the expression.
    """
    return ast.parse(expr).body[0].value


def _get_ast_node_type(node: ast.AST) -> str:
    """Get the type of an AST node.

    :param node: The node to get the type of.
    :return: The type of the node.
    """
    return node.__class__.__name__


def _get_ast_node_value(node: ast.AST) -> Any:
    """Get the value of an AST node.

    :param node: The node to get the value of.
    :return: The value of the node.
    """
    return node.value


def _get_ast_node_children(node: ast.AST) -> List[ast.AST]:
    """Get the children of an AST node.

    :param node: The node to get the children of.
    :return: The children of the node.
    """
    return node.body
====================================================================================================
REFERENCE:
def round_up(f):
    if f - int(f) >= 0.5:
        return int(f) + 1
    return int(f)

round_val = round_up(3.14)
print(round_val)

PREDICTION:


### Solution
```
def round_up(num):
    return int(num + 0.5)
```
```
def round_up(num):
    return int(num + 0.5)
```
```
def round_up(num):
    return int(num + 0.5)
```
```
def round_up(num):
    return int(num + 0.5)
```
```
def round_up(num):
    return int(num + 0.5)
```
```
def round_up(num):
    return int(num + 0.5)
```
```
def round_up(num):
    return int(num + 0.5)
```
```
def round_up(num):
    return int(num + 0.5)
```
```
def round_up(num):
    return int(num + 0.5)
```
```
def round_up(num):
    return int(num + 0.5)
```
```
def round_up(num):

====================================================================================================
REFERENCE:
"""
Create a program to assess whether or not a movie genre is representing violent behaviour
"""

import nltk
from nltk.tokenize import word_tokenize

def classify_movie(review):
    # Tokenize review
    tokens = word_tokenize(review)

    # Check for violent words in the review
    violent_words = ['violence', 'violent', 'killing', 'fight', 'bloody', 'war']

    for token in tokens:
        if token in violent_words:
            return 'Yes'

    return 'No'

if __name__ == '__main__':
    review = 'The movie is full of thrilling action scenes and lots of violence.'
    result = classify_movie(review)
    print(result)

PREDICTION:


### Solution:
```
def is_violent(review):
    if "violent" in review.lower():
        return True
    else:
        return False
```
### Code Explanation:

The solution is a python program to assess whether or not a movie genre is representing violent behavior, given a review of the movie.

### Solution:
```
def is_violent(review):
    if "violent" in review.lower():
        return True
    else:
        return False
```
### Code Explanation:

The solution is a python program to assess whether or not a movie genre is representing violent behavior, given a review of the movie.

### Solution:
```
def is_violent(review):
    if "violent" in review.lower():
        return True
    else:
        return False
```
### Code Explanation:

The solution is a python program to assess whether or not a movie genre is representing violent behavior, given a review of the movie.

### Solution:
```
def is_vi
====================================================================================================
REFERENCE:
import sqlite3

class DataAccess(object):
 
 def __init__(self, db_name):
 self.conn = sqlite3.connect(db_name)
 self.cur = self.conn.cursor()
 
 def save_data(self, table, id, name):
 self.cur.execute(f"INSERT INTO {table} VALUES (?, ?)", (id, name))
 self.conn.commit()
 
 def read_data(self, table, id):
 self.cur.execute(f"SELECT * FROM {table} WHERE id = ?", (id,))
 return self.cur.fetchone()
 
 def close_connection(self):
 self.conn.close()

UserDAO = DataAccess('my_db.db')

PREDICTION:


### Solution
```
class Database:
    def __init__(self, data):
        self.data = data

    def get(self, key):
        return self.data[key]

    def set(self, key, value):
        self.data[key] = value
```
====================================================================================================
REFERENCE:
class SomeClass:

    def __init__(self, field1, field2):
        self.field1 = field1
        self.field2 = field2

PREDICTION:


### Solution:
```
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
```
====================================================================================================
REFERENCE:
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

person = Person("John", 25)

PREDICTION:


Create a Python object that contains three attributes, "Name", "Age", and "Gender".

Create a Python object that contains four attributes, "Name", "Age", "Gender", and "Favorite Color".

Create a Python object that contains five attributes, "Name", "Age", "Gender", "Favorite Color", and "Favorite Food".

Create a Python object that contains six attributes, "Name", "Age", "Gender", "Favorite Color", "Favorite Food", and "Favorite TV Show".

Create a Python object that contains seven attributes, "Name", "Age", "Gender", "Favorite Color", "Favorite Food", "Favorite TV Show", and "Favorite Movie".

Create a Python object that contains eight attributes, "Name", "Age", "Gender", "Favorite Color", "Favorite Food", "Favorite TV Show", "Favorite Movie", and "Favorite Book".

Create a Python object that contains nine attributes, "Name", "Age", "Gender", "Favorite Color", "Favorite
====================================================================================================
REFERENCE:
def filter_list(strings):
    unique_strings = []
    for string in strings:
        if string not in unique_strings:
            unique_strings.append(string)
    return unique_strings

strings = ["abc", "def", "abc", "ghi", "jkl", "mno", "abc", "pqr"]
filtered_strings = filter_list(strings)
print(filtered_strings)

# Output: ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']

PREDICTION:


### Solution:
```
def unique_elements(lst):
    return list(set(lst))
```
### Tests:
```
import unittest

class TestSolution(unittest.TestCase):
    def test_solution(self):
        self.assertEqual(unique_elements(['a', 'b', 'c', 'a', 'b', 'c']), ['a', 'b', 'c'])
        self.assertEqual(unique_elements(['a', 'b', 'c', 'd', 'e', 'f']), ['a', 'b', 'c', 'd', 'e', 'f'])
        self.assertEqual(unique_elements(['a', 'b', 'c', 'd', 'e', 'f', 'a', 'b', 'c', 'd', 'e', 'f']), ['a', 'b', 'c', 'd', 'e', 'f'])
        self.assertEqual(unique_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', '
====================================================================================================
REFERENCE:
def reverse_array(arr): 
      
    # Initialize start and end index 
        start = 0
        end = len(arr) - 1
  
    # Loop over the array 
    while start < end: 
  
        # Swap the elements at start and end 
        arr[start], arr[end] = arr[end], arr[start]  
          
        # Update start and end index 
        start += 1
        end -= 1
  
# Driver code 
arr = [1, 2, 3] 
  
reverse_array(arr) 
  
# Print our modified array   
print(arr)

PREDICTION:


### Solution:
```
def reverse_array(arr):
    for i in range(len(arr)//2):
        arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]
    return arr
```
====================================================================================================
REFERENCE:
import string
import random

def generateRandomString():
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for _ in range(10))
    
if __name__ == '__main__':
    print(generateRandomString())

PREDICTION:
.

### Solution:
```
import random

def random_string():
    return ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(10))
```
====================================================================================================
REFERENCE:
for i in range(2, 11):
    print(i)

PREDICTION:


### Solution
```
for i in range(2, 11):
    print(i)
```

====================================================================================================
REFERENCE:
def print_divisible_by_three(n):
  for num in range(n+1):
    if num % 3 == 0:
      print(num, end=" ")

print_divisible_by_three(10)

PREDICTION:


### Solution
```
def print_numbers_divisible_by_3(n):
    for i in range(n + 1):
        if i % 3 == 0:
            print(i)
```
### Code Explanation
The solution is very simple. We just need to iterate through the range of numbers from 0 to n and print the numbers that are divisible by 3.

###
====================================================================================================
REFERENCE:
import string

def search(docs, key):
 results = []
 for doc in docs:
 words = doc.lower().translate(str.maketrans('', '', string.punctuation)).split()
 if key in words:
 results.append(doc)
 return results

PREDICTION:


### Solution:
```
def search(keyword, documents):
    results = []
    for document in documents:
        if keyword in document:
            results.append(document)
    return results
```
====================================================================================================
REFERENCE:
def filter_list(arr):
    filtered_list = []
    for num in arr:
        if num % 3 != 0:
            filtered_list.append(num)
    return filtered_list

print(filter_list([2, 3, 4, 5, 6, 7, 8, 9]))

PREDICTION:


### Solution:
```
def filter_list(l):
    return [x for x in l if x % 3 != 0]
```

====================================================================================================
REFERENCE:
def countOccurences(str, char):
    count = 0
    for ch in str:
        if ch == char:
            count += 1
    return count

print(countOccurences('abcdefg', 'a'))

PREDICTION:


### Solution:
```
def count_char(string, char):
    return string.count(char)
```

====================================================================================================
REFERENCE:
def countPrimes(num): 
    if num <= 1:  
        return 0
 
    primes = [2] 
    x = 3
    
    while x <= num: 
        for y in primes: 
            if x % y == 0: 
                x += 2
                continue
        primes.append(x) 
        x += 2
    
    return len(primes) 

num_primes = countPrimes(100)
print("Number of primes between 1 and 100:", num_primes)

PREDICTION:


### Solution:
```
def prime_numbers(n):
    if n <= 1:
        return 0
    else:
        count = 0
        for i in range(2, n + 1):
            if i % 2 != 0:
                count += 1
        return count
```

### Code Explanation:

1. We first check if the given number is less than or equal to 1. If it is, we return 0.
2. We then initialize a variable `count` to 0.
3. We then iterate over the range of numbers from 2 to the given number `n`.
4. We then check if the number `i` is not divisible by 2. If it is not, we increment the variable `count` by 1.
5. We then return the value of the variable `count`.

### References:
- [Python Program to Find Prime Numbers](https://www.geeksforgeeks.org/python-program-to-find-prime-numbers/)
- [Python Program to Find Prime Numbers](https://www.ge
====================================================================================================
REFERENCE:
import hashlib 
  
def encrypt_string(string, password):
    md5_string = hashlib.md5(string.encode()).hexdigest()
    password_string = hashlib.md5(password.encode()).hexdigest()
    result = ""

    for i in range(32):
        result += md5_string[i] + password_string[i]
    return result

string = "Hello World!"
password = "password"

result = encrypt_string(string, password)
print(result)

PREDICTION:


### Solution
```
def encrypt(string, password):
    encrypted_string = ""
    for char in string:
        encrypted_string += chr(ord(char) + ord(password))
    return encrypted_string
```

### Tests
```
>>> encrypt("hello", "a")
"ifmmp"
>>> encrypt("hello", "b")
"jgnnq"
>>> encrypt("hello", "c")
"khoor"
>>> encrypt("hello", "d")
"l
====================================================================================================
REFERENCE:
def fibonacci(n):
  if n<0:
    print("Incorrect input")
  elif n==1:
    return 0
  elif n==2:
    return 1
  else:
    return fibonacci(n-1)+fibonacci(n-2)
print("Fibonacci series up to",n,":")
for i in range(1,n+1):
  print(fibonacci(i))

PREDICTION:


### Solution:
```
def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)
```

### References:
- [Wikipedia](https://en.wikipedia.org/wiki/Fibonacci_number)
- [Wikipedia](https://en.wikipedia.org/wiki/Fibonacci_sequence)
- [Wikipedia](https://en.wikipedia.org/wiki/Recursion_(computer_science))
- [Wikipedia](https://en.wikipedia.org/wiki/Recursion_(computer_science)#Tail_recursion)
- [Wikipedia](https://en.wikipedia.org/wiki/Tail_call)
- [Wikipedia](https://en.wikipedia.org/wiki/Tail_call_optimization)
- [Wikipedia](https://en.wikipedia.org/wiki/Tail_call_optimization#Implementations)

====================================================================================================
REFERENCE:
class File:
    """A simple file class"""
    def __init__(self, name, size, type):
        self.name = name
        self.size = size
        self.type = type

    def get_name(self):
        return self.name

    def get_size(self):
        return self.size

    def get_type(self):
        return self.type

PREDICTION:


### Question 2

Using the given data, create a class in Python and add some methods to the class.

### Question 3

Using the given data, create a class in Python and add some methods to the class.

### Question 4

Using the given data, create a class in Python and add some methods to the class.

### Question 5

Using the given data, create a class in Python and add some methods to the class.

### Question 6

Using the given data, create a class in Python and add some methods to the class.

### Question 7

Using the given data, create a class in Python and add some methods to the class.

### Question 8

Using the given data, create a class in Python and add some methods to the class.

### Question 9

Using the given data, create a class in Python and add some methods to the class.

### Question 10

Using the given data, create a class in Python and add some methods to the class.

### Question 11

Using the
====================================================================================================
REFERENCE:
import requests
from bs4 import BeautifulSoup

# Specify the URL
url = 'website.com'

# Get the response
response = requests.get(url)

# Parse the response
soup = BeautifulSoup(response.text, 'html.parser')

# Extract all the articles on the front page
articles = soup.find_all('article', class_='front-page-article')

# Iterate through each article and print its text
for article in articles:
 print(article.find('h2').text)

PREDICTION:


### Solution
```
# Import libraries
from urllib.request import urlopen
from bs4 import BeautifulSoup
import pandas as pd

# Define function
def get_articles(url):
    # Open the url
    html = urlopen(url)
    # Parse the html
    soup = BeautifulSoup(html, 'html.parser')
    # Find all the articles
    articles = soup.find_all('article')
    # Create a list to store the articles
    article_list = []
    # Loop through the articles
    for article in articles:
        # Get the title
        title = article.find('h2').text
        # Get the content
        content = article.find('p').text
        # Create a dictionary to store the article
        article_dict = {
            'title': title,
            'content': content
        }
        # Append the article to the list
        article_list.append(article_dict)
    # Return the list of articles
    return article_list

# Define main function
def main():
    # Get the articles from the front
====================================================================================================
REFERENCE:
import uuid
 
# generate a GUID
guid = str(uuid.uuid4())
 
# print the GUID
print(guid)

// Output: 3c112f3d-3c68-4b4c-a85d-672622be9f25

PREDICTION:


### Solution:
```
import uuid
print(uuid.uuid4())
```
```
Output
```
Output
```
```
Output
```
Output
```
Output
```
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
Output
```
====================================================================================================
REFERENCE:
def calculateSum(arr):
 sums = [0] * len(arr[0])
 for r in arr:
  for i in range(len(r)):
   sums[i] += r[i]
 return sums

def getRowsSum(arr):
 rowSums = []
 for r in arr:
  rowSums.append(sum(r))
 return rowSums

arr = [[2, 3, 5], 
 [5, 7, 1], 
 [4, 6, 9]]

columnSums = calculateSum(arr)
rowSums = getRowsSum(arr)

print("Row sums:", rowSums)
print("Column sums:", columnSums)

# Output: Row sums: [10, 13, 15] Column sums: [11, 16, 15]

PREDICTION:


### Solution
```
def sum_rows_cols(arr):
    row_sums = []
    col_sums = []
    for row in arr:
        row_sums.append(sum(row))
    for col in zip(*arr):
        col_sums.append(sum(col))
    return row_sums, col_sums
```
```
def sum_rows_cols(arr):
    row_sums = []
    col_sums = []
    for row in arr:
        row_sums.append(sum(row))
    for col in zip(*arr):
        col_sums.append(sum(col))
    return row_sums, col_sums
```
```
def sum_rows_cols(arr):
    row_sums = []
    col_sums = []
    for row in arr:
        row_sums.append(sum(row))
    for col in zip(*arr):
        col_sums.append(sum(col))
    return row_sums, col_sums

====================================================================================================
REFERENCE:
def usd_to_euro(amount):
  euro = amount * 0.9
  print(amount, "USD is equal to", euro, "Euros.")
  
usd_to_euro(12.5)

PREDICTION:


### Solution
```
def usd_to_euro(usd):
    euro = usd * 0.85
    return euro

usd = 100
euro = usd_to_euro(usd)
print(euro)
```
### Code Explanation

1. Define a function named `usd_to_euro` that takes a USD value as an argument and returns the Euro value.
2. Define a variable named `usd` and assign it the value 100.
3. Call the `usd_to_euro` function and assign the returned value to the `euro` variable.
4. Print the value of the `euro` variable to the console.

### Code Explanation

1. Define a function named `usd_to_euro` that takes a USD value as an argument and returns the Euro value.
2. Define a variable named `usd` and assign it the value 100.
3. Call the `usd_to_euro` function and assign the returned value to the
====================================================================================================
REFERENCE:
def search_replace(sentence, target, replacement):
    words = sentence.split(" ")

    for i in range(len(words)):
        if words[i] == target:
            words[i] = replacement
    
    return " ".join(words)

sentence = "The quick brown fox jumps over the lazy dog"
print(search_replace(sentence, "quick", "slow")) # "The slow brown fox jumps over the lazy dog"

PREDICTION:


### Solution:
```
def search_replace(sentence):
    return sentence.replace("Python", "Java")
```
### Tests:
```
import unittest

class TestSolution(unittest.TestCase):
    def test_search_replace(self):
        self.assertEqual(search_replace("Python is a programming language"), "Java is a programming language")
        self.assertEqual(search_replace("Python is a programming language and Java is a programming language"), "Java is a programming language and Java is a programming language")
        self.assertEqual(search_replace("Python is a programming language and Java is a programming language and Python is a programming language"), "Java is a programming language and Java is a programming language and Java is a programming language")
```
### Additional material:
The solution uses the `replace()` string method. <br>
`replace()` returns a new string with all occurrences of substring old replaced by new. <br>
`replace()` is case-sensitive. <br>
[string.replace()](https://docs.python.org/3/library/stdtypes.html
====================================================================================================
REFERENCE:
def reverseSentence(sentence): 
    words = sentence.split(' ') 
  
    newWords = [word[::-1] for word in words] 
      
    newSentence = ' '.join(newWords) 
      
    return newSentence 
  
sentence = input("Enter a sentence: ")
print(reverseSentence(sentence))

PREDICTION:


### Solution
```
# Solution
sentence = input("Enter a sentence: ")
print(sentence[::-1])
```
====================================================================================================
REFERENCE:
# Solution
# First, let's define our list of numbers
my_list = [1, 2, 3]

# Now, let's define a function to generate all permutations
def allPermutations(my_list):
 if len(my_list) == 0:
  return []
 if len(my_list) == 1:
  return [my_list]
 permutations = []
 for i in range(len(my_list)):
  m = my_list[i]
  remaining_list = my_list[:i] + my_list[i+1:]
  for p in allPermutations(remaining_list):
   permutations.append([m] + p)
 return permutations

# Finally, we can call the function and print out the result
print(allPermutations(my_list))

PREDICTION:


### Solution:
```
def permutations(lst):
    if len(lst) == 1:
        return [lst]
    else:
        return [x + [i] for x in permutations(lst[1:]) for i in lst[0]]
```

### References:
- [Wikipedia](https://en.wikipedia.org/wiki/Permutation)
- [GeeksForGeeks](https://www.geeksforgeeks.org/python-program-for-generating-permutations/)
- [StackOverflow](https://stackoverflow.com/questions/1044
====================================================================================================
REFERENCE:
def lcm(a, b): 
    lcm = (a*b)//gcd(a,b) 
    return lcm

PREDICTION:


### Solution:
```
def lcm(a, b):
    return a * b // gcd(a, b)
```
====================================================================================================
REFERENCE:
def bubbleSort(list): 
	n = len(list) 
	for i in range(n): 
		for j in range(0, n-i-1): 
			if list[j] > list[j+1] : 
				list[j], list[j+1] = list[j+1], list[j] 
	return list

print(bubbleSort([8,2,11,9,20,7]))

PREDICTION:
.

### Solution:
```
def bubble_sort(nums):
    for i in range(len(nums)):
        for j in range(len(nums) - 1):
            if nums[j] > nums[j + 1]:
                nums[j], nums[j + 1] = nums[j + 1], nums[j]
    return nums
```

### Code Explanation:

The solution is a Python function that sorts a list of numbers using the bubble sort algorithm.

### Solution:
```
def bubble_sort(nums):
    for i in range(len(nums)):
        for j in range(len(nums) - 1):
            if nums[j] > nums[j + 1]:
                nums[j], nums[j + 1] = nums[j + 1], nums[j]
    return nums
```

### Code Explanation:

The solution is a Python function that sorts a list of numbers using the bubble
====================================================================================================
REFERENCE:
import unittest
from flask_testing import TestCase
from app import db, Task

class TestModel(TestCase):
 def create_app(self):
 return app

 def setUp(self):
 db.create_all()
 self.task = Task(description='Description')
 db.session.add(self.task)
 db.session.commit()

 def tearDown(self):
 db.session.remove()
 db.drop_all()

class TestTask(TestModel):
 def test_task_creation(self):
 self.assertEqual('Description', self.task.description)

if __name__ == '__main__':
 unittest.main()

PREDICTION:


### Instructions

* Create a Python script named `test_models.py` in the `tests` directory.

* Import the `unittest` module.

* Create a class named `TestModels` that inherits from `unittest.TestCase`.

* Create a test method named `test_create_user` that will test the `create_user` method.

  * Create a new user by calling the `create_user` method.

  * Assert that the user was created successfully.

* Create a test method named `test_create_question` that will test the `create_question` method.

  * Create a new question by calling the `create_question` method.

  * Assert that the question was created successfully.

* Create a test method named `test_create_answer` that will test the `create_answer` method.

  * Create a new answer by calling the `create_answer` method.

  * Assert that the answer was created successfully.

* Create a test method named `test_create_question_answer` that will test the `create_question_
====================================================================================================
REFERENCE:
def filter_A_columns(df): 
    col_list = [col for col in df.columns if col[0] == 'A']
    return df[col_list]

PREDICTION:


### Solution
```
def get_columns_starting_with_A(df):
    return df[df.columns[df.columns.str.startswith('A')]]
```

### Code Explanation

The code is very simple. We use the `str.startswith()` method to check if the column name starts with the letter 'A'. We then use the `[]` operator to select only the columns that start with the letter 'A'.

### References

* [Python Pandas str.startswith() Method](https://www.w3schools.com/python/ref_string_startswith.asp)
* [Python Pandas DataFrame.columns Property](https://www.w3schools.com/python/pandas_
====================================================================================================
REFERENCE:
arr.sort() 
print(arr)

PREDICTION:


### Solution:
```
def sort_array(arr):
    arr.sort()
    return arr
```
```
def sort_array(arr):
    arr.sort(reverse=True)
    return arr
```
```
def sort_array(arr):
    arr.sort(key=lambda x: x[1])
    return arr
```
```
def sort_array(arr):
    arr.sort(key=lambda x: x[0])
    return arr
```
```
def sort_array(arr):
    arr.sort(key=lambda x: x[1], reverse=True)
    return arr
```
```
def sort_array(arr):
    arr.sort(key=lambda x: x[0], reverse=True)
    return arr
```
```
def sort_array(arr):
    arr.sort(key=lambda x: x[1])
    return arr
```
```
def sort_array(arr):
    arr.sort(key=lambda x: x[0])
    return arr
```
```
def sort_array(
====================================================================================================
REFERENCE:
#!/usr/bin/env python
 
import cgi
 
#Get form data
form = cgi.FieldStorage()
 
name = form.getvalue('name')
age = form.getvalue('age')

# Display the results
print "Content-type: text/html"
print
print "<html>"
print "<body>"
print "<p>Hi, %s! You are %s years old.</p>" % (name, age)
print "</body>"
print "</html>"

PREDICTION:


### Solution
```
#!/usr/bin/env python

import cgi
import cgitb
cgitb.enable()

print("Content-Type: text/html")
print()

form = cgi.FieldStorage()

print("<p>Hello, %s!</p>" % form.getvalue("name"))
```
====================================================================================================
REFERENCE:
from textblob import TextBlob

def sentiment_classifier(sentence):
  sentiment_score = TextBlob(sentence).sentiment.polarity
  if sentiment_score > 0:
    return 'positive'
  elif sentiment_score < 0:
    return 'negative'
  else:
    return 'neutral'

PREDICTION:


### Problem Statement

Write a program in Python to classify the sentiment of a given sentence.

### Solution

```
# Python program to classify the sentiment of a given sentence.

# Importing the libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Importing the dataset
dataset = pd.read_csv('Sentiment_Analysis.csv')

# Creating a dataframe
df = pd.DataFrame(dataset, columns = ['Sentence', 'Sentiment'])

# Creating a scatter plot
sns.scatterplot(x = 'Sentiment', y = 'Sentence', data = df)
plt.show()
```

### References

- [Python Program to Classify the Sentiment of a Given Sentence](https://www.geeksforgeeks.org/python-program-to-classify-the-sentiment-of-a-given-sentence/)
- [Sentiment Analysis](https://www.geeksforgeeks.org/sentiment-analysis/)
-
====================================================================================================
REFERENCE:
def is_divisible_by_5(number):
    if (number % 5 == 0):
        return True
    else:
        return False
    
number = 10
is_divisible_by_5(number)

PREDICTION:
 or 7.

### Solution
```
def check_divisible(num):
    if num % 5 == 0 or num % 7 == 0:
        return True
    else:
        return False
```
### Code Explanation:

The function check_divisible() takes a number as a parameter and checks if the number is divisible by 5 or 7. If the number is divisible by 5 or 7, the function returns True. Otherwise, the function returns False.

###
====================================================================================================
REFERENCE:
import xml.etree.ElementTree as ET
 
# Read the XML file
tree = ET.parse('items.xml')
 
# Get the root element
root = tree.getroot()
 
# Iterate over each item
for item in root.findall('item'):
 # Get the title
 title = item.find('title').text
 # Get the description
 description = item.find('description').text
 
 print('Title: ', title)
 print('Description: ', description)

PREDICTION:


### Solution
```
#!/usr/bin/env python3

import xml.etree.ElementTree as ET

tree = ET.parse('items.xml')
root = tree.getroot()

for item in root.findall('item'):
    title = item.find('title').text
    description = item.find('description').text
    print(f'Title: {title}')
    print(f'Description: {description}')
```
### Output
```
Title: Item 1
Description: This is the first item.
Title: Item 2
Description: This is the second item.
Title: Item 3
Description: This is the third item.
```
### References
- [Python XML Parsing](https://www.w3schools.com/python/python_xml_parsing.asp)
- [Python XML ElementTree](https://docs.python.org/3/library/xml.etree.elementtree.html)
- [Python XML ElementTree findall() Method](https://www.w3schools.com/python/ref_
====================================================================================================
REFERENCE:
import requests
from bs4 import BeautifulSoup

url = "https://www.example.com"

page = requests.get(url)

soup = BeautifulSoup(page.content, 'html.parser')

text = soup.find_all(text=True)

for t in text:
    print(t.strip())

PREDICTION:
.

### Solution
```
import requests
from bs4 import BeautifulSoup

url = 'https://www.python.org/'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

text = soup.get_text()
print(text)
```
### Code Explanation

1. Import the required modules.
2. Create a variable that stores the URL of the webpage.
3. Make a GET request to the URL.
4. Create a variable that stores the response of the GET request.
5. Create a variable that stores the text from the webpage.
6. Print the text.

### References
- [Beautiful Soup Documentation](https://www.crummy.com/software/BeautifulSoup/bs4/doc/)
- [Requests Documentation](https://requests.readthedocs.io/en/master/)
- [Python Requests Tutorial](https://realpython.com/python-requests/)
- [Python Beautiful Soup Tutorial](https://realpython.com/beautiful-s
====================================================================================================
REFERENCE:
import difflib

def plagiarism_detector(string_a, string_b):
    sequence = difflib.SequenceMatcher(None, string_a, string_b)
    similarity = sequence.ratio() * 100
    print('Similarity = {:.2f}%'.format(similarity))

plagiarism_detector('The quick brown fox', 'The quick brown fox jumps over the lazy dog')

PREDICTION:


### Prerequisites

* Python 3.6 or higher
* pip

### Installing

* Clone the repository
* Install the dependencies
```
pip install -r requirements.txt
```

### Running the tests

* Run the tests
```
python -m unittest discover
```

### Usage

* Run the program
```
python main.py
```

### Built With

* [Python](https://www.python.org/) - The programming language used

### Authors

* **Akshay N Sharma** - *Initial work* - [AkshaySharma0](https://github.com/AkshaySharma0)

### License

This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details

### Acknowledgments

* [Udacity](https://www.udacity.com/) - For providing the course
* [Google](https://www.google.com/) - For providing the dataset
*
====================================================================================================
REFERENCE:
def generate_table(num):
    # print the table heading
    print("MULTIPLICATION TABLE FOR {}".format(num))
    # generate the table
    for i in range(1, 11):
        print("{} x {} = {}".format(num, i, num*i))

# generate table for 9
generate_table(9)

PREDICTION:


### Solution:
```
def multiplication_table(number):
    return [[number * i for i in range(1, number + 1)] for j in range(1, number + 1)]
```
```
>>> multiplication_table(5)
[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20], [5, 10, 15, 20, 25]]
```
```
>>> multiplication_table(10)
[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], [3, 6, 9, 12, 15, 18, 21, 24
====================================================================================================
REFERENCE:
def print_distinct(lst):
    seen = set()
    distinct = []
    for x in lst:
        if x not in seen:
            distinct.append(x)
            seen.add(x)
    print(distinct)

PREDICTION:


### Solution:
```
def print_distinct_elements(arr):
    for i in set(arr):
        print(i)
```
```
def print_distinct_elements(arr):
    for i in set(arr):
        print(i)
```
```
def print_distinct_elements(arr):
    for i in set(arr):
        print(i)
```
```
def print_distinct_elements(arr):
    for i in set(arr):
        print(i)
```
```
def print_distinct_elements(arr):
    for i in set(arr):
        print(i)
```
```
def print_distinct_elements(arr):
    for i in set(arr):
        print(i)
```
```
def print_distinct_elements(arr):
    for i in set(arr):
        print(i)
```
```
def print_distinct_elements(arr):
    for i in set(arr):
        print(i)
```
```
def print_distinct_elements
====================================================================================================
REFERENCE:
# Python program to check whether the number is prime or not

def is_prime(num):
    """ Function to check whether the number is prime or not """

    # Check whether the given number is greater than 1 
    if num > 1:
        # Iterate through the range of numbers to check if any number is a multiple of the given number
        for i in range(2,num):
            # If there is any multiple, the number is not prime
            if (num % i) == 0:
                return False
        # If there are no multiples, the number is prime 
        else:
            return True

# Call the function 
num = 97
print(is_prime(num))

# Output:
# True

PREDICTION:


### Solution:
```
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True
```

====================================================================================================
REFERENCE:
def is_present(arr, number):
    for i in range(len(arr)):
        if arr[i] == number:
            return True
    return False

PREDICTION:


### Solution:
```
def is_number_present(arr, num):
    return num in arr
```
====================================================================================================
REFERENCE:
# import the required libraries
import requests
import time

# enter the website url
url = "https://example.com/"

# make the initial request to get the initial html content
initial_content = requests.get(url).text

# loop for ever
while True: 
    
    # every 5 seconds, make a new request
    time.sleep(5)

    # make the new request
    current_content = requests.get(url).text
    
    # compare the new content with the initial content
    if current_content != initial_content:
        # update the initial content
        initial_content = current_content
        # print the message
        print("The content of the page has changed")

PREDICTION:


### Solution
```
import requests

def main():
    url = 'https://www.python.org/'
    response = requests.get(url)
    if response.text != '':
        print('The Python website has changed its content.')

if __name__ == '__main__':
    main()
```
### Short Explanation
We use the `requests` module to make a GET request to the Python website. We then check if the response text is empty. If it is not empty, we print a message.

### Long Explanation
We use the `requests` module to make a GET request to the Python website. We then check if the response text is empty. If it is not empty, we print a message.

### References
- [Python Requests](https://requests.readthedocs.io/en/master/)
- [Python Requests Documentation](https://requests.readthedocs.io/en/master/user/quickstart/)
- [Python Requests Tutorial](https://realpython.com/python-requests/)
- [Python Requests Tutorial](
====================================================================================================
REFERENCE:
def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1 
    else:
        return fibonacci(n-1) + fibonacci(n-2)

PREDICTION:


### Solution:
```
def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)
```

### Solution:
```
def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)
```

### Solution:
```
def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)
```

### Solution:
```
def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)
```
====================================================================================================
REFERENCE:
# Sort an array with m different types of elements
def sort_array(arr):
    # Get the number of different types of elements 
    m = len(set(arr)) 
    n = len(arr) 
  
    # Create an output array of size n
    output = [0] * (n) 
   
    # Store count of individual numbers in 
    # count array 
    count = [0] * (m) 
    for i in range(0, n): 
        count[arr[i]] += 1
   
    # finding cummulative count 
    for i in range(1, m): 
        count[i] += count[i - 1] 
  
    # Inserting values in sorted array
    for i in range(n - 1, -1, -1): 
        output[count[arr[i]] - 1] = arr[i] 
        count[arr[i]] -= 1
   
    return output 

# Driver Code 
arr = [2, 1, 1, 3, 6, 4, 5, 5]
sorted_arr = sort_array(arr) 
  
# Printing the sorted array 
print(*sorted_arr)

PREDICTION:


### Solution:
```
def sort(arr):
    # Sort the array
    arr.sort()
```
```
def sort(arr):
    # Sort the array
    arr.sort(key=lambda x: x[1])
```
```
def sort(arr):
    # Sort the array
    arr.sort(key=lambda x: x[0])
```
```
def sort(arr):
    # Sort the array
    arr.sort(key=lambda x: x[0])
```
```
def sort(arr):
    # Sort the array
    arr.sort(key=lambda x: x[1])
```
```
def sort(arr):
    # Sort the array
    arr.sort(key=lambda x: x[0])
```
```
def sort(arr):
    # Sort the array
    arr.sort(key=lambda x: x[1])
```
```
def sort(arr):
    # Sort the array
    arr.sort(key=lambda x: x[0])
```
```
def sort(arr):
    #
====================================================================================================
REFERENCE:
# Input two numbers
a = 10
b = 5

# Swapping using bitwise operator
a = a ^ b 
b = a ^ b 
a = a ^ b 

# Printing output
print("a =", a) 
print("b =", b)

PREDICTION:


### Solution:
```
def swap(a, b):
    a, b = b, a
    return a, b
```

====================================================================================================
REFERENCE:
def insertion_sort(arr):
    for i in range(1, len(arr)): 
        key = arr[i] 
        j = i-1
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key 

arr = [9, 8, 7, 6, 5, 4, 3, 2, 1]
insertion_sort(arr)

PREDICTION:
.

### Solution:
```
def selection_sort(arr):
    for i in range(len(arr)):
        min_idx = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    return arr
```
```
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i-1
        while j >= 0 and key < arr[j]:
            arr[j+1] = arr[j]
            j -= 1
        arr[j+1] = key
    return arr
```
```
def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr)//2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    i = j = k =
====================================================================================================
