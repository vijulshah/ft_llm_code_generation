CodeBert Scores = {'avg_precision': 0.8190996646881104, 'avg_recall': 0.7882862687110901, 'avg_f1_score': 0.801009476184845, 'avg_f3_score': 0.7903977632522583}
====================================================================================================

REFERENCE:
def longest_common_substring(s1, s2):
    s1_length = len(s1)
    s2_length = len(s2)
  
    matrix = [[0] * (s2_length + 1) for _ in range(s1_length + 1)]
    longest, x_longest = 0, 0
    for x in range(1, s1_length + 1):
        for y in range(1, s2_length + 1):
            if s1[x - 1] == s2[y - 1]:
                matrix[x][y] = matrix[x - 1][y - 1] + 1
                if matrix[x][y] > longest:
                    longest = matrix[x][y]
                    x_longest = x
            else:
                matrix[x][y] = 0
    return s1[x_longest - longest: x_longest]

longest_common_substring(string1, string2) 
# output: 'Hello'

PREDICTION:


### Solution:
```
def longest_common_substring(str1, str2):
    # Create a dictionary to store the longest common substring
    # for each substring in str1
    longest_common_substring_dict = {}
    # Iterate through each substring in str1
    for substring in str1:
        # Check if the substring is in str2
        if substring in str2:
            # Check if the substring is already in the dictionary
            if substring in longest_common_substring_dict:
                # If it is, update the longest common substring
                longest_common_substring_dict[substring] = max(longest_common_substring_dict[substring], substring)
            else:
                # If it is not, add it to the dictionary
                longest_common_substring_dict[substring] = substring
    # Return the longest common substring
    return max(longest_common_substring_dict.values())
```
====================================================================================================
REFERENCE:
def find_most_frequent(lst):
    max_count = 0
    most_frequent = None
    count_dict = {}
    for elem in lst:
        if elem not in count_dict:
            count_dict[elem] = 1
        else:
            count_dict[elem] += 1
            
        if count_dict[elem] > max_count:
            most_frequent = elem
            max_count = count_dict[elem]
            
    return most_frequent, max_count

PREDICTION:


I have a python list like this:

\begin{code}
my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61
====================================================================================================
REFERENCE:
import sys
  
def size_of_object(obj): 
    return (sys.getsizeof(obj)) 
  
object1 = 10
print(size_of_object(object1))

PREDICTION:


### Solution:
```
def find_size(obj):
    if isinstance(obj, dict):
        return sum(find_size(v) for v in obj.values())
    elif isinstance(obj, list):
        return sum(find_size(v) for v in obj)
    else:
        return sys.getsizeof(obj)
```
====================================================================================================
REFERENCE:
# Generate pseudo-random numbers in Python

import random

# Generate a pseudo-random number between 0 and 1
num = random.random()
print("Pseudo-random number between 0 and 1: ", num)

# Generate pseudo-random numbers from a discrete set
num = random.choice([1, 2, 3, 4, 5])
print("Pseudo-random number from a discrete set: ", num)

PREDICTION:


### Solution:
```
import random

# Generate a random number between 0 and 100
random_number = random.randint(0, 100)
print(random_number)

# Generate a random number between 0 and 100
random_number = random.randint(0, 100)
print(random_number)

# Generate a random number between 0 and 100
random_number = random.randint(0, 100)
print(random_number)
```
====================================================================================================
REFERENCE:
def split_list(lst, size):
    part1 = lst[:size]
    part2 = lst[size:]
    return part1, part2

# example
my_list = [1, 2, 3, 4, 5, 6, 7]
part1, part2 = split_list(my_list, 3)
print(part1) # [1, 2, 3]
print(part2) # [4, 5, 6, 7]

PREDICTION:


### Solution:
```
def split_list(lst, n):
    return lst[:n], lst[n:]
```
====================================================================================================
REFERENCE:
def filter_words_with_a(words):
 return [word for word in words if "a" in word]

PREDICTION:


# Solution
```
def filter_a(words):
    return [word for word in words if 'a' in word]
```
====================================================================================================
REFERENCE:
def print_dict(dict):
 for key in dict:
   print(key,":", dict[key])

PREDICTION:


### Solution:
```
def print_dict(d):
    for key, value in d.items():
        print(key, value)
```
====================================================================================================
REFERENCE:
class Node: 
  
    # Constructor to create a new binary node 
    def __init__(self, data):
        self.data = data  
        self.left = None
        self.right = None

def inorder(root): 
    if root: 
        # First recur on left child 
        inorder(root.left) 
  
        # then print the data of node 
        print(root.data)
  
        # now recur on right child 
        inorder(root.right) 
  

# Driver program to test the above function 
root = Node(1) 
root.left      = Node(2) 
root.right     = Node(3) 
root.left.left  = Node(4) 
root.left.right  = Node(5) 
  
inorder(root)

PREDICTION:


### Solution:
```
def inorder(root):
  if root:
    inorder(root.left)
    print(root.val)
    inorder(root.right)
```
====================================================================================================
REFERENCE:
def sumEvensInRange(arr, lower, upper):
    evens_sum = 0
    for num in arr:
        if num >= lower and num <= upper and num % 2 == 0:
            evens_sum += num
    return evens_sum

PREDICTION:


### Solution:
```
def sum_even(arr, start, end):
    return sum(arr[start:end+1][::2])
```
====================================================================================================
REFERENCE:
def calc_sum(sequence):
 sum = 0
 for num in sequence:
 sum += num
 return sum

def calc_sum_squares(sequence):
 sum = 0
 for num in sequence:
  if num % 2 == 1:
   sum += num * num
 return sum

sequence = [2, 4, 5, 6, 7]
total_sum = calc_sum(sequence)
sum_squares = calc_sum_squares(sequence)

print("Total sum:", total_sum)
print("Sum of squares of odd numbers:", sum_squares)

PREDICTION:


### Solution:
```
def sum_of_odd_squares(seq):
    sum_of_odd_squares = 0
    for i in seq:
        if i % 2 != 0:
            sum_of_odd_squares += i ** 2
    return sum_of_odd_squares
```
====================================================================================================
REFERENCE:
x = 3
result = 2*(x**2) + 5*x + 3

print(result)

# Outputs: 34

PREDICTION:


### Solution:
```
def calculate_expression(x):
    return 2 * x ** 2 + 5 * x + 3

print(calculate_expression(3))
```
====================================================================================================
REFERENCE:
last_element = [1, 8, 3, 10, 5][-1]

PREDICTION:
.

### Solution:
```
print(list[-1])
```
====================================================================================================
REFERENCE:
import random 
import string

def generatePassword(length):

    password_characters = string.ascii_letters + string.digits + string.punctuation

    password = ''.join(random.choice(password_characters) 
                       for i in range(length))
    lowercase = [a for a in password if a.islower()]
    uppercase = [b for b in password if b.isupper()]
    number = [c for c in password if c.isdigit()]
    special_character = [d for d in password if not d.isalnum()]

    if len(lowercase) == 0 or len(uppercase) == 0 or len(number) == 0 or len(special_character) == 0 :
        return generatePassword(length)
    else:
        return password

print(generatePassword(8))

PREDICTION:


```python
import string
import random

def generate_password():
    password = ''
    for i in range(8):
        password += random.choice(string.ascii_letters + string.digits + string.punctuation)
    return password

print(generate_password())
```

### References

- [Generate a random password in Python](https://www.geeksforgeeks.org/generate-a-random-password-in-python/)
- [Python string module](https://docs.python.org/3/library/string.html)
- [Python random module](https://docs.python.org/3/library/random.html)
- [Python ascii_letters](https://docs.python.org/3/library/string.html#string.ascii_letters)
- [Python digits](https://docs.python.org/3/library/string.html#string.digits)
- [Python punctuation](https://docs.python.org/3/library/string.html#string.punctuation)
- [Python random
====================================================================================================
REFERENCE:
import pandas as pd
from sklearn.linear_model import LinearRegression

data = pd.read_csv('house_price-data.csv')

X = data[['size']]
y = data['price']

model = LinearRegression()
model.fit(X, y)

PREDICTION:


### Data

The data is from the [Kaggle House Prices dataset](https://www.kaggle.com/c/house-prices-advanced-regression-techniques).

### Solution

1. Import the libraries.
```python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
```

2. Load the data.
```python
data = pd.read_csv('train.csv')
```

3. Split the data into training and testing sets.
```python
X_train, X_test, y_train, y_test = train_test_split(data['sqft_living'], data['price'], test_size=0.2, random_state=0)
```

4. Create a linear regression model.
```python
model = LinearRegression()
```

5. Train the model.

====================================================================================================
REFERENCE:
def filter_prime_numbers(l):
    result = []
    for num in l:
        if is_prime(num):
            result.append(num)
    return result

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

PREDICTION:


### Solution:
```
def filter_primes(numbers):
    primes = []
    for number in numbers:
        if is_prime(number):
            primes.append(number)
    return primes

def is_prime(number):
    for divisor in range(2, number):
        if number % divisor == 0:
            return False
    return True
```
====================================================================================================
REFERENCE:
import ast

tree = ast.parse(expression)

PREDICTION:


### Usage

```python
from pytree import parse

tree = parse('x + y')
```

### Output

```python
[
    {
        'type': 'Add',
        'children': [
            {
                'type': 'Name',
                'children': [],
                'value': 'x'
            },
            {
                'type': 'Name',
                'children': [],
                'value': 'y'
            }
        ]
    }
]
```

### Features

- Supports Python 3.6+
- Supports Python expressions with multiple statements
- Supports Python expressions with multiple levels of indentation
- Supports Python expressions with multiple levels of indentation and multiple statements
- Supports Python expressions with multiple levels of indentation, multiple statements, and multiple lines
- Supports Python expressions with multiple levels of indentation, multiple statements, multiple lines, and multiple lines of comments
- Supports Python expressions with multiple levels of indentation, multiple statements, multiple lines, multiple lines of comments, and multiple lines of comments
- Supports Python expressions with multiple
====================================================================================================
REFERENCE:
def round_up(f):
    if f - int(f) >= 0.5:
        return int(f) + 1
    return int(f)

round_val = round_up(3.14)
print(round_val)

PREDICTION:


### Solution:
```
def round_up(num):
    return int(num + 0.5)
```
====================================================================================================
REFERENCE:
"""
Create a program to assess whether or not a movie genre is representing violent behaviour
"""

import nltk
from nltk.tokenize import word_tokenize

def classify_movie(review):
    # Tokenize review
    tokens = word_tokenize(review)

    # Check for violent words in the review
    violent_words = ['violence', 'violent', 'killing', 'fight', 'bloody', 'war']

    for token in tokens:
        if token in violent_words:
            return 'Yes'

    return 'No'

if __name__ == '__main__':
    review = 'The movie is full of thrilling action scenes and lots of violence.'
    result = classify_movie(review)
    print(result)

PREDICTION:


### Solution:
```
def is_violent(review):
    return "violent" in review.lower()
```
====================================================================================================
REFERENCE:
import sqlite3

class DataAccess(object):
 
 def __init__(self, db_name):
 self.conn = sqlite3.connect(db_name)
 self.cur = self.conn.cursor()
 
 def save_data(self, table, id, name):
 self.cur.execute(f"INSERT INTO {table} VALUES (?, ?)", (id, name))
 self.conn.commit()
 
 def read_data(self, table, id):
 self.cur.execute(f"SELECT * FROM {table} WHERE id = ?", (id,))
 return self.cur.fetchone()
 
 def close_connection(self):
 self.conn.close()

UserDAO = DataAccess('my_db.db')

PREDICTION:


### Solution:
```
class Database:
    def __init__(self, data):
        self.data = data

    def get(self, key):
        return self.data[key]

    def set(self, key, value):
        self.data[key] = value
```
====================================================================================================
REFERENCE:
class SomeClass:

    def __init__(self, field1, field2):
        self.field1 = field1
        self.field2 = field2

PREDICTION:


### Solution:
```
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
```
====================================================================================================
REFERENCE:
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

person = Person("John", 25)

PREDICTION:


### Solution
```
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
```
====================================================================================================
REFERENCE:
def filter_list(strings):
    unique_strings = []
    for string in strings:
        if string not in unique_strings:
            unique_strings.append(string)
    return unique_strings

strings = ["abc", "def", "abc", "ghi", "jkl", "mno", "abc", "pqr"]
filtered_strings = filter_list(strings)
print(filtered_strings)

# Output: ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']

PREDICTION:


### Solution:
```
def unique_elements(lst):
    return list(set(lst))
```
====================================================================================================
REFERENCE:
def reverse_array(arr): 
      
    # Initialize start and end index 
        start = 0
        end = len(arr) - 1
  
    # Loop over the array 
    while start < end: 
  
        # Swap the elements at start and end 
        arr[start], arr[end] = arr[end], arr[start]  
          
        # Update start and end index 
        start += 1
        end -= 1
  
# Driver code 
arr = [1, 2, 3] 
  
reverse_array(arr) 
  
# Print our modified array   
print(arr)

PREDICTION:


### Solution:
```
def reverse_array(arr):
    for i in range(len(arr)//2):
        arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]
    return arr
```
====================================================================================================
REFERENCE:
import string
import random

def generateRandomString():
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for _ in range(10))
    
if __name__ == '__main__':
    print(generateRandomString())

PREDICTION:
.

### Solution:
```
import random

def generate_random_string():
    return ''.join(random.choices(string.ascii_letters, k=10))
```
====================================================================================================
REFERENCE:
for i in range(2, 11):
    print(i)

PREDICTION:


### Solution:
```
for i in range(2, 11):
    print(i)
```
====================================================================================================
REFERENCE:
def print_divisible_by_three(n):
  for num in range(n+1):
    if num % 3 == 0:
      print(num, end=" ")

print_divisible_by_three(10)

PREDICTION:


### Solution:
```
def print_numbers_divisible_by_3(n):
    for i in range(n + 1):
        if i % 3 == 0:
            print(i)
```
====================================================================================================
REFERENCE:
import string

def search(docs, key):
 results = []
 for doc in docs:
 words = doc.lower().translate(str.maketrans('', '', string.punctuation)).split()
 if key in words:
 results.append(doc)
 return results

PREDICTION:


### Solution:
```
def search(keyword, documents):
    results = []
    for document in documents:
        if keyword in document:
            results.append(document)
    return results
```
====================================================================================================
REFERENCE:
def filter_list(arr):
    filtered_list = []
    for num in arr:
        if num % 3 != 0:
            filtered_list.append(num)
    return filtered_list

print(filter_list([2, 3, 4, 5, 6, 7, 8, 9]))

PREDICTION:

Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design
====================================================================================================
REFERENCE:
def countOccurences(str, char):
    count = 0
    for ch in str:
        if ch == char:
            count += 1
    return count

print(countOccurences('abcdefg', 'a'))

PREDICTION:


### Solution:
```
def count_char(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count
```
====================================================================================================
REFERENCE:
def countPrimes(num): 
    if num <= 1:  
        return 0
 
    primes = [2] 
    x = 3
    
    while x <= num: 
        for y in primes: 
            if x % y == 0: 
                x += 2
                continue
        primes.append(x) 
        x += 2
    
    return len(primes) 

num_primes = countPrimes(100)
print("Number of primes between 1 and 100:", num_primes)

PREDICTION:


### Solution:
```
def prime_numbers(n):
    prime_numbers = []
    for i in range(2, n + 1):
        if all(i % j != 0 for j in range(2, i)):
            prime_numbers.append(i)
    return prime_numbers
```
====================================================================================================
REFERENCE:
import hashlib 
  
def encrypt_string(string, password):
    md5_string = hashlib.md5(string.encode()).hexdigest()
    password_string = hashlib.md5(password.encode()).hexdigest()
    result = ""

    for i in range(32):
        result += md5_string[i] + password_string[i]
    return result

string = "Hello World!"
password = "password"

result = encrypt_string(string, password)
print(result)

PREDICTION:


### Solution:
```
def encrypt(string, password):
    encrypted_string = ""
    for char in string:
        encrypted_string += chr(ord(char) + ord(password))
    return encrypted_string
```
====================================================================================================
REFERENCE:
def fibonacci(n):
  if n<0:
    print("Incorrect input")
  elif n==1:
    return 0
  elif n==2:
    return 1
  else:
    return fibonacci(n-1)+fibonacci(n-2)
print("Fibonacci series up to",n,":")
for i in range(1,n+1):
  print(fibonacci(i))

PREDICTION:


### Solution:
```
def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)
```
====================================================================================================
REFERENCE:
class File:
    """A simple file class"""
    def __init__(self, name, size, type):
        self.name = name
        self.size = size
        self.type = type

    def get_name(self):
        return self.name

    def get_size(self):
        return self.size

    def get_type(self):
        return self.type

PREDICTION:


### Solution:
```
class Student:
    def __init__(self, name, age, grade):
        self.name = name
        self.age = age
        self.grade = grade

    def get_name(self):
        return self.name

    def get_age(self):
        return self.age

    def get_grade(self):
        return self.grade

    def get_average_grade(self):
        return self.grade / self.age

student = Student("John", 15, 5)
print(student.get_name())
print(student.get_age())
print(student.get_grade())
print(student.get_average_grade())
```
====================================================================================================
REFERENCE:
import requests
from bs4 import BeautifulSoup

# Specify the URL
url = 'website.com'

# Get the response
response = requests.get(url)

# Parse the response
soup = BeautifulSoup(response.text, 'html.parser')

# Extract all the articles on the front page
articles = soup.find_all('article', class_='front-page-article')

# Iterate through each article and print its text
for article in articles:
 print(article.find('h2').text)

PREDICTION:


### Solution:
```
# Import the requests library
import requests

# Define the function
def web_scraper(url):
    # Make a GET request to the given URL
    response = requests.get(url)
    # Parse the HTML content
    html_content = response.content
    # Return the HTML content
    return html_content

# Call the function
html_content = web_scraper('https://www.python.org/')
# Print the HTML content
print(html_content)
```
====================================================================================================
REFERENCE:
import uuid
 
# generate a GUID
guid = str(uuid.uuid4())
 
# print the GUID
print(guid)

// Output: 3c112f3d-3c68-4b4c-a85d-672622be9f25

PREDICTION:


### Solution:
```
import uuid
print(uuid.uuid4())
```
====================================================================================================
REFERENCE:
def calculateSum(arr):
 sums = [0] * len(arr[0])
 for r in arr:
  for i in range(len(r)):
   sums[i] += r[i]
 return sums

def getRowsSum(arr):
 rowSums = []
 for r in arr:
  rowSums.append(sum(r))
 return rowSums

arr = [[2, 3, 5], 
 [5, 7, 1], 
 [4, 6, 9]]

columnSums = calculateSum(arr)
rowSums = getRowsSum(arr)

print("Row sums:", rowSums)
print("Column sums:", columnSums)

# Output: Row sums: [10, 13, 15] Column sums: [11, 16, 15]

PREDICTION:


### Solution:
```
def sum_rows_cols(arr):
    row_sums = []
    col_sums = []
    for row in arr:
        row_sums.append(sum(row))
    for col in zip(*arr):
        col_sums.append(sum(col))
    return row_sums, col_sums
```
====================================================================================================
REFERENCE:
def usd_to_euro(amount):
  euro = amount * 0.9
  print(amount, "USD is equal to", euro, "Euros.")
  
usd_to_euro(12.5)

PREDICTION:


### Solution:
```
def usd_to_euro(usd):
    euro = usd * 0.88
    print(euro)
```
====================================================================================================
REFERENCE:
def search_replace(sentence, target, replacement):
    words = sentence.split(" ")

    for i in range(len(words)):
        if words[i] == target:
            words[i] = replacement
    
    return " ".join(words)

sentence = "The quick brown fox jumps over the lazy dog"
print(search_replace(sentence, "quick", "slow")) # "The slow brown fox jumps over the lazy dog"

PREDICTION:


### Solution:
```
def search_and_replace(sentence, search_word, replace_word):
    return sentence.replace(search_word, replace_word)
```
====================================================================================================
REFERENCE:
def reverseSentence(sentence): 
    words = sentence.split(' ') 
  
    newWords = [word[::-1] for word in words] 
      
    newSentence = ' '.join(newWords) 
      
    return newSentence 
  
sentence = input("Enter a sentence: ")
print(reverseSentence(sentence))

PREDICTION:


### Solution:
```
# Solution:
sentence = input("Enter a sentence: ")
print(sentence[::-1])
```
====================================================================================================
REFERENCE:
# Solution
# First, let's define our list of numbers
my_list = [1, 2, 3]

# Now, let's define a function to generate all permutations
def allPermutations(my_list):
 if len(my_list) == 0:
  return []
 if len(my_list) == 1:
  return [my_list]
 permutations = []
 for i in range(len(my_list)):
  m = my_list[i]
  remaining_list = my_list[:i] + my_list[i+1:]
  for p in allPermutations(remaining_list):
   permutations.append([m] + p)
 return permutations

# Finally, we can call the function and print out the result
print(allPermutations(my_list))

PREDICTION:


### Solution:
```
def permutations(lst):
    if len(lst) == 1:
        return [lst]
    else:
        return [x + [i] for x in permutations(lst[1:]) for i in lst[0]]
```
====================================================================================================
REFERENCE:
def lcm(a, b): 
    lcm = (a*b)//gcd(a,b) 
    return lcm

PREDICTION:


### Solution:
```
def lcm(a, b):
    return a * b // gcd(a, b)
```
====================================================================================================
REFERENCE:
def bubbleSort(list): 
	n = len(list) 
	for i in range(n): 
		for j in range(0, n-i-1): 
			if list[j] > list[j+1] : 
				list[j], list[j+1] = list[j+1], list[j] 
	return list

print(bubbleSort([8,2,11,9,20,7]))

PREDICTION:
.

### Solution:
```
def bubble_sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr
```
====================================================================================================
REFERENCE:
import unittest
from flask_testing import TestCase
from app import db, Task

class TestModel(TestCase):
 def create_app(self):
 return app

 def setUp(self):
 db.create_all()
 self.task = Task(description='Description')
 db.session.add(self.task)
 db.session.commit()

 def tearDown(self):
 db.session.remove()
 db.drop_all()

class TestTask(TestModel):
 def test_task_creation(self):
 self.assertEqual('Description', self.task.description)

if __name__ == '__main__':
 unittest.main()

PREDICTION:


### Instructions:

1. Create a Python script named `test_models.py` in the `tests` directory.

2. Import the `unittest` module.

3. Create a class named `TestModels` that inherits from the `unittest.TestCase` class.

4. Create a test method named `test_create_user` that will test the `create_user` function.

5. Create a test method named `test_create_question` that will test the `create_question` function.

6. Create a test method named `test_create_answer` that will test the `create_answer` function.

7. Create a test method named `test_create_question_answer` that will test the `create_question_answer` function.

8. Create a test method named `test_get_question` that will test the `get_question` function.

9. Create a test method named `test_get_answer` that will test the `get_answer` function.

10. Create a test method named `test_get_question_answer` that will
====================================================================================================
REFERENCE:
def filter_A_columns(df): 
    col_list = [col for col in df.columns if col[0] == 'A']
    return df[col_list]

PREDICTION:


### Solution:
```
def get_columns_starting_with_A(df):
    return df[df.columns[df.columns.str.startswith('A')]]
```
====================================================================================================
REFERENCE:
arr.sort() 
print(arr)

PREDICTION:


### Solution:
```
def sort_array(arr):
    arr.sort()
    return arr
```
====================================================================================================
REFERENCE:
#!/usr/bin/env python
 
import cgi
 
#Get form data
form = cgi.FieldStorage()
 
name = form.getvalue('name')
age = form.getvalue('age')

# Display the results
print "Content-type: text/html"
print
print "<html>"
print "<body>"
print "<p>Hi, %s! You are %s years old.</p>" % (name, age)
print "</body>"
print "</html>"

PREDICTION:


### Solution:
```
import cgi
import cgi_util

form = cgi.FieldStorage()

print("Content-type: text/html")
print()

print("<html>")
print("<head>")
print("<title>Form Processing</title>")
print("</head>")
print("<body>")
print("<p>You entered:</p>")
print("<ul>")
for field in form:
    print("<li>%s: %s</li>" % (field, form[field].value))
print("</ul>")
print("</body>")
print("</html>")
```
====================================================================================================
REFERENCE:
from textblob import TextBlob

def sentiment_classifier(sentence):
  sentiment_score = TextBlob(sentence).sentiment.polarity
  if sentiment_score > 0:
    return 'positive'
  elif sentiment_score < 0:
    return 'negative'
  else:
    return 'neutral'

PREDICTION:


### Task 2:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 3:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 4:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 5:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 6:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 7:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 8:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 9:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 10:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 11:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 12:
Develop a program in
====================================================================================================
REFERENCE:
def is_divisible_by_5(number):
    if (number % 5 == 0):
        return True
    else:
        return False
    
number = 10
is_divisible_by_5(number)

PREDICTION:
 or 7.

### Solution:
```
def check_divisible(num):
    if num % 5 == 0 or num % 7 == 0:
        return True
    else:
        return False
```
====================================================================================================
REFERENCE:
import xml.etree.ElementTree as ET
 
# Read the XML file
tree = ET.parse('items.xml')
 
# Get the root element
root = tree.getroot()
 
# Iterate over each item
for item in root.findall('item'):
 # Get the title
 title = item.find('title').text
 # Get the description
 description = item.find('description').text
 
 print('Title: ', title)
 print('Description: ', description)

PREDICTION:


### Solution:
```
# Import the xml.etree.ElementTree module
import xml.etree.ElementTree as ET

# Create a dictionary to store the data
data = {}

# Parse the XML document
tree = ET.parse('books.xml')
root = tree.getroot()

# Iterate through the items in the document
for item in root.findall('item'):
    # Extract the title and description for each item
    title = item.find('title').text
    description = item.find('description').text
    # Add the title and description to the dictionary
    data[title] = description

# Print the dictionary
print(data)
```
====================================================================================================
REFERENCE:
import requests
from bs4 import BeautifulSoup

url = "https://www.example.com"

page = requests.get(url)

soup = BeautifulSoup(page.content, 'html.parser')

text = soup.find_all(text=True)

for t in text:
    print(t.strip())

PREDICTION:
.

### Solution:
```
import requests
from bs4 import BeautifulSoup

url = 'https://www.python.org/'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')
text = soup.get_text()
print(text)
```
====================================================================================================
REFERENCE:
import difflib

def plagiarism_detector(string_a, string_b):
    sequence = difflib.SequenceMatcher(None, string_a, string_b)
    similarity = sequence.ratio() * 100
    print('Similarity = {:.2f}%'.format(similarity))

plagiarism_detector('The quick brown fox', 'The quick brown fox jumps over the lazy dog')

PREDICTION:


### Project Description

The project is a system in Python for detecting plagiarism. The system is based on the idea of using a neural network to classify text. The neural network is trained on a dataset of plagiarized and non-plagiarized texts. The system is then used to classify new texts.

### Project Files

* `plagiarism_detector.py` - the main Python script
* `README.md` - this file
* `requirements.txt` - the list of Python packages required to run the script
* `data` - the directory containing the dataset used to train the neural network
* `models` - the directory containing the trained neural network

### How to Run the Project

1. Install Python 3.7 or later.
2. Install the required Python packages:
```
pip install -r requirements.txt
```
3. Run the script:
```
python plagiarism_detector.py
```

### Project Results

The system is able to detect plagiarism in the following texts:

* `text1.txt` -
====================================================================================================
REFERENCE:
def generate_table(num):
    # print the table heading
    print("MULTIPLICATION TABLE FOR {}".format(num))
    # generate the table
    for i in range(1, 11):
        print("{} x {} = {}".format(num, i, num*i))

# generate table for 9
generate_table(9)

PREDICTION:


### Solution:
```
def multiplication_table(n):
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            print(f"{i} x {j} = {i * j}")
```
====================================================================================================
REFERENCE:
def print_distinct(lst):
    seen = set()
    distinct = []
    for x in lst:
        if x not in seen:
            distinct.append(x)
            seen.add(x)
    print(distinct)

PREDICTION:


### Solution:
```
def print_distinct_elements(arr):
    for i in set(arr):
        print(i)
```
====================================================================================================
REFERENCE:
# Python program to check whether the number is prime or not

def is_prime(num):
    """ Function to check whether the number is prime or not """

    # Check whether the given number is greater than 1 
    if num > 1:
        # Iterate through the range of numbers to check if any number is a multiple of the given number
        for i in range(2,num):
            # If there is any multiple, the number is not prime
            if (num % i) == 0:
                return False
        # If there are no multiples, the number is prime 
        else:
            return True

# Call the function 
num = 97
print(is_prime(num))

# Output:
# True

PREDICTION:


### Solution:
```
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True
```
====================================================================================================
REFERENCE:
def is_present(arr, number):
    for i in range(len(arr)):
        if arr[i] == number:
            return True
    return False

PREDICTION:


### Solution:
```
def is_number_in_array(array, number):
    return number in array
```
====================================================================================================
REFERENCE:
# import the required libraries
import requests
import time

# enter the website url
url = "https://example.com/"

# make the initial request to get the initial html content
initial_content = requests.get(url).text

# loop for ever
while True: 
    
    # every 5 seconds, make a new request
    time.sleep(5)

    # make the new request
    current_content = requests.get(url).text
    
    # compare the new content with the initial content
    if current_content != initial_content:
        # update the initial content
        initial_content = current_content
        # print the message
        print("The content of the page has changed")

PREDICTION:


### Solution:
```
import requests

def check_webpage_changes(url):
    """Checks if a web page changes its content."""
    response = requests.get(url)
    if response.text != response.content:
        print("The web page has changed its content.")
    else:
        print("The web page has not changed its content.")

check_webpage_changes("https://www.python.org/")
```
====================================================================================================
REFERENCE:
def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1 
    else:
        return fibonacci(n-1) + fibonacci(n-2)

PREDICTION:


### Solution:
```
def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)
```
====================================================================================================
REFERENCE:
# Sort an array with m different types of elements
def sort_array(arr):
    # Get the number of different types of elements 
    m = len(set(arr)) 
    n = len(arr) 
  
    # Create an output array of size n
    output = [0] * (n) 
   
    # Store count of individual numbers in 
    # count array 
    count = [0] * (m) 
    for i in range(0, n): 
        count[arr[i]] += 1
   
    # finding cummulative count 
    for i in range(1, m): 
        count[i] += count[i - 1] 
  
    # Inserting values in sorted array
    for i in range(n - 1, -1, -1): 
        output[count[arr[i]] - 1] = arr[i] 
        count[arr[i]] -= 1
   
    return output 

# Driver Code 
arr = [2, 1, 1, 3, 6, 4, 5, 5]
sorted_arr = sort_array(arr) 
  
# Printing the sorted array 
print(*sorted_arr)

PREDICTION:


### Solution:
```
def sort_array(arr):
    arr.sort()
    return arr
```
====================================================================================================
REFERENCE:
# Input two numbers
a = 10
b = 5

# Swapping using bitwise operator
a = a ^ b 
b = a ^ b 
a = a ^ b 

# Printing output
print("a =", a) 
print("b =", b)

PREDICTION:


### Solution:
```
def swap(a, b):
    a, b = b, a
    return a, b
```
====================================================================================================
REFERENCE:
def insertion_sort(arr):
    for i in range(1, len(arr)): 
        key = arr[i] 
        j = i-1
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key 

arr = [9, 8, 7, 6, 5, 4, 3, 2, 1]
insertion_sort(arr)

PREDICTION:
.

### TASK:
Write a Python program to implement a given sorting algorithm.

### Solution:
```
def selection_sort(arr):
    for i in range(len(arr)):
        min_idx = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    return arr
```
====================================================================================================
CodeBert Scores = {'avg_precision': 0.8190996646881104, 'avg_recall': 0.7882862687110901, 'avg_f1_score': 0.801009476184845, 'avg_f3_score': 0.7903977632522583}
====================================================================================================

REFERENCE:
def longest_common_substring(s1, s2):
    s1_length = len(s1)
    s2_length = len(s2)
  
    matrix = [[0] * (s2_length + 1) for _ in range(s1_length + 1)]
    longest, x_longest = 0, 0
    for x in range(1, s1_length + 1):
        for y in range(1, s2_length + 1):
            if s1[x - 1] == s2[y - 1]:
                matrix[x][y] = matrix[x - 1][y - 1] + 1
                if matrix[x][y] > longest:
                    longest = matrix[x][y]
                    x_longest = x
            else:
                matrix[x][y] = 0
    return s1[x_longest - longest: x_longest]

longest_common_substring(string1, string2) 
# output: 'Hello'

PREDICTION:


### Solution:
```
def longest_common_substring(str1, str2):
    # Create a dictionary to store the longest common substring
    # for each substring in str1
    longest_common_substring_dict = {}
    # Iterate through each substring in str1
    for substring in str1:
        # Check if the substring is in str2
        if substring in str2:
            # Check if the substring is already in the dictionary
            if substring in longest_common_substring_dict:
                # If it is, update the longest common substring
                longest_common_substring_dict[substring] = max(longest_common_substring_dict[substring], substring)
            else:
                # If it is not, add it to the dictionary
                longest_common_substring_dict[substring] = substring
    # Return the longest common substring
    return max(longest_common_substring_dict.values())
```
====================================================================================================
REFERENCE:
def find_most_frequent(lst):
    max_count = 0
    most_frequent = None
    count_dict = {}
    for elem in lst:
        if elem not in count_dict:
            count_dict[elem] = 1
        else:
            count_dict[elem] += 1
            
        if count_dict[elem] > max_count:
            most_frequent = elem
            max_count = count_dict[elem]
            
    return most_frequent, max_count

PREDICTION:


I have a python list like this:

\begin{code}
my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61
====================================================================================================
REFERENCE:
import sys
  
def size_of_object(obj): 
    return (sys.getsizeof(obj)) 
  
object1 = 10
print(size_of_object(object1))

PREDICTION:


### Solution:
```
def find_size(obj):
    if isinstance(obj, dict):
        return sum(find_size(v) for v in obj.values())
    elif isinstance(obj, list):
        return sum(find_size(v) for v in obj)
    else:
        return sys.getsizeof(obj)
```
====================================================================================================
REFERENCE:
# Generate pseudo-random numbers in Python

import random

# Generate a pseudo-random number between 0 and 1
num = random.random()
print("Pseudo-random number between 0 and 1: ", num)

# Generate pseudo-random numbers from a discrete set
num = random.choice([1, 2, 3, 4, 5])
print("Pseudo-random number from a discrete set: ", num)

PREDICTION:


### Solution:
```
import random

# Generate a random number between 0 and 100
random_number = random.randint(0, 100)
print(random_number)

# Generate a random number between 0 and 100
random_number = random.randint(0, 100)
print(random_number)

# Generate a random number between 0 and 100
random_number = random.randint(0, 100)
print(random_number)
```
====================================================================================================
REFERENCE:
def split_list(lst, size):
    part1 = lst[:size]
    part2 = lst[size:]
    return part1, part2

# example
my_list = [1, 2, 3, 4, 5, 6, 7]
part1, part2 = split_list(my_list, 3)
print(part1) # [1, 2, 3]
print(part2) # [4, 5, 6, 7]

PREDICTION:


### Solution:
```
def split_list(lst, n):
    return lst[:n], lst[n:]
```
====================================================================================================
REFERENCE:
def filter_words_with_a(words):
 return [word for word in words if "a" in word]

PREDICTION:


# Solution
```
def filter_a(words):
    return [word for word in words if 'a' in word]
```
====================================================================================================
REFERENCE:
def print_dict(dict):
 for key in dict:
   print(key,":", dict[key])

PREDICTION:


### Solution:
```
def print_dict(d):
    for key, value in d.items():
        print(key, value)
```
====================================================================================================
REFERENCE:
class Node: 
  
    # Constructor to create a new binary node 
    def __init__(self, data):
        self.data = data  
        self.left = None
        self.right = None

def inorder(root): 
    if root: 
        # First recur on left child 
        inorder(root.left) 
  
        # then print the data of node 
        print(root.data)
  
        # now recur on right child 
        inorder(root.right) 
  

# Driver program to test the above function 
root = Node(1) 
root.left      = Node(2) 
root.right     = Node(3) 
root.left.left  = Node(4) 
root.left.right  = Node(5) 
  
inorder(root)

PREDICTION:


### Solution:
```
def inorder(root):
  if root:
    inorder(root.left)
    print(root.val)
    inorder(root.right)
```
====================================================================================================
REFERENCE:
def sumEvensInRange(arr, lower, upper):
    evens_sum = 0
    for num in arr:
        if num >= lower and num <= upper and num % 2 == 0:
            evens_sum += num
    return evens_sum

PREDICTION:


### Solution:
```
def sum_even(arr, start, end):
    return sum(arr[start:end+1][::2])
```
====================================================================================================
REFERENCE:
def calc_sum(sequence):
 sum = 0
 for num in sequence:
 sum += num
 return sum

def calc_sum_squares(sequence):
 sum = 0
 for num in sequence:
  if num % 2 == 1:
   sum += num * num
 return sum

sequence = [2, 4, 5, 6, 7]
total_sum = calc_sum(sequence)
sum_squares = calc_sum_squares(sequence)

print("Total sum:", total_sum)
print("Sum of squares of odd numbers:", sum_squares)

PREDICTION:


### Solution:
```
def sum_of_odd_squares(seq):
    sum_of_odd_squares = 0
    for i in seq:
        if i % 2 != 0:
            sum_of_odd_squares += i ** 2
    return sum_of_odd_squares
```
====================================================================================================
REFERENCE:
x = 3
result = 2*(x**2) + 5*x + 3

print(result)

# Outputs: 34

PREDICTION:


### Solution:
```
def calculate_expression(x):
    return 2 * x ** 2 + 5 * x + 3

print(calculate_expression(3))
```
====================================================================================================
REFERENCE:
last_element = [1, 8, 3, 10, 5][-1]

PREDICTION:
.

### Solution:
```
print(list[-1])
```
====================================================================================================
REFERENCE:
import random 
import string

def generatePassword(length):

    password_characters = string.ascii_letters + string.digits + string.punctuation

    password = ''.join(random.choice(password_characters) 
                       for i in range(length))
    lowercase = [a for a in password if a.islower()]
    uppercase = [b for b in password if b.isupper()]
    number = [c for c in password if c.isdigit()]
    special_character = [d for d in password if not d.isalnum()]

    if len(lowercase) == 0 or len(uppercase) == 0 or len(number) == 0 or len(special_character) == 0 :
        return generatePassword(length)
    else:
        return password

print(generatePassword(8))

PREDICTION:


```python
import string
import random

def generate_password():
    password = ''
    for i in range(8):
        password += random.choice(string.ascii_letters + string.digits + string.punctuation)
    return password

print(generate_password())
```

### References

- [Generate a random password in Python](https://www.geeksforgeeks.org/generate-a-random-password-in-python/)
- [Python string module](https://docs.python.org/3/library/string.html)
- [Python random module](https://docs.python.org/3/library/random.html)
- [Python ascii_letters](https://docs.python.org/3/library/string.html#string.ascii_letters)
- [Python digits](https://docs.python.org/3/library/string.html#string.digits)
- [Python punctuation](https://docs.python.org/3/library/string.html#string.punctuation)
- [Python random
====================================================================================================
REFERENCE:
import pandas as pd
from sklearn.linear_model import LinearRegression

data = pd.read_csv('house_price-data.csv')

X = data[['size']]
y = data['price']

model = LinearRegression()
model.fit(X, y)

PREDICTION:


### Data

The data is from the [Kaggle House Prices dataset](https://www.kaggle.com/c/house-prices-advanced-regression-techniques).

### Solution

1. Import the libraries.
```python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
```

2. Load the data.
```python
data = pd.read_csv('train.csv')
```

3. Split the data into training and testing sets.
```python
X_train, X_test, y_train, y_test = train_test_split(data['sqft_living'], data['price'], test_size=0.2, random_state=0)
```

4. Create a linear regression model.
```python
model = LinearRegression()
```

5. Train the model.

====================================================================================================
REFERENCE:
def filter_prime_numbers(l):
    result = []
    for num in l:
        if is_prime(num):
            result.append(num)
    return result

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

PREDICTION:


### Solution:
```
def filter_primes(numbers):
    primes = []
    for number in numbers:
        if is_prime(number):
            primes.append(number)
    return primes

def is_prime(number):
    for divisor in range(2, number):
        if number % divisor == 0:
            return False
    return True
```
====================================================================================================
REFERENCE:
import ast

tree = ast.parse(expression)

PREDICTION:


### Usage

```python
from pytree import parse

tree = parse('x + y')
```

### Output

```python
[
    {
        'type': 'Add',
        'children': [
            {
                'type': 'Name',
                'children': [],
                'value': 'x'
            },
            {
                'type': 'Name',
                'children': [],
                'value': 'y'
            }
        ]
    }
]
```

### Features

- Supports Python 3.6+
- Supports Python expressions with multiple statements
- Supports Python expressions with multiple levels of indentation
- Supports Python expressions with multiple levels of indentation and multiple statements
- Supports Python expressions with multiple levels of indentation, multiple statements, and multiple lines
- Supports Python expressions with multiple levels of indentation, multiple statements, multiple lines, and multiple lines of comments
- Supports Python expressions with multiple levels of indentation, multiple statements, multiple lines, multiple lines of comments, and multiple lines of comments
- Supports Python expressions with multiple
====================================================================================================
REFERENCE:
def round_up(f):
    if f - int(f) >= 0.5:
        return int(f) + 1
    return int(f)

round_val = round_up(3.14)
print(round_val)

PREDICTION:


### Solution:
```
def round_up(num):
    return int(num + 0.5)
```
====================================================================================================
REFERENCE:
"""
Create a program to assess whether or not a movie genre is representing violent behaviour
"""

import nltk
from nltk.tokenize import word_tokenize

def classify_movie(review):
    # Tokenize review
    tokens = word_tokenize(review)

    # Check for violent words in the review
    violent_words = ['violence', 'violent', 'killing', 'fight', 'bloody', 'war']

    for token in tokens:
        if token in violent_words:
            return 'Yes'

    return 'No'

if __name__ == '__main__':
    review = 'The movie is full of thrilling action scenes and lots of violence.'
    result = classify_movie(review)
    print(result)

PREDICTION:


### Solution:
```
def is_violent(review):
    return "violent" in review.lower()
```
====================================================================================================
REFERENCE:
import sqlite3

class DataAccess(object):
 
 def __init__(self, db_name):
 self.conn = sqlite3.connect(db_name)
 self.cur = self.conn.cursor()
 
 def save_data(self, table, id, name):
 self.cur.execute(f"INSERT INTO {table} VALUES (?, ?)", (id, name))
 self.conn.commit()
 
 def read_data(self, table, id):
 self.cur.execute(f"SELECT * FROM {table} WHERE id = ?", (id,))
 return self.cur.fetchone()
 
 def close_connection(self):
 self.conn.close()

UserDAO = DataAccess('my_db.db')

PREDICTION:


### Solution:
```
class Database:
    def __init__(self, data):
        self.data = data

    def get(self, key):
        return self.data[key]

    def set(self, key, value):
        self.data[key] = value
```
====================================================================================================
REFERENCE:
class SomeClass:

    def __init__(self, field1, field2):
        self.field1 = field1
        self.field2 = field2

PREDICTION:


### Solution:
```
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
```
====================================================================================================
REFERENCE:
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

person = Person("John", 25)

PREDICTION:


### Solution
```
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
```
====================================================================================================
REFERENCE:
def filter_list(strings):
    unique_strings = []
    for string in strings:
        if string not in unique_strings:
            unique_strings.append(string)
    return unique_strings

strings = ["abc", "def", "abc", "ghi", "jkl", "mno", "abc", "pqr"]
filtered_strings = filter_list(strings)
print(filtered_strings)

# Output: ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']

PREDICTION:


### Solution:
```
def unique_elements(lst):
    return list(set(lst))
```
====================================================================================================
REFERENCE:
def reverse_array(arr): 
      
    # Initialize start and end index 
        start = 0
        end = len(arr) - 1
  
    # Loop over the array 
    while start < end: 
  
        # Swap the elements at start and end 
        arr[start], arr[end] = arr[end], arr[start]  
          
        # Update start and end index 
        start += 1
        end -= 1
  
# Driver code 
arr = [1, 2, 3] 
  
reverse_array(arr) 
  
# Print our modified array   
print(arr)

PREDICTION:


### Solution:
```
def reverse_array(arr):
    for i in range(len(arr)//2):
        arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]
    return arr
```
====================================================================================================
REFERENCE:
import string
import random

def generateRandomString():
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for _ in range(10))
    
if __name__ == '__main__':
    print(generateRandomString())

PREDICTION:
.

### Solution:
```
import random

def generate_random_string():
    return ''.join(random.choices(string.ascii_letters, k=10))
```
====================================================================================================
REFERENCE:
for i in range(2, 11):
    print(i)

PREDICTION:


### Solution:
```
for i in range(2, 11):
    print(i)
```
====================================================================================================
REFERENCE:
def print_divisible_by_three(n):
  for num in range(n+1):
    if num % 3 == 0:
      print(num, end=" ")

print_divisible_by_three(10)

PREDICTION:


### Solution:
```
def print_numbers_divisible_by_3(n):
    for i in range(n + 1):
        if i % 3 == 0:
            print(i)
```
====================================================================================================
REFERENCE:
import string

def search(docs, key):
 results = []
 for doc in docs:
 words = doc.lower().translate(str.maketrans('', '', string.punctuation)).split()
 if key in words:
 results.append(doc)
 return results

PREDICTION:


### Solution:
```
def search(keyword, documents):
    results = []
    for document in documents:
        if keyword in document:
            results.append(document)
    return results
```
====================================================================================================
REFERENCE:
def filter_list(arr):
    filtered_list = []
    for num in arr:
        if num % 3 != 0:
            filtered_list.append(num)
    return filtered_list

print(filter_list([2, 3, 4, 5, 6, 7, 8, 9]))

PREDICTION:

Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design a program in Python to filter the elements from a list which are not divisible by 3.
Design
====================================================================================================
REFERENCE:
def countOccurences(str, char):
    count = 0
    for ch in str:
        if ch == char:
            count += 1
    return count

print(countOccurences('abcdefg', 'a'))

PREDICTION:


### Solution:
```
def count_char(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count
```
====================================================================================================
REFERENCE:
def countPrimes(num): 
    if num <= 1:  
        return 0
 
    primes = [2] 
    x = 3
    
    while x <= num: 
        for y in primes: 
            if x % y == 0: 
                x += 2
                continue
        primes.append(x) 
        x += 2
    
    return len(primes) 

num_primes = countPrimes(100)
print("Number of primes between 1 and 100:", num_primes)

PREDICTION:


### Solution:
```
def prime_numbers(n):
    prime_numbers = []
    for i in range(2, n + 1):
        if all(i % j != 0 for j in range(2, i)):
            prime_numbers.append(i)
    return prime_numbers
```
====================================================================================================
REFERENCE:
import hashlib 
  
def encrypt_string(string, password):
    md5_string = hashlib.md5(string.encode()).hexdigest()
    password_string = hashlib.md5(password.encode()).hexdigest()
    result = ""

    for i in range(32):
        result += md5_string[i] + password_string[i]
    return result

string = "Hello World!"
password = "password"

result = encrypt_string(string, password)
print(result)

PREDICTION:


### Solution:
```
def encrypt(string, password):
    encrypted_string = ""
    for char in string:
        encrypted_string += chr(ord(char) + ord(password))
    return encrypted_string
```
====================================================================================================
REFERENCE:
def fibonacci(n):
  if n<0:
    print("Incorrect input")
  elif n==1:
    return 0
  elif n==2:
    return 1
  else:
    return fibonacci(n-1)+fibonacci(n-2)
print("Fibonacci series up to",n,":")
for i in range(1,n+1):
  print(fibonacci(i))

PREDICTION:


### Solution:
```
def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)
```
====================================================================================================
REFERENCE:
class File:
    """A simple file class"""
    def __init__(self, name, size, type):
        self.name = name
        self.size = size
        self.type = type

    def get_name(self):
        return self.name

    def get_size(self):
        return self.size

    def get_type(self):
        return self.type

PREDICTION:


### Solution:
```
class Student:
    def __init__(self, name, age, grade):
        self.name = name
        self.age = age
        self.grade = grade

    def get_name(self):
        return self.name

    def get_age(self):
        return self.age

    def get_grade(self):
        return self.grade

    def get_average_grade(self):
        return self.grade / self.age

student = Student("John", 15, 5)
print(student.get_name())
print(student.get_age())
print(student.get_grade())
print(student.get_average_grade())
```
====================================================================================================
REFERENCE:
import requests
from bs4 import BeautifulSoup

# Specify the URL
url = 'website.com'

# Get the response
response = requests.get(url)

# Parse the response
soup = BeautifulSoup(response.text, 'html.parser')

# Extract all the articles on the front page
articles = soup.find_all('article', class_='front-page-article')

# Iterate through each article and print its text
for article in articles:
 print(article.find('h2').text)

PREDICTION:


### Solution:
```
# Import the requests library
import requests

# Define the function
def web_scraper(url):
    # Make a GET request to the given URL
    response = requests.get(url)
    # Parse the HTML content
    html_content = response.content
    # Return the HTML content
    return html_content

# Call the function
html_content = web_scraper('https://www.python.org/')
# Print the HTML content
print(html_content)
```
====================================================================================================
REFERENCE:
import uuid
 
# generate a GUID
guid = str(uuid.uuid4())
 
# print the GUID
print(guid)

// Output: 3c112f3d-3c68-4b4c-a85d-672622be9f25

PREDICTION:


### Solution:
```
import uuid
print(uuid.uuid4())
```
====================================================================================================
REFERENCE:
def calculateSum(arr):
 sums = [0] * len(arr[0])
 for r in arr:
  for i in range(len(r)):
   sums[i] += r[i]
 return sums

def getRowsSum(arr):
 rowSums = []
 for r in arr:
  rowSums.append(sum(r))
 return rowSums

arr = [[2, 3, 5], 
 [5, 7, 1], 
 [4, 6, 9]]

columnSums = calculateSum(arr)
rowSums = getRowsSum(arr)

print("Row sums:", rowSums)
print("Column sums:", columnSums)

# Output: Row sums: [10, 13, 15] Column sums: [11, 16, 15]

PREDICTION:


### Solution:
```
def sum_rows_cols(arr):
    row_sums = []
    col_sums = []
    for row in arr:
        row_sums.append(sum(row))
    for col in zip(*arr):
        col_sums.append(sum(col))
    return row_sums, col_sums
```
====================================================================================================
REFERENCE:
def usd_to_euro(amount):
  euro = amount * 0.9
  print(amount, "USD is equal to", euro, "Euros.")
  
usd_to_euro(12.5)

PREDICTION:


### Solution:
```
def usd_to_euro(usd):
    euro = usd * 0.88
    print(euro)
```
====================================================================================================
REFERENCE:
def search_replace(sentence, target, replacement):
    words = sentence.split(" ")

    for i in range(len(words)):
        if words[i] == target:
            words[i] = replacement
    
    return " ".join(words)

sentence = "The quick brown fox jumps over the lazy dog"
print(search_replace(sentence, "quick", "slow")) # "The slow brown fox jumps over the lazy dog"

PREDICTION:


### Solution:
```
def search_and_replace(sentence, search_word, replace_word):
    return sentence.replace(search_word, replace_word)
```
====================================================================================================
REFERENCE:
def reverseSentence(sentence): 
    words = sentence.split(' ') 
  
    newWords = [word[::-1] for word in words] 
      
    newSentence = ' '.join(newWords) 
      
    return newSentence 
  
sentence = input("Enter a sentence: ")
print(reverseSentence(sentence))

PREDICTION:


### Solution:
```
# Solution:
sentence = input("Enter a sentence: ")
print(sentence[::-1])
```
====================================================================================================
REFERENCE:
# Solution
# First, let's define our list of numbers
my_list = [1, 2, 3]

# Now, let's define a function to generate all permutations
def allPermutations(my_list):
 if len(my_list) == 0:
  return []
 if len(my_list) == 1:
  return [my_list]
 permutations = []
 for i in range(len(my_list)):
  m = my_list[i]
  remaining_list = my_list[:i] + my_list[i+1:]
  for p in allPermutations(remaining_list):
   permutations.append([m] + p)
 return permutations

# Finally, we can call the function and print out the result
print(allPermutations(my_list))

PREDICTION:


### Solution:
```
def permutations(lst):
    if len(lst) == 1:
        return [lst]
    else:
        return [x + [i] for x in permutations(lst[1:]) for i in lst[0]]
```
====================================================================================================
REFERENCE:
def lcm(a, b): 
    lcm = (a*b)//gcd(a,b) 
    return lcm

PREDICTION:


### Solution:
```
def lcm(a, b):
    return a * b // gcd(a, b)
```
====================================================================================================
REFERENCE:
def bubbleSort(list): 
	n = len(list) 
	for i in range(n): 
		for j in range(0, n-i-1): 
			if list[j] > list[j+1] : 
				list[j], list[j+1] = list[j+1], list[j] 
	return list

print(bubbleSort([8,2,11,9,20,7]))

PREDICTION:
.

### Solution:
```
def bubble_sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr
```
====================================================================================================
REFERENCE:
import unittest
from flask_testing import TestCase
from app import db, Task

class TestModel(TestCase):
 def create_app(self):
 return app

 def setUp(self):
 db.create_all()
 self.task = Task(description='Description')
 db.session.add(self.task)
 db.session.commit()

 def tearDown(self):
 db.session.remove()
 db.drop_all()

class TestTask(TestModel):
 def test_task_creation(self):
 self.assertEqual('Description', self.task.description)

if __name__ == '__main__':
 unittest.main()

PREDICTION:


### Instructions:

1. Create a Python script named `test_models.py` in the `tests` directory.

2. Import the `unittest` module.

3. Create a class named `TestModels` that inherits from the `unittest.TestCase` class.

4. Create a test method named `test_create_user` that will test the `create_user` function.

5. Create a test method named `test_create_question` that will test the `create_question` function.

6. Create a test method named `test_create_answer` that will test the `create_answer` function.

7. Create a test method named `test_create_question_answer` that will test the `create_question_answer` function.

8. Create a test method named `test_get_question` that will test the `get_question` function.

9. Create a test method named `test_get_answer` that will test the `get_answer` function.

10. Create a test method named `test_get_question_answer` that will
====================================================================================================
REFERENCE:
def filter_A_columns(df): 
    col_list = [col for col in df.columns if col[0] == 'A']
    return df[col_list]

PREDICTION:


### Solution:
```
def get_columns_starting_with_A(df):
    return df[df.columns[df.columns.str.startswith('A')]]
```
====================================================================================================
REFERENCE:
arr.sort() 
print(arr)

PREDICTION:


### Solution:
```
def sort_array(arr):
    arr.sort()
    return arr
```
====================================================================================================
REFERENCE:
#!/usr/bin/env python
 
import cgi
 
#Get form data
form = cgi.FieldStorage()
 
name = form.getvalue('name')
age = form.getvalue('age')

# Display the results
print "Content-type: text/html"
print
print "<html>"
print "<body>"
print "<p>Hi, %s! You are %s years old.</p>" % (name, age)
print "</body>"
print "</html>"

PREDICTION:


### Solution:
```
import cgi
import cgi_util

form = cgi.FieldStorage()

print("Content-type: text/html")
print()

print("<html>")
print("<head>")
print("<title>Form Processing</title>")
print("</head>")
print("<body>")
print("<p>You entered:</p>")
print("<ul>")
for field in form:
    print("<li>%s: %s</li>" % (field, form[field].value))
print("</ul>")
print("</body>")
print("</html>")
```
====================================================================================================
REFERENCE:
from textblob import TextBlob

def sentiment_classifier(sentence):
  sentiment_score = TextBlob(sentence).sentiment.polarity
  if sentiment_score > 0:
    return 'positive'
  elif sentiment_score < 0:
    return 'negative'
  else:
    return 'neutral'

PREDICTION:


### Task 2:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 3:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 4:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 5:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 6:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 7:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 8:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 9:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 10:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 11:
Develop a program in Python to classify the sentiment of a given sentence.

### Task 12:
Develop a program in
====================================================================================================
REFERENCE:
def is_divisible_by_5(number):
    if (number % 5 == 0):
        return True
    else:
        return False
    
number = 10
is_divisible_by_5(number)

PREDICTION:
 or 7.

### Solution:
```
def check_divisible(num):
    if num % 5 == 0 or num % 7 == 0:
        return True
    else:
        return False
```
====================================================================================================
REFERENCE:
import xml.etree.ElementTree as ET
 
# Read the XML file
tree = ET.parse('items.xml')
 
# Get the root element
root = tree.getroot()
 
# Iterate over each item
for item in root.findall('item'):
 # Get the title
 title = item.find('title').text
 # Get the description
 description = item.find('description').text
 
 print('Title: ', title)
 print('Description: ', description)

PREDICTION:


### Solution:
```
# Import the xml.etree.ElementTree module
import xml.etree.ElementTree as ET

# Create a dictionary to store the data
data = {}

# Parse the XML document
tree = ET.parse('books.xml')
root = tree.getroot()

# Iterate through the items in the document
for item in root.findall('item'):
    # Extract the title and description for each item
    title = item.find('title').text
    description = item.find('description').text
    # Add the title and description to the dictionary
    data[title] = description

# Print the dictionary
print(data)
```
====================================================================================================
REFERENCE:
import requests
from bs4 import BeautifulSoup

url = "https://www.example.com"

page = requests.get(url)

soup = BeautifulSoup(page.content, 'html.parser')

text = soup.find_all(text=True)

for t in text:
    print(t.strip())

PREDICTION:
.

### Solution:
```
import requests
from bs4 import BeautifulSoup

url = 'https://www.python.org/'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')
text = soup.get_text()
print(text)
```
====================================================================================================
REFERENCE:
import difflib

def plagiarism_detector(string_a, string_b):
    sequence = difflib.SequenceMatcher(None, string_a, string_b)
    similarity = sequence.ratio() * 100
    print('Similarity = {:.2f}%'.format(similarity))

plagiarism_detector('The quick brown fox', 'The quick brown fox jumps over the lazy dog')

PREDICTION:


### Project Description

The project is a system in Python for detecting plagiarism. The system is based on the idea of using a neural network to classify text. The neural network is trained on a dataset of plagiarized and non-plagiarized texts. The system is then used to classify new texts.

### Project Files

* `plagiarism_detector.py` - the main Python script
* `README.md` - this file
* `requirements.txt` - the list of Python packages required to run the script
* `data` - the directory containing the dataset used to train the neural network
* `models` - the directory containing the trained neural network

### How to Run the Project

1. Install Python 3.7 or later.
2. Install the required Python packages:
```
pip install -r requirements.txt
```
3. Run the script:
```
python plagiarism_detector.py
```

### Project Results

The system is able to detect plagiarism in the following texts:

* `text1.txt` -
====================================================================================================
REFERENCE:
def generate_table(num):
    # print the table heading
    print("MULTIPLICATION TABLE FOR {}".format(num))
    # generate the table
    for i in range(1, 11):
        print("{} x {} = {}".format(num, i, num*i))

# generate table for 9
generate_table(9)

PREDICTION:


### Solution:
```
def multiplication_table(n):
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            print(f"{i} x {j} = {i * j}")
```
====================================================================================================
REFERENCE:
def print_distinct(lst):
    seen = set()
    distinct = []
    for x in lst:
        if x not in seen:
            distinct.append(x)
            seen.add(x)
    print(distinct)

PREDICTION:


### Solution:
```
def print_distinct_elements(arr):
    for i in set(arr):
        print(i)
```
====================================================================================================
REFERENCE:
# Python program to check whether the number is prime or not

def is_prime(num):
    """ Function to check whether the number is prime or not """

    # Check whether the given number is greater than 1 
    if num > 1:
        # Iterate through the range of numbers to check if any number is a multiple of the given number
        for i in range(2,num):
            # If there is any multiple, the number is not prime
            if (num % i) == 0:
                return False
        # If there are no multiples, the number is prime 
        else:
            return True

# Call the function 
num = 97
print(is_prime(num))

# Output:
# True

PREDICTION:


### Solution:
```
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True
```
====================================================================================================
REFERENCE:
def is_present(arr, number):
    for i in range(len(arr)):
        if arr[i] == number:
            return True
    return False

PREDICTION:


### Solution:
```
def is_number_in_array(array, number):
    return number in array
```
====================================================================================================
REFERENCE:
# import the required libraries
import requests
import time

# enter the website url
url = "https://example.com/"

# make the initial request to get the initial html content
initial_content = requests.get(url).text

# loop for ever
while True: 
    
    # every 5 seconds, make a new request
    time.sleep(5)

    # make the new request
    current_content = requests.get(url).text
    
    # compare the new content with the initial content
    if current_content != initial_content:
        # update the initial content
        initial_content = current_content
        # print the message
        print("The content of the page has changed")

PREDICTION:


### Solution:
```
import requests

def check_webpage_changes(url):
    """Checks if a web page changes its content."""
    response = requests.get(url)
    if response.text != response.content:
        print("The web page has changed its content.")
    else:
        print("The web page has not changed its content.")

check_webpage_changes("https://www.python.org/")
```
====================================================================================================
REFERENCE:
def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1 
    else:
        return fibonacci(n-1) + fibonacci(n-2)

PREDICTION:


### Solution:
```
def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)
```
====================================================================================================
REFERENCE:
# Sort an array with m different types of elements
def sort_array(arr):
    # Get the number of different types of elements 
    m = len(set(arr)) 
    n = len(arr) 
  
    # Create an output array of size n
    output = [0] * (n) 
   
    # Store count of individual numbers in 
    # count array 
    count = [0] * (m) 
    for i in range(0, n): 
        count[arr[i]] += 1
   
    # finding cummulative count 
    for i in range(1, m): 
        count[i] += count[i - 1] 
  
    # Inserting values in sorted array
    for i in range(n - 1, -1, -1): 
        output[count[arr[i]] - 1] = arr[i] 
        count[arr[i]] -= 1
   
    return output 

# Driver Code 
arr = [2, 1, 1, 3, 6, 4, 5, 5]
sorted_arr = sort_array(arr) 
  
# Printing the sorted array 
print(*sorted_arr)

PREDICTION:


### Solution:
```
def sort_array(arr):
    arr.sort()
    return arr
```
====================================================================================================
REFERENCE:
# Input two numbers
a = 10
b = 5

# Swapping using bitwise operator
a = a ^ b 
b = a ^ b 
a = a ^ b 

# Printing output
print("a =", a) 
print("b =", b)

PREDICTION:


### Solution:
```
def swap(a, b):
    a, b = b, a
    return a, b
```
====================================================================================================
REFERENCE:
def insertion_sort(arr):
    for i in range(1, len(arr)): 
        key = arr[i] 
        j = i-1
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key 

arr = [9, 8, 7, 6, 5, 4, 3, 2, 1]
insertion_sort(arr)

PREDICTION:
.

### TASK:
Write a Python program to implement a given sorting algorithm.

### Solution:
```
def selection_sort(arr):
    for i in range(len(arr)):
        min_idx = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    return arr
```
====================================================================================================
