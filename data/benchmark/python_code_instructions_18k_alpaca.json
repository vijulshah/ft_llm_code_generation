[
    {
        "instruction": "Write a Python code to check if a given list contains all unique elements.",
        "output": "def is_unique_list (numbers):\n    return len(numbers) == len(set(numbers))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python code to check if a given list contains all unique elements.\n\n### Solution:\n```\ndef is_unique_list (numbers):\n    return len(numbers) == len(set(numbers))\n```"
    },
    {
        "instruction": "Create a Python function that takes a given list of strings, and returns a dictionary of all the words paired with how many times they appear in the list.",
        "output": "def word_count(text_list):\n    result = {}\n    for word in text_list:\n        if word in result.keys():\n            result[word] += 1\n        else:\n            result[word] = 1\n    return result\n\ntext_list = ['a', 'b', 'a', 'a', 'c', 'b', 'd', 'a']\ncounts = word_count(text_list)\nprint(counts)  # Output: {'a': 4, 'b': 2, 'c': 1, 'd': 1}",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python function that takes a given list of strings, and returns a dictionary of all the words paired with how many times they appear in the list.\n\n### Solution:\n```\ndef word_count(text_list):\n    result = {}\n    for word in text_list:\n        if word in result.keys():\n            result[word] += 1\n        else:\n            result[word] = 1\n    return result\n\ntext_list = ['a', 'b', 'a', 'a', 'c', 'b', 'd', 'a']\ncounts = word_count(text_list)\nprint(counts)  # Output: {'a': 4, 'b': 2, 'c': 1, 'd': 1}\n```"
    },
    {
        "instruction": "Create a Python object that contains two attributes, \"Name\" and \"Age\".",
        "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nperson = Person(\"John\", 25)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python object that contains two attributes, \"Name\" and \"Age\".\n\n### Solution:\n```\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nperson = Person(\"John\", 25)\n```"
    },
    {
        "instruction": "Construct a Python program that checks if a string is a palindrome or not.",
        "output": "def is_palindrome(string):\n    left_pos = 0\n    right_pos = len(string) - 1\n\n    while right_pos >= left_pos:\n        if string[left_pos] != string[right_pos]:\n            return False\n        left_pos += 1\n        right_pos -= 1\n    return True",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConstruct a Python program that checks if a string is a palindrome or not.\n\n### Solution:\n```\ndef is_palindrome(string):\n    left_pos = 0\n    right_pos = len(string) - 1\n\n    while right_pos >= left_pos:\n        if string[left_pos] != string[right_pos]:\n            return False\n        left_pos += 1\n        right_pos -= 1\n    return True\n```"
    },
    {
        "instruction": "Construct a Python code segment that sorts a list of numbers in a non-decreasing order",
        "output": "# Bubble Sort\ndef bubble_sort(numbers): \n  \n    # Traverse through all array elements \n    for i in range(len(numbers)): \n  \n        # Last i elements are already in place \n        for j in range(0, len(numbers)-i-1): \n                # traverse the array from 0 to n-i-1 \n                # Swap if the element found is greater \n                # than the next element \n                if numbers[j] > numbers[j+1] : \n                    numbers[j], numbers[j+1] = numbers[j+1], numbers[j] \n  \nnumbers = [2, 9, 6, 4, 5]\nbubble_sort(numbers)\n\nprint (\"Sorted array is:\")\nfor i in range(len(numbers)): \n    print (\"%d\" %numbers[i]),",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConstruct a Python code segment that sorts a list of numbers in a non-decreasing order\n\n### Solution:\n```\n# Bubble Sort\ndef bubble_sort(numbers): \n  \n    # Traverse through all array elements \n    for i in range(len(numbers)): \n  \n        # Last i elements are already in place \n        for j in range(0, len(numbers)-i-1): \n                # traverse the array from 0 to n-i-1 \n                # Swap if the element found is greater \n                # than the next element \n                if numbers[j] > numbers[j+1] : \n                    numbers[j], numbers[j+1] = numbers[j+1], numbers[j] \n  \nnumbers = [2, 9, 6, 4, 5]\nbubble_sort(numbers)\n\nprint (\"Sorted array is:\")\nfor i in range(len(numbers)): \n    print (\"%d\" %numbers[i]),\n```"
    },
    {
        "instruction": "Create a Python method that accepts two strings as arguments and concatenates them.",
        "output": "def concatenate_strings(str1, str2):\n    return str1 + str2",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python method that accepts two strings as arguments and concatenates them.\n\n### Solution:\n```\ndef concatenate_strings(str1, str2):\n    return str1 + str2\n```"
    },
    {
        "instruction": "Design a Python code to extract the characters from from a given string in reverse order.",
        "output": "def reverseCharacters (string):\n    reverseStr = \"\"\n    for i in range(len(string)-1, -1, -1):\n        reverseStr += string[i]\n    return reverseStr",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a Python code to extract the characters from from a given string in reverse order.\n\n### Solution:\n```\ndef reverseCharacters (string):\n    reverseStr = \"\"\n    for i in range(len(string)-1, -1, -1):\n        reverseStr += string[i]\n    return reverseStr\n```"
    },
    {
        "instruction": "Write a python program to find the smallest element in an array.",
        "output": "def find_smallest(arr):\n    smallest = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < smallest:\n            smallest = arr[i]\n    return smallest",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a python program to find the smallest element in an array.\n\n### Solution:\n```\ndef find_smallest(arr):\n    smallest = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < smallest:\n            smallest = arr[i]\n    return smallest\n```"
    },
    {
        "instruction": "Create a program in Python that takes an array of integers and prints the first odd number from the left side.",
        "output": "def first_odd(arr):\n    for num in arr:\n        if num % 2 != 0:\n            print(num)\n            break\n\narr = [1, 4, 5, 6, 9, 10, 11]\nfirst_odd(arr)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a program in Python that takes an array of integers and prints the first odd number from the left side.\n\n### Solution:\n```\ndef first_odd(arr):\n    for num in arr:\n        if num % 2 != 0:\n            print(num)\n            break\n\narr = [1, 4, 5, 6, 9, 10, 11]\nfirst_odd(arr)\n```"
    },
    {
        "instruction": "Write a Python program that takes the items and the weights of a knapsack problem as input and returns the maximum value of items that can be fitted in the knapsack.",
        "output": "def knapsack(items, weights, max_weight):\n    n = len(items)\n    dp = [[0 for x in range(max_weight + 1)] for x in range(n + 1)] \n    \n    for i in range(1, n + 1): \n        for w in range(max_weight + 1): \n            if weights[i - 1] <= w: \n                dp[i][w] = max(items[i - 1] +  \n                               dp[i - 1][w - weights[i - 1]], \n                               dp[i - 1][w]) \n            else: \n                dp[i][w] = dp[i - 1][w] \n                      \n    value = dp[n][max_weight] \n                \n    return value\n\nitems = [\"hammer\", \"pliers\", \"screwdriver\"]\nweights = [4, 5, 2]\nmax_weight = 6\n\nvalue = knapsack(items, weights, max_weight)\nprint(\"The maximum value of items that can be fitted in the knapsack is:\", value)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program that takes the items and the weights of a knapsack problem as input and returns the maximum value of items that can be fitted in the knapsack.\n\n### Solution:\n```\ndef knapsack(items, weights, max_weight):\n    n = len(items)\n    dp = [[0 for x in range(max_weight + 1)] for x in range(n + 1)] \n    \n    for i in range(1, n + 1): \n        for w in range(max_weight + 1): \n            if weights[i - 1] <= w: \n                dp[i][w] = max(items[i - 1] +  \n                               dp[i - 1][w - weights[i - 1]], \n                               dp[i - 1][w]) \n            else: \n                dp[i][w] = dp[i - 1][w] \n                      \n    value = dp[n][max_weight] \n                \n    return value\n\nitems = [\"hammer\", \"pliers\", \"screwdriver\"]\nweights = [4, 5, 2]\nmax_weight = 6\n\nvalue = knapsack(items, weights, max_weight)\nprint(\"The maximum value of items that can be fitted in the knapsack is:\", value)\n```"
    },
    {
        "instruction": "Create a function in Python to print out all of the stuff in a given dictionary.",
        "output": "def print_dict(dict):\n for key in dict:\n   print(key,\":\", dict[key])",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a function in Python to print out all of the stuff in a given dictionary.\n\n### Solution:\n```\ndef print_dict(dict):\n for key in dict:\n   print(key,\":\", dict[key])\n```"
    },
    {
        "instruction": "Write a Python program to get the squares of the numbers up to a given number n.",
        "output": "def get_squares(n):\n    squares = []\n    for i in range(1, n + 1):\n        squares.append(i**2)\n    return squares\n\nresult = get_squares(10)\nprint(result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to get the squares of the numbers up to a given number n.\n\n### Solution:\n```\ndef get_squares(n):\n    squares = []\n    for i in range(1, n + 1):\n        squares.append(i**2)\n    return squares\n\nresult = get_squares(10)\nprint(result)\n```"
    },
    {
        "instruction": "Generate a Python function to perform sentiment analysis on a given text.",
        "output": "import nltk \nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_analysis(text): \n    analyzer = SentimentIntensityAnalyzer() \n    scores = analyzer.polarity_scores(text) \n    sentiment = None\n    if scores['compound'] > 0: \n        sentiment = 'positive'\n    elif scores['compound'] == 0: \n        sentiment = 'neutral'\n    else: \n        sentiment = 'negative'\n    return sentiment",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python function to perform sentiment analysis on a given text.\n\n### Solution:\n```\nimport nltk \nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_analysis(text): \n    analyzer = SentimentIntensityAnalyzer() \n    scores = analyzer.polarity_scores(text) \n    sentiment = None\n    if scores['compound'] > 0: \n        sentiment = 'positive'\n    elif scores['compound'] == 0: \n        sentiment = 'neutral'\n    else: \n        sentiment = 'negative'\n    return sentiment\n```"
    },
    {
        "instruction": "Write a Python code to convert the given number to hours, minutes and seconds.",
        "output": "my_number = 3600\n\ndef convert_to_time(number):\n    hours = number // 3600\n    minutes = (number % 3600) // 60\n    seconds = (number % 3600) % 60\n    return hours, minutes, seconds\n\nprint(convert_to_time(my_number))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python code to convert the given number to hours, minutes and seconds.\n\n### Solution:\n```\nmy_number = 3600\n\ndef convert_to_time(number):\n    hours = number // 3600\n    minutes = (number % 3600) // 60\n    seconds = (number % 3600) % 60\n    return hours, minutes, seconds\n\nprint(convert_to_time(my_number))\n```"
    },
    {
        "instruction": "Write a Python function to find two numbers in an array with the largest sum.",
        "output": "def max_sum(arr):\n    max_val = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            max_val = max(max_val, arr[i] + arr[j])\n    return max_val\n\nresult = max_sum([3, 10, -3, -2, 5])\nprint(result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python function to find two numbers in an array with the largest sum.\n\n### Solution:\n```\ndef max_sum(arr):\n    max_val = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            max_val = max(max_val, arr[i] + arr[j])\n    return max_val\n\nresult = max_sum([3, 10, -3, -2, 5])\nprint(result)\n```"
    },
    {
        "instruction": "Fix the code - It is a Python code for creating a web server.",
        "output": "import socket\n\nHOST, PORT = '', 8888\n\nlisten_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nlisten_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nlisten_socket.bind((HOST, PORT))\nlisten_socket.listen(1)\n\nprint('Serving HTTP on port %s ...' % PORT)\nwhile True:\n    client_connection, client_address = listen_socket.accept()\n    request = client_connection.recv(1024)\n    print(request)\n\n    http_response = \"\"\"\\\nHTTP/1.1 200 OK\n\nHello, World!\n\"\"\"\n    client_connection.sendall(http_response)\n    client_connection.close()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nFix the code - It is a Python code for creating a web server.\n\n### Solution:\n```\nimport socket\n\nHOST, PORT = '', 8888\n\nlisten_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nlisten_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nlisten_socket.bind((HOST, PORT))\nlisten_socket.listen(1)\n\nprint('Serving HTTP on port %s ...' % PORT)\nwhile True:\n    client_connection, client_address = listen_socket.accept()\n    request = client_connection.recv(1024)\n    print(request)\n\n    http_response = \"\"\"\\\nHTTP/1.1 200 OK\n\nHello, World!\n\"\"\"\n    client_connection.sendall(http_response)\n    client_connection.close()\n```"
    },
    {
        "instruction": "Create a Python program for sorting a list of words into alphabetical order.",
        "output": "def sort_words(words):\n  return sorted(words)\n\nwords = [\"dog\", \"cat\", \"apple\", \"banana\"]\n\nsorted_words = sort_words(words)\n\nprint(sorted_words)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program for sorting a list of words into alphabetical order.\n\n### Solution:\n```\ndef sort_words(words):\n  return sorted(words)\n\nwords = [\"dog\", \"cat\", \"apple\", \"banana\"]\n\nsorted_words = sort_words(words)\n\nprint(sorted_words)\n```"
    },
    {
        "instruction": "Generate a Python program to classify a given list of numbers using try and except block.",
        "output": "def classify_numbers(list_of_numbers):\n    for number in list_of_numbers:\n        try:\n            if number % 3 == 0:\n                print('Number {} is divisible by 3'.format(number))\n        except ZeroDivisionError:\n            print('Number {} cannot be divided by 3: division by zero bug'.format(number))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python program to classify a given list of numbers using try and except block.\n\n### Solution:\n```\ndef classify_numbers(list_of_numbers):\n    for number in list_of_numbers:\n        try:\n            if number % 3 == 0:\n                print('Number {} is divisible by 3'.format(number))\n        except ZeroDivisionError:\n            print('Number {} cannot be divided by 3: division by zero bug'.format(number))\n```"
    },
    {
        "instruction": "Create a Python program that takes a list of integers and prints out the total number of times that the number 7 appears in the list.",
        "output": "def count_7(nums):\n  count = 0\n  for num in nums:\n    if num == 7:\n      count += 1\n  return count",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program that takes a list of integers and prints out the total number of times that the number 7 appears in the list.\n\n### Solution:\n```\ndef count_7(nums):\n  count = 0\n  for num in nums:\n    if num == 7:\n      count += 1\n  return count\n```"
    },
    {
        "instruction": "Create a Python program to get input from the user via command line  and store it into a MySQL database.",
        "output": "import mysql.connector\n\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"username\",\n  passwd=\"password\",\n  database=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nname = input('Please enter your name: ')\ncountry = input('Please enter your country: ')\n\nsql = \"INSERT INTO customers (name, country) VALUES (%s, %s)\"\nval = (name, country)\n\nmycursor.execute(sql, val)\nmydb.commit()\n\nprint(mycursor.rowcount, \"record inserted.\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to get input from the user via command line  and store it into a MySQL database.\n\n### Solution:\n```\nimport mysql.connector\n\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"username\",\n  passwd=\"password\",\n  database=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nname = input('Please enter your name: ')\ncountry = input('Please enter your country: ')\n\nsql = \"INSERT INTO customers (name, country) VALUES (%s, %s)\"\nval = (name, country)\n\nmycursor.execute(sql, val)\nmydb.commit()\n\nprint(mycursor.rowcount, \"record inserted.\")\n```"
    },
    {
        "instruction": "Generate a Python script to connect to a PostgreSQL database.",
        "output": "import psycopg2\n\ntry:\n    conn = psycopg2.connect(\"dbname='testdb' user='user1' host='localhost' password='password'\")\nexcept:\n    print(\"Connection failed\")\n\ncur = conn.cursor()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python script to connect to a PostgreSQL database.\n\n### Solution:\n```\nimport psycopg2\n\ntry:\n    conn = psycopg2.connect(\"dbname='testdb' user='user1' host='localhost' password='password'\")\nexcept:\n    print(\"Connection failed\")\n\ncur = conn.cursor()\n```"
    },
    {
        "instruction": "Write a Python program to enter two integers as arguments and calculate the sum of them.",
        "output": "def calculate_sum(num1, num2):\n    sum = num1 + num2\n    return sum\n\nnum1 = int(input('Enter first number: '))\nnum2 = int(input('Enter second number: '))\n\nresult = calculate_sum(num1, num2)\nprint('The sum of the two numbers is:', result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to enter two integers as arguments and calculate the sum of them.\n\n### Solution:\n```\ndef calculate_sum(num1, num2):\n    sum = num1 + num2\n    return sum\n\nnum1 = int(input('Enter first number: '))\nnum2 = int(input('Enter second number: '))\n\nresult = calculate_sum(num1, num2)\nprint('The sum of the two numbers is:', result)\n```"
    },
    {
        "instruction": "Develop a REST API in Python that will allow the user to retrieve a list of network devices based on a specific IP address range.",
        "output": "from flask import Flask, request, jsonify\nfrom netaddr import IPNetwork\n\napp = Flask(__name__)\n\n@app.route('/devices', methods=['GET'])\ndef get_devices():\n ip_range = request.args.get('ip_range')\n ip_network = IPNetwork(ip_range)\n\n# Query your data store to retrieve all devices in the given IP range\n devices = [\n {'ip_address': '192.168.1.5', 'vendor': 'Cisco'},\n {'ip_address': '192.168.1.6', 'vendor': 'Huawei'},\n {'ip_address': '192.168.1.7', 'vendor': 'Juniper'},\n {'ip_address': '192.168.1.8', 'vendor': 'HP'}\n ]\n\n# Filter the list of devices to those in the specified IP range\n devices = [device for device in devices if IPNetwork(device['ip_address']) in ip_network]\n return jsonify(devices)\n\nif __name__ == '__main__':\n app.run(debug=True)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop a REST API in Python that will allow the user to retrieve a list of network devices based on a specific IP address range.\n\n### Solution:\n```\nfrom flask import Flask, request, jsonify\nfrom netaddr import IPNetwork\n\napp = Flask(__name__)\n\n@app.route('/devices', methods=['GET'])\ndef get_devices():\n ip_range = request.args.get('ip_range')\n ip_network = IPNetwork(ip_range)\n\n# Query your data store to retrieve all devices in the given IP range\n devices = [\n {'ip_address': '192.168.1.5', 'vendor': 'Cisco'},\n {'ip_address': '192.168.1.6', 'vendor': 'Huawei'},\n {'ip_address': '192.168.1.7', 'vendor': 'Juniper'},\n {'ip_address': '192.168.1.8', 'vendor': 'HP'}\n ]\n\n# Filter the list of devices to those in the specified IP range\n devices = [device for device in devices if IPNetwork(device['ip_address']) in ip_network]\n return jsonify(devices)\n\nif __name__ == '__main__':\n app.run(debug=True)\n```"
    },
    {
        "instruction": "Optimize a Python program to print all odd numbers between 0 and 50",
        "output": "# Using for loop \nfor num in range(0, 51): \n if num % 2 != 0: \n print(num, end = \" \") \n\n# Output: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nOptimize a Python program to print all odd numbers between 0 and 50\n\n### Solution:\n```\n# Using for loop \nfor num in range(0, 51): \n if num % 2 != 0: \n print(num, end = \" \") \n\n# Output: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49\n```"
    },
    {
        "instruction": "Utilize array sorting to sort an array in Python.",
        "output": "arr.sort() \nprint(arr)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nUtilize array sorting to sort an array in Python.\n\n### Solution:\n```\narr.sort() \nprint(arr)\n```"
    },
    {
        "instruction": "Write a Python program to find the maximum possible sum of a sequence of consecutive numbers in a given array of integers.",
        "output": "def max_sum_sequence(arr):\n    curr_max = 0\n    max_so_far = 0\n  \n    for i in range(0, len(arr)):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n      \n    return max_so_far\n\narr = [2, 6, -2, -3, 8, 4]\nmax_sum = max_sum_sequence(arr)\nprint(max_sum)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to find the maximum possible sum of a sequence of consecutive numbers in a given array of integers.\n\n### Solution:\n```\ndef max_sum_sequence(arr):\n    curr_max = 0\n    max_so_far = 0\n  \n    for i in range(0, len(arr)):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n      \n    return max_so_far\n\narr = [2, 6, -2, -3, 8, 4]\nmax_sum = max_sum_sequence(arr)\nprint(max_sum)\n```"
    },
    {
        "instruction": "In Python, create a class that can be used to store employee details such as their salary, name, and job assignment.",
        "output": "class Employee: \n    def __init__(self, name, salary, job_assignment): \n        self.name = name \n        self.salary = salary\n        self.job_assignment = job_assignment\n  \n    # other methods here",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nIn Python, create a class that can be used to store employee details such as their salary, name, and job assignment.\n\n### Solution:\n```\nclass Employee: \n    def __init__(self, name, salary, job_assignment): \n        self.name = name \n        self.salary = salary\n        self.job_assignment = job_assignment\n  \n    # other methods here\n```"
    },
    {
        "instruction": "Write a function in Python to implement a search algorithm.",
        "output": "def search(list, query): \n    found_indices = [] \n    for i in range(len(list)): \n        if list[i] == query: \n            found_indices.append(i) \n    return found_indices",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a function in Python to implement a search algorithm.\n\n### Solution:\n```\ndef search(list, query): \n    found_indices = [] \n    for i in range(len(list)): \n        if list[i] == query: \n            found_indices.append(i) \n    return found_indices\n```"
    },
    {
        "instruction": "Generate a function for vector addition in Python.",
        "output": "def vector_addition(v1, v2):\n    result = [v1[i] + v2[i] for i in range(len(v1))]\n    return result\n\nresult = vector_addition([1,2,3], [4,5,6])\nprint(result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a function for vector addition in Python.\n\n### Solution:\n```\ndef vector_addition(v1, v2):\n    result = [v1[i] + v2[i] for i in range(len(v1))]\n    return result\n\nresult = vector_addition([1,2,3], [4,5,6])\nprint(result)\n```"
    },
    {
        "instruction": "Generate a Python function that sorts a list of numbers using the bubble sort algorithm",
        "output": "def bubbleSort(list): \n\tn = len(list) \n\tfor i in range(n): \n\t\tfor j in range(0, n-i-1): \n\t\t\tif list[j] > list[j+1] : \n\t\t\t\tlist[j], list[j+1] = list[j+1], list[j] \n\treturn list\n\nprint(bubbleSort([8,2,11,9,20,7]))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python function that sorts a list of numbers using the bubble sort algorithm\n\n### Solution:\n```\ndef bubbleSort(list): \n\tn = len(list) \n\tfor i in range(n): \n\t\tfor j in range(0, n-i-1): \n\t\t\tif list[j] > list[j+1] : \n\t\t\t\tlist[j], list[j+1] = list[j+1], list[j] \n\treturn list\n\nprint(bubbleSort([8,2,11,9,20,7]))\n```"
    },
    {
        "instruction": "Create a Python program to round up a float to the nearest integer.",
        "output": "def round_up(f):\n    if f - int(f) >= 0.5:\n        return int(f) + 1\n    return int(f)\n\nround_val = round_up(3.14)\nprint(round_val)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to round up a float to the nearest integer.\n\n### Solution:\n```\ndef round_up(f):\n    if f - int(f) >= 0.5:\n        return int(f) + 1\n    return int(f)\n\nround_val = round_up(3.14)\nprint(round_val)\n```"
    },
    {
        "instruction": "Create a Python function that takes a list of integers and returns the summation of the largest and smallest numbers.",
        "output": "def sum_of_min_max(lst):\n    \"\"\"\n    Function to take a list of integers and returns the summation of the largest and smallest numbers\n    Arguments:\n    lst -- list -- list of integers\n    Output:\n    summation -- int -- summation of the largest and smallest numbers\n    \"\"\"\n    min_val = min(lst)\n    max_val = max(lst)\n    summation = min_val + max_val\n    return summation",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python function that takes a list of integers and returns the summation of the largest and smallest numbers.\n\n### Solution:\n```\ndef sum_of_min_max(lst):\n    \"\"\"\n    Function to take a list of integers and returns the summation of the largest and smallest numbers\n    Arguments:\n    lst -- list -- list of integers\n    Output:\n    summation -- int -- summation of the largest and smallest numbers\n    \"\"\"\n    min_val = min(lst)\n    max_val = max(lst)\n    summation = min_val + max_val\n    return summation\n```"
    },
    {
        "instruction": "Using Python, create a program to print a random element from a list.",
        "output": "import random\n\n# list of fruits\nfruits = [\"apple\", \"banana\", \"mango\", \"pear\", \"grape\"]\n\n# generate a random index\nrandomIndex = random.randint(0, len(fruits)-1)\n\n# select and print the random fruit\nrandomFruit = fruits[randomIndex]\nprint(\"Random fruit: \" + randomFruit)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nUsing Python, create a program to print a random element from a list.\n\n### Solution:\n```\nimport random\n\n# list of fruits\nfruits = [\"apple\", \"banana\", \"mango\", \"pear\", \"grape\"]\n\n# generate a random index\nrandomIndex = random.randint(0, len(fruits)-1)\n\n# select and print the random fruit\nrandomFruit = fruits[randomIndex]\nprint(\"Random fruit: \" + randomFruit)\n```"
    },
    {
        "instruction": "Write a Python program to generate a list of prime numbers within a specified range.",
        "output": "def prime_range(lower, upper):\n    prime_list = []\n    for num in range(lower, upper +1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_list.append(num)\n\n    return prime_list\n\nlower = 1\nupper = 20\nprint(prime_range(lower, upper))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to generate a list of prime numbers within a specified range.\n\n### Solution:\n```\ndef prime_range(lower, upper):\n    prime_list = []\n    for num in range(lower, upper +1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_list.append(num)\n\n    return prime_list\n\nlower = 1\nupper = 20\nprint(prime_range(lower, upper))\n```"
    },
    {
        "instruction": "Transform the following piece of code in C to Python.",
        "output": "a = 10\nb = 13\n\nc = a * b",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nTransform the following piece of code in C to Python.\n\n### Solution:\n```\na = 10\nb = 13\n\nc = a * b\n```"
    },
    {
        "instruction": "Make a Python program to get the factors of a number",
        "output": "def get_factors(n): \n    factors = [1]\n    for i in range(2, n + 1):\n        if (n % i == 0): \n            factors.append(i) \n    return factors",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nMake a Python program to get the factors of a number\n\n### Solution:\n```\ndef get_factors(n): \n    factors = [1]\n    for i in range(2, n + 1):\n        if (n % i == 0): \n            factors.append(i) \n    return factors\n```"
    },
    {
        "instruction": "Construct a Python program that reads a user input and returns twice the value.",
        "output": "def double(number):\n    return number * 2\n\n# Output \n6",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConstruct a Python program that reads a user input and returns twice the value.\n\n### Solution:\n```\ndef double(number):\n    return number * 2\n\n# Output \n6\n```"
    },
    {
        "instruction": "Write a Python program which includes a feature which can calculate the sum of all the numbers from 1 to user's given number.",
        "output": "def sum(n): \n    sum = 0\n    for i in range(1,n+1): \n        sum = sum + i \n    return sum",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program which includes a feature which can calculate the sum of all the numbers from 1 to user's given number.\n\n### Solution:\n```\ndef sum(n): \n    sum = 0\n    for i in range(1,n+1): \n        sum = sum + i \n    return sum\n```"
    },
    {
        "instruction": "Write a function in Python to mask parts of a string using the provided masking character.",
        "output": "def mask_parts_of_string(data_string, mask_char):\n  output_string = \"\"\n  for char in data_string:\n    if char != ' ':\n      output_string += mask_char\n    else:\n      output_string += char\n  return output_string\n\ndata_string = \"This is a demo string\"\nmask_char = '#'\nresult = mask_parts_of_string(data_string, mask_char)\nprint(result) # Outputs",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a function in Python to mask parts of a string using the provided masking character.\n\n### Solution:\n```\ndef mask_parts_of_string(data_string, mask_char):\n  output_string = \"\"\n  for char in data_string:\n    if char != ' ':\n      output_string += mask_char\n    else:\n      output_string += char\n  return output_string\n\ndata_string = \"This is a demo string\"\nmask_char = '#'\nresult = mask_parts_of_string(data_string, mask_char)\nprint(result) # Outputs\n```"
    },
    {
        "instruction": "Create a function in Python that will take a list as an argument and return the average of the first 3 elements in the list.",
        "output": "def getAverageOfFirstThree(data):\n    sum = 0\n    for i in range(3):\n        sum += data[i]\n    \n    return sum / 3",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a function in Python that will take a list as an argument and return the average of the first 3 elements in the list.\n\n### Solution:\n```\ndef getAverageOfFirstThree(data):\n    sum = 0\n    for i in range(3):\n        sum += data[i]\n    \n    return sum / 3\n```"
    },
    {
        "instruction": "Write a Python script that implements a logistic regression classifier for a two-class dataset.",
        "output": "import numpy as np\n\nclass LogisticRegression:\n    def __init__(self, X, y):\n        self.X = X\n        self.y = y\n\n        self.w = np.random.randn(X.shape[1]+1)\n\n    def sigmoid(self, z):\n        return 1 / (1 + np.exp(-z))\n\n    def fit(self, epochs):\n        for _ in range(epochs):\n\n            z = np.dot(self.X, self.w[1:]) + self.w[0]\n            h = self.sigmoid(z)\n\n            gradient = np.dot(self.X.T, (h - self.y))\n            self.w[1:] += gradient\n\n            bias = np.sum(h - self.y)\n            self.w[0] += bias\n\n    def predict(self, X):\n        z = np.dot(X, self.w[1:]) + self.w[0]\n        h = self.sigmoid(z)\n\n        return h >= 0.5",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python script that implements a logistic regression classifier for a two-class dataset.\n\n### Solution:\n```\nimport numpy as np\n\nclass LogisticRegression:\n    def __init__(self, X, y):\n        self.X = X\n        self.y = y\n\n        self.w = np.random.randn(X.shape[1]+1)\n\n    def sigmoid(self, z):\n        return 1 / (1 + np.exp(-z))\n\n    def fit(self, epochs):\n        for _ in range(epochs):\n\n            z = np.dot(self.X, self.w[1:]) + self.w[0]\n            h = self.sigmoid(z)\n\n            gradient = np.dot(self.X.T, (h - self.y))\n            self.w[1:] += gradient\n\n            bias = np.sum(h - self.y)\n            self.w[0] += bias\n\n    def predict(self, X):\n        z = np.dot(X, self.w[1:]) + self.w[0]\n        h = self.sigmoid(z)\n\n        return h >= 0.5\n```"
    },
    {
        "instruction": "Write an algorithm in Python to search a smaller word in a larger word.",
        "output": "def search_smaller_word_in_larger_word(search_word, larger_word):\n    \"\"\"\n    Searches a smaller word in a larger word\n    Arguments:\n        search_word -- Smaller word we have to search in the larger word\n        larger_word -- Larger word\n    Return: \n        True if smaller word exists in larger word, else False\n    \"\"\"\n\n    if search_word in larger_word:\n        return True\n    return False\n\nif __name__ == '__main__':\n    search_word = \"the\"\n    larger_word = \"hello there\"\n    print(search_smaller_word_in_larger_word(search_word, larger_word))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite an algorithm in Python to search a smaller word in a larger word.\n\n### Solution:\n```\ndef search_smaller_word_in_larger_word(search_word, larger_word):\n    \"\"\"\n    Searches a smaller word in a larger word\n    Arguments:\n        search_word -- Smaller word we have to search in the larger word\n        larger_word -- Larger word\n    Return: \n        True if smaller word exists in larger word, else False\n    \"\"\"\n\n    if search_word in larger_word:\n        return True\n    return False\n\nif __name__ == '__main__':\n    search_word = \"the\"\n    larger_word = \"hello there\"\n    print(search_smaller_word_in_larger_word(search_word, larger_word))\n```"
    },
    {
        "instruction": "Generate a number guessing game in Python.",
        "output": "import random\n\n# Generate a random number between 1 and 10\nanswer = random.randint(1, 10)\n\n# Ask the user to guess the number\nguess = int(input(\"Guess a number between 1 and 10: \"))\n\n# Loop until the user guesses correctly\nwhile guess != answer:\n    if guess < answer:\n        print(\"Too low!\")\n    else:\n        print(\"Too high!\")\n    \n    guess = int(input(\"Guess again: \"))\n    \n# Congratulate the user\nprint(\"You got it! The answer is \" + str(answer))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a number guessing game in Python.\n\n### Solution:\n```\nimport random\n\n# Generate a random number between 1 and 10\nanswer = random.randint(1, 10)\n\n# Ask the user to guess the number\nguess = int(input(\"Guess a number between 1 and 10: \"))\n\n# Loop until the user guesses correctly\nwhile guess != answer:\n    if guess < answer:\n        print(\"Too low!\")\n    else:\n        print(\"Too high!\")\n    \n    guess = int(input(\"Guess again: \"))\n    \n# Congratulate the user\nprint(\"You got it! The answer is \" + str(answer))\n```"
    },
    {
        "instruction": "Generate a Python program to determine if a given binary tree is balanced",
        "output": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef is_balanced(node):\n    if node is None:\n        return True\n    left_height = get_height(node.left)\n    right_height = get_height(node.right)\n\n    return (abs(left_height - right_height) <= 1\n        and is_balanced(node.left) == True\n        and is_balanced(node.right) == True\n        )\n\ndef get_height(node):\n    if node is None:\n        return 0\n    return 1 + max(get_height(node.left), get_height(node.right))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python program to determine if a given binary tree is balanced\n\n### Solution:\n```\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef is_balanced(node):\n    if node is None:\n        return True\n    left_height = get_height(node.left)\n    right_height = get_height(node.right)\n\n    return (abs(left_height - right_height) <= 1\n        and is_balanced(node.left) == True\n        and is_balanced(node.right) == True\n        )\n\ndef get_height(node):\n    if node is None:\n        return 0\n    return 1 + max(get_height(node.left), get_height(node.right))\n```"
    },
    {
        "instruction": "Construct a Python program that reverses an array.",
        "output": "def reverse_array(arr): \n    low = 0\n    high = len(arr) - 1\n    \n    while low < high: \n        arr[low], arr[high] = arr[high], arr[low] \n        low += 1\n        high -= 1\n  \n    return arr",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConstruct a Python program that reverses an array.\n\n### Solution:\n```\ndef reverse_array(arr): \n    low = 0\n    high = len(arr) - 1\n    \n    while low < high: \n        arr[low], arr[high] = arr[high], arr[low] \n        low += 1\n        high -= 1\n  \n    return arr\n```"
    },
    {
        "instruction": "Create a script in Python to apply Principal Component Analysis (PCA) on a given dataset.",
        "output": "from sklearn.decomposition import PCA\n\n# define a 3x3 matrix \nmatrix_data = dataset \npca = PCA(n_components=2) \n\n# transform 3x3 matrix into 2x2 matrix \ntransformed_data = pca.fit_transform(matrix_data) \n\nprint(transformed_data)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a script in Python to apply Principal Component Analysis (PCA) on a given dataset.\n\n### Solution:\n```\nfrom sklearn.decomposition import PCA\n\n# define a 3x3 matrix \nmatrix_data = dataset \npca = PCA(n_components=2) \n\n# transform 3x3 matrix into 2x2 matrix \ntransformed_data = pca.fit_transform(matrix_data) \n\nprint(transformed_data)\n```"
    },
    {
        "instruction": "Create a function in Python that takes two parameters 'a' and 'b' and returns the remainder when 'a' is divided by 'b'.",
        "output": "def get_remainder(a, b):\n    return a % b",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a function in Python that takes two parameters 'a' and 'b' and returns the remainder when 'a' is divided by 'b'.\n\n### Solution:\n```\ndef get_remainder(a, b):\n    return a % b\n```"
    },
    {
        "instruction": "Given two lists of integers, write a python function that returns a list of all common elements shared between them.",
        "output": "def common_elements(list1, list2):\n    return list(set(list1) & set(list2))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGiven two lists of integers, write a python function that returns a list of all common elements shared between them.\n\n### Solution:\n```\ndef common_elements(list1, list2):\n    return list(set(list1) & set(list2))\n```"
    },
    {
        "instruction": "Write a function in Python that takes two parameters, a positive integer n and a list of numbers, and returns the sum of the first n elements of the list.",
        "output": "def func(n, nums):\n  res = 0\n  for i in range(n):\n    res += nums[i]\n  return res",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a function in Python that takes two parameters, a positive integer n and a list of numbers, and returns the sum of the first n elements of the list.\n\n### Solution:\n```\ndef func(n, nums):\n  res = 0\n  for i in range(n):\n    res += nums[i]\n  return res\n```"
    },
    {
        "instruction": "Write a Python function to classify a given string based on the following conditions:\nA) If the length of the string is less than 3, “Short”\nB) If the string only contains alphabets, “Alphabet”\nC) If the string only contains numbers, “Numeral”",
        "output": "def classify_string(string):\n    if len(string) < 3:\n        return \"Short\" \n    elif string.isalpha():\n        return \"Alphabet\" \n    elif string.isnumeric():\n        return \"Numeral\"",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python function to classify a given string based on the following conditions:\nA) If the length of the string is less than 3, “Short”\nB) If the string only contains alphabets, “Alphabet”\nC) If the string only contains numbers, “Numeral”\n\n### Solution:\n```\ndef classify_string(string):\n    if len(string) < 3:\n        return \"Short\" \n    elif string.isalpha():\n        return \"Alphabet\" \n    elif string.isnumeric():\n        return \"Numeral\"\n```"
    },
    {
        "instruction": "Create a python code to identify the most frequent item in a given list.",
        "output": "from collections import Counter \n\ndef most_frequent_item(given_list):\n    # Use Counter to count the occurrences of each item\n    item_counter = Counter(given_list) \n    # Get the most frequent item and its frequency\n    most_freq_item, freq = item_counter.most_common(1)[0] \n    return most_freq_item\n\n# Test\ngiven_list = [1, 2, 3, 4, 4, 1, 2, 3, 3]\nresult = most_frequent_item(given_list)\nprint(f\"The most frequent item in {given_list} is {result}\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a python code to identify the most frequent item in a given list.\n\n### Solution:\n```\nfrom collections import Counter \n\ndef most_frequent_item(given_list):\n    # Use Counter to count the occurrences of each item\n    item_counter = Counter(given_list) \n    # Get the most frequent item and its frequency\n    most_freq_item, freq = item_counter.most_common(1)[0] \n    return most_freq_item\n\n# Test\ngiven_list = [1, 2, 3, 4, 4, 1, 2, 3, 3]\nresult = most_frequent_item(given_list)\nprint(f\"The most frequent item in {given_list} is {result}\")\n```"
    },
    {
        "instruction": "Write a python program to create a data structure composed of random values with a total of n elements.",
        "output": "import random\n\ndef create_random_structure(n):\n    structure = []\n    for i in range(n):\n        structure.append(random.randint(0, n))\n    return structure",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a python program to create a data structure composed of random values with a total of n elements.\n\n### Solution:\n```\nimport random\n\ndef create_random_structure(n):\n    structure = []\n    for i in range(n):\n        structure.append(random.randint(0, n))\n    return structure\n```"
    },
    {
        "instruction": "Generate a Python function to print the Fibonacci series up to a given number.",
        "output": "def print_fibonacci(num): \n    a = 0\n    b = 1\n    print(a, end =' ') \n    print(b, end =' ') \n    for i in range(2,num): \n        c = a + b \n        a = b \n        b = c \n        print(c, end =' ')",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python function to print the Fibonacci series up to a given number.\n\n### Solution:\n```\ndef print_fibonacci(num): \n    a = 0\n    b = 1\n    print(a, end =' ') \n    print(b, end =' ') \n    for i in range(2,num): \n        c = a + b \n        a = b \n        b = c \n        print(c, end =' ')\n```"
    },
    {
        "instruction": "Create a Python web scraper that extracts the title, author, and content of articles from a website.",
        "output": "import requests\nimport bs4\n\nurl = 'https://example.com/articles'\n\n# Fetch the page\nresponse = requests.get(url)\nhtml_soup = bs4.BeautifulSoup(response.text, 'html.parser')\n\n# Extract list of articles from the page\narticles = html_soup.find_all('article')\n\n# Iterate over the articles\nfor article in articles:\n # Extract the title, author, and content\n title = article.find('h2').text\n author = article.find('p', {'class': 'author'}).text\n content = article.find('p', {'class': 'content'}).text\n \n # Print out the extracted values\n print(\"Title:\", title)\n print(\"Author:\", author)\n print(\"Content:\", content)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python web scraper that extracts the title, author, and content of articles from a website.\n\n### Solution:\n```\nimport requests\nimport bs4\n\nurl = 'https://example.com/articles'\n\n# Fetch the page\nresponse = requests.get(url)\nhtml_soup = bs4.BeautifulSoup(response.text, 'html.parser')\n\n# Extract list of articles from the page\narticles = html_soup.find_all('article')\n\n# Iterate over the articles\nfor article in articles:\n # Extract the title, author, and content\n title = article.find('h2').text\n author = article.find('p', {'class': 'author'}).text\n content = article.find('p', {'class': 'content'}).text\n \n # Print out the extracted values\n print(\"Title:\", title)\n print(\"Author:\", author)\n print(\"Content:\", content)\n```"
    },
    {
        "instruction": "Code a Python program that can take an array of integers as input and sort them in ascending order.",
        "output": "def sort_ascending(array): \n    for i in range(len(array)):   \n        min_idx = i \n        for j in range(i+1, len(array)):\n            if array[min_idx] > array[j]: \n                min_idx = j             \n        array[i], array[min_idx] = array[min_idx], array[i] \n    return array\n  \narr = [5,3,7,2,9] \nresult = sort_ascending(arr) \nprint(\"Array sorted in ascending order is:\") \nfor i in result: \n    print(i, end=\" \")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCode a Python program that can take an array of integers as input and sort them in ascending order.\n\n### Solution:\n```\ndef sort_ascending(array): \n    for i in range(len(array)):   \n        min_idx = i \n        for j in range(i+1, len(array)):\n            if array[min_idx] > array[j]: \n                min_idx = j             \n        array[i], array[min_idx] = array[min_idx], array[i] \n    return array\n  \narr = [5,3,7,2,9] \nresult = sort_ascending(arr) \nprint(\"Array sorted in ascending order is:\") \nfor i in result: \n    print(i, end=\" \")\n```"
    },
    {
        "instruction": "Write a Python program to calculate the value of the expression 2x^2 + 5x + 3 for x = 3.",
        "output": "x = 3\nresult = 2*(x**2) + 5*x + 3\n\nprint(result)\n\n# Outputs: 34",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to calculate the value of the expression 2x^2 + 5x + 3 for x = 3.\n\n### Solution:\n```\nx = 3\nresult = 2*(x**2) + 5*x + 3\n\nprint(result)\n\n# Outputs: 34\n```"
    },
    {
        "instruction": "Create a Python script to merge two dictionaries.",
        "output": "def merge_dicts(dict1, dict2):\n    res = {**dict1, **dict2}\n    return res\n\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\n\nmerged_dicts = merge_dicts(dict1, dict2)\n\nprint(merged_dicts)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python script to merge two dictionaries.\n\n### Solution:\n```\ndef merge_dicts(dict1, dict2):\n    res = {**dict1, **dict2}\n    return res\n\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\n\nmerged_dicts = merge_dicts(dict1, dict2)\n\nprint(merged_dicts)\n```"
    },
    {
        "instruction": "Create a Python program to find the maximum and minimum of a given list of numbers using the divide-and-conquer approach.",
        "output": "def find_max_min(lst):\n    if len(lst) == 1:\n        return lst[0], lst[0]\n    \n    elif len(lst) == 2:\n        return max(lst), min(lst)\n    \n    mid = len(lst)//2\n    left_max, left_min = find_max_min(lst[:mid])\n    right_max, right_min = find_max_min(lst[mid:])\n\n    return max(left_max, right_max), min(left_min, right_min)\n\nmax_num, min_num = find_max_min([5, 3, 8, 2, 10, 1])\n\nprint(\"The maximum number is\", max_num)\nprint(\"The minimum number is\", min_num)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to find the maximum and minimum of a given list of numbers using the divide-and-conquer approach.\n\n### Solution:\n```\ndef find_max_min(lst):\n    if len(lst) == 1:\n        return lst[0], lst[0]\n    \n    elif len(lst) == 2:\n        return max(lst), min(lst)\n    \n    mid = len(lst)//2\n    left_max, left_min = find_max_min(lst[:mid])\n    right_max, right_min = find_max_min(lst[mid:])\n\n    return max(left_max, right_max), min(left_min, right_min)\n\nmax_num, min_num = find_max_min([5, 3, 8, 2, 10, 1])\n\nprint(\"The maximum number is\", max_num)\nprint(\"The minimum number is\", min_num)\n```"
    },
    {
        "instruction": "Create a Python class that identifies if a number is a multiple of five.",
        "output": "class MultipleOfFive:\n    def __init__(self, number):\n        self.number = number\n    \n    def is_multiple_of_five(self):\n        return self.number % 5 == 0",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python class that identifies if a number is a multiple of five.\n\n### Solution:\n```\nclass MultipleOfFive:\n    def __init__(self, number):\n        self.number = number\n    \n    def is_multiple_of_five(self):\n        return self.number % 5 == 0\n```"
    },
    {
        "instruction": "Modify the following Python code to raise an exception if the input value is not an integer",
        "output": "def square_root(x):\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    return x**0.5",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nModify the following Python code to raise an exception if the input value is not an integer\n\n### Solution:\n```\ndef square_root(x):\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    return x**0.5\n```"
    },
    {
        "instruction": "Generate a program in Python that takes a given dictionary and finds the key with the highest value.",
        "output": "def highest_value(d):\n    key, highest_val = None, -float(\"inf\")\n    for k, val in d.items():\n        if val > highest_val:\n            key, highest_val = k, val\n    return key\n\nhighest_key = highest_value(my_dict)\nprint(highest_key)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a program in Python that takes a given dictionary and finds the key with the highest value.\n\n### Solution:\n```\ndef highest_value(d):\n    key, highest_val = None, -float(\"inf\")\n    for k, val in d.items():\n        if val > highest_val:\n            key, highest_val = k, val\n    return key\n\nhighest_key = highest_value(my_dict)\nprint(highest_key)\n```"
    },
    {
        "instruction": "Develop a python program to calculate the maximum product of two numbers greater than 0 in a given numerical array.",
        "output": "def maxProduct(arr): \n    n = len(arr) \n    max_prod = 0\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            if arr[i] > 0 and arr[j] > 0: \n                max_prod = max(max_prod, arr[i] * arr[j]) \n  \n    return max_prod \n\n# Input\narray = [6, -3, -10, 0, 2]\n\n# Output\nresult = maxProduct(array)\nprint(result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop a python program to calculate the maximum product of two numbers greater than 0 in a given numerical array.\n\n### Solution:\n```\ndef maxProduct(arr): \n    n = len(arr) \n    max_prod = 0\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            if arr[i] > 0 and arr[j] > 0: \n                max_prod = max(max_prod, arr[i] * arr[j]) \n  \n    return max_prod \n\n# Input\narray = [6, -3, -10, 0, 2]\n\n# Output\nresult = maxProduct(array)\nprint(result)\n```"
    },
    {
        "instruction": "Write a Python program to format a specified string to limit the number of characters to 6.",
        "output": "def limit_chars(s):\n    return s[:6]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to format a specified string to limit the number of characters to 6.\n\n### Solution:\n```\ndef limit_chars(s):\n    return s[:6]\n```"
    },
    {
        "instruction": "Create a Python script to parse an XML document and extract the title and description for each item in the document.",
        "output": "import xml.etree.ElementTree as ET\n \n# Read the XML file\ntree = ET.parse('items.xml')\n \n# Get the root element\nroot = tree.getroot()\n \n# Iterate over each item\nfor item in root.findall('item'):\n # Get the title\n title = item.find('title').text\n # Get the description\n description = item.find('description').text\n \n print('Title: ', title)\n print('Description: ', description)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python script to parse an XML document and extract the title and description for each item in the document.\n\n### Solution:\n```\nimport xml.etree.ElementTree as ET\n \n# Read the XML file\ntree = ET.parse('items.xml')\n \n# Get the root element\nroot = tree.getroot()\n \n# Iterate over each item\nfor item in root.findall('item'):\n # Get the title\n title = item.find('title').text\n # Get the description\n description = item.find('description').text\n \n print('Title: ', title)\n print('Description: ', description)\n```"
    },
    {
        "instruction": "Generate a random string of characters in Python with a length between 8 and 16 characters.",
        "output": "import string\nimport random\n\ndef generate_random_string(length):\n    random_string = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))\n    return random_string\n\nlength = random.randrange(8,16)\nrandom_string = generate_random_string(length)\nprint(random_string)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a random string of characters in Python with a length between 8 and 16 characters.\n\n### Solution:\n```\nimport string\nimport random\n\ndef generate_random_string(length):\n    random_string = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))\n    return random_string\n\nlength = random.randrange(8,16)\nrandom_string = generate_random_string(length)\nprint(random_string)\n```"
    },
    {
        "instruction": "Write a Python program that randomly generates a list of 10 numbers in a range from 0 to 100.",
        "output": "import random\n\nnumber_list = [random.randint(0, 100) for n in range(10)]\n\nprint(number_list)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program that randomly generates a list of 10 numbers in a range from 0 to 100.\n\n### Solution:\n```\nimport random\n\nnumber_list = [random.randint(0, 100) for n in range(10)]\n\nprint(number_list)\n```"
    },
    {
        "instruction": "Design a Python program to calculate the total number of possible routes between two points on a grid.",
        "output": "def num_routes(grid_dim, start, end):\n    paths = 1\n    xdiff = end[0] - start[0]\n    ydiff = end[1] - start[1]\n    num_rows, num_cols = grid_dim\n    max_x = num_rows - 1 - xdiff\n    max_y = num_cols - 1 - ydiff\n    for x in range(0, max_x):\n        paths *= (x+ydiff+1)\n    for y in range(0, max_y):\n        paths *= (y+xdiff+1)\n    return int(paths/math.factorial(xdiff+ydiff))\n\nprint(num_routes([4,6], [0,0], [3,5])) // Output: 126",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a Python program to calculate the total number of possible routes between two points on a grid.\n\n### Solution:\n```\ndef num_routes(grid_dim, start, end):\n    paths = 1\n    xdiff = end[0] - start[0]\n    ydiff = end[1] - start[1]\n    num_rows, num_cols = grid_dim\n    max_x = num_rows - 1 - xdiff\n    max_y = num_cols - 1 - ydiff\n    for x in range(0, max_x):\n        paths *= (x+ydiff+1)\n    for y in range(0, max_y):\n        paths *= (y+xdiff+1)\n    return int(paths/math.factorial(xdiff+ydiff))\n\nprint(num_routes([4,6], [0,0], [3,5])) // Output: 126\n```"
    },
    {
        "instruction": "Create a Python script to generate 10 random hexadecimal numbers.",
        "output": "import random\n\ndef generate_hex_numbers(n): \n    hex_numbers = [format(random.randint(0, 16**8 - 1), 'x') for _ in range(n)] \n    return hex_numbers\n\nprint(generate_hex_numbers(10))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python script to generate 10 random hexadecimal numbers.\n\n### Solution:\n```\nimport random\n\ndef generate_hex_numbers(n): \n    hex_numbers = [format(random.randint(0, 16**8 - 1), 'x') for _ in range(n)] \n    return hex_numbers\n\nprint(generate_hex_numbers(10))\n```"
    },
    {
        "instruction": "Output the sum of numbers in a list in Python.",
        "output": "def list_sum(inpList):\n    sum = 0\n    for num in inpList:\n        sum += num\n    return sum\n\nprint(list_sum([1, 2, 3, 4, 5]))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nOutput the sum of numbers in a list in Python.\n\n### Solution:\n```\ndef list_sum(inpList):\n    sum = 0\n    for num in inpList:\n        sum += num\n    return sum\n\nprint(list_sum([1, 2, 3, 4, 5]))\n```"
    },
    {
        "instruction": "Given a list of numbers, write a Python program to find the frequency of each number in the list.",
        "output": "from collections import Counter\n\ndef find_frequency(list): \n    return Counter(list) \n\nmy_list = [1, 2, 3, 4, 1, 2, 3]\nfreq = find_frequency(my_list)\nprint(freq)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGiven a list of numbers, write a Python program to find the frequency of each number in the list.\n\n### Solution:\n```\nfrom collections import Counter\n\ndef find_frequency(list): \n    return Counter(list) \n\nmy_list = [1, 2, 3, 4, 1, 2, 3]\nfreq = find_frequency(my_list)\nprint(freq)\n```"
    },
    {
        "instruction": "Implement a program in Python to generate a multiplication table for the given integer.",
        "output": "def multiplication_table(n): \n  \n    for i in range(1, 11): \n        print(\"{0:>2} X {1:2} = {2:2}\".format(n, i, n*i)) \n  \nmultiplication_table(6)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nImplement a program in Python to generate a multiplication table for the given integer.\n\n### Solution:\n```\ndef multiplication_table(n): \n  \n    for i in range(1, 11): \n        print(\"{0:>2} X {1:2} = {2:2}\".format(n, i, n*i)) \n  \nmultiplication_table(6)\n```"
    },
    {
        "instruction": "Write a Python program to generate an array of random numbers in the range [0,99], with the length given as input.",
        "output": "import random\n\ndef generate_random_array(length):\n    return [random.randint(0, 99) for _ in range(length)]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to generate an array of random numbers in the range [0,99], with the length given as input.\n\n### Solution:\n```\nimport random\n\ndef generate_random_array(length):\n    return [random.randint(0, 99) for _ in range(length)]\n```"
    },
    {
        "instruction": "Create a search engine in Python to search a collection of documents for a given keyword.",
        "output": "import string\n\ndef search(docs, key):\n results = []\n for doc in docs:\n words = doc.lower().translate(str.maketrans('', '', string.punctuation)).split()\n if key in words:\n results.append(doc)\n return results",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a search engine in Python to search a collection of documents for a given keyword.\n\n### Solution:\n```\nimport string\n\ndef search(docs, key):\n results = []\n for doc in docs:\n words = doc.lower().translate(str.maketrans('', '', string.punctuation)).split()\n if key in words:\n results.append(doc)\n return results\n```"
    },
    {
        "instruction": "Create a Python function which returns the greatest common divisor of two integers.",
        "output": "def greatest_common_divisor(a, b):\n    # Ensure that a is greater than b\n    if a < b:\n        a, b = b, a\n\n    # Calculate the GCD of a and b\n    while b != 0:\n        # Get the remainder\n        rem = a % b\n        # Set a to b\n        a = b\n        # Set b to the remainder\n        b = rem\n\n    # Return the greatest common divisor\n    return a\n\nprint(greatest_common_divisor(18, 48))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python function which returns the greatest common divisor of two integers.\n\n### Solution:\n```\ndef greatest_common_divisor(a, b):\n    # Ensure that a is greater than b\n    if a < b:\n        a, b = b, a\n\n    # Calculate the GCD of a and b\n    while b != 0:\n        # Get the remainder\n        rem = a % b\n        # Set a to b\n        a = b\n        # Set b to the remainder\n        b = rem\n\n    # Return the greatest common divisor\n    return a\n\nprint(greatest_common_divisor(18, 48))\n```"
    },
    {
        "instruction": "Establish an automated machine learning workflow in Python.",
        "output": "# Import Libraries\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\n\n# Load data\nX_train, X_test, y_train, y_test = load_data()\n\n# Create a Machine Learning Pipeline\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('model', LogisticRegression(solver='lbfgs', random_state=42))\n])\n\n# Fit the pipeline to the training data\npipeline.fit(X_train, y_train)\n\n# Evaluate the pipeline on the test data\npredicted = pipeline.predict(X_test)\nprint('Test Accuracy:', accuracy_score(predicted, y_test))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nEstablish an automated machine learning workflow in Python.\n\n### Solution:\n```\n# Import Libraries\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\n\n# Load data\nX_train, X_test, y_train, y_test = load_data()\n\n# Create a Machine Learning Pipeline\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('model', LogisticRegression(solver='lbfgs', random_state=42))\n])\n\n# Fit the pipeline to the training data\npipeline.fit(X_train, y_train)\n\n# Evaluate the pipeline on the test data\npredicted = pipeline.predict(X_test)\nprint('Test Accuracy:', accuracy_score(predicted, y_test))\n```"
    },
    {
        "instruction": "Given two strings s and t, create a new Python function to check if s is an anagram of t.",
        "output": "def is_anagram(s, t):\n s_list = list(s)\n t_list = list(t)\n s_list.sort()\n t_list.sort()\n if s_list == t_list:\n return True\n else:\n return False",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGiven two strings s and t, create a new Python function to check if s is an anagram of t.\n\n### Solution:\n```\ndef is_anagram(s, t):\n s_list = list(s)\n t_list = list(t)\n s_list.sort()\n t_list.sort()\n if s_list == t_list:\n return True\n else:\n return False\n```"
    },
    {
        "instruction": "Use the provided data set to generate a bar chart in Python.",
        "output": "import matplotlib.pyplot as plt\n\nx_values = [1, 2, 3, 4]\ny_values = [10, 12, 7, 5]\n\nplt.bar(x_values, y_values)\nplt.title('Bar Chart')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nUse the provided data set to generate a bar chart in Python.\n\n### Solution:\n```\nimport matplotlib.pyplot as plt\n\nx_values = [1, 2, 3, 4]\ny_values = [10, 12, 7, 5]\n\nplt.bar(x_values, y_values)\nplt.title('Bar Chart')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"
    },
    {
        "instruction": "Generate pseudo-random numbers in Python.",
        "output": "# Generate pseudo-random numbers in Python\n\nimport random\n\n# Generate a pseudo-random number between 0 and 1\nnum = random.random()\nprint(\"Pseudo-random number between 0 and 1: \", num)\n\n# Generate pseudo-random numbers from a discrete set\nnum = random.choice([1, 2, 3, 4, 5])\nprint(\"Pseudo-random number from a discrete set: \", num)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate pseudo-random numbers in Python.\n\n### Solution:\n```\n# Generate pseudo-random numbers in Python\n\nimport random\n\n# Generate a pseudo-random number between 0 and 1\nnum = random.random()\nprint(\"Pseudo-random number between 0 and 1: \", num)\n\n# Generate pseudo-random numbers from a discrete set\nnum = random.choice([1, 2, 3, 4, 5])\nprint(\"Pseudo-random number from a discrete set: \", num)\n```"
    },
    {
        "instruction": "Write an algorithm in Python to calculate the sum of even numbers in an array between a given range.",
        "output": "def sumEvensInRange(arr, lower, upper):\n    evens_sum = 0\n    for num in arr:\n        if num >= lower and num <= upper and num % 2 == 0:\n            evens_sum += num\n    return evens_sum",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite an algorithm in Python to calculate the sum of even numbers in an array between a given range.\n\n### Solution:\n```\ndef sumEvensInRange(arr, lower, upper):\n    evens_sum = 0\n    for num in arr:\n        if num >= lower and num <= upper and num % 2 == 0:\n            evens_sum += num\n    return evens_sum\n```"
    },
    {
        "instruction": "Write a Python program to encode and decode a given text using Base64 algorithm.",
        "output": "import base64\n\n# Function to encode\ndef encode(text):\n encoded_text = base64.b64encode(text.encode('utf-8'))\n return encoded_text\n\n# Function to decode\ndef decode(text):\n decoded_text = base64.b64decode(text).decode('utf-8')\n return decoded_text\n\n# Main function\ndef main():\n text = \"Hello World!\"\n encoded_text = encode(text)\n print(encoded_text)\n\n decoded_text = decode(encoded_text)\n print(decoded_text)\n\nif __name__ == '__main__':\n main()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to encode and decode a given text using Base64 algorithm.\n\n### Solution:\n```\nimport base64\n\n# Function to encode\ndef encode(text):\n encoded_text = base64.b64encode(text.encode('utf-8'))\n return encoded_text\n\n# Function to decode\ndef decode(text):\n decoded_text = base64.b64decode(text).decode('utf-8')\n return decoded_text\n\n# Main function\ndef main():\n text = \"Hello World!\"\n encoded_text = encode(text)\n print(encoded_text)\n\n decoded_text = decode(encoded_text)\n print(decoded_text)\n\nif __name__ == '__main__':\n main()\n```"
    },
    {
        "instruction": "Develop a Python function that can detect loops in a given linked list.",
        "output": "def detectLoop(head):\n    slow_p = head \n    fast_p = head \n    while(slow_p and fast_p and fast_p.next): \n        slow_p = slow_p.next\n        fast_p = fast_p.next.next\n        if slow_p == fast_p:\n            return True\n    return False",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop a Python function that can detect loops in a given linked list.\n\n### Solution:\n```\ndef detectLoop(head):\n    slow_p = head \n    fast_p = head \n    while(slow_p and fast_p and fast_p.next): \n        slow_p = slow_p.next\n        fast_p = fast_p.next.next\n        if slow_p == fast_p:\n            return True\n    return False\n```"
    },
    {
        "instruction": "Write code in Python that takes a given dictionary and returns the difference of the maximal and minimal values of the dictionary.",
        "output": "def calculate_difference(input_dict):\n    max_val = max(input_dict.values())\n    min_val = min(input_dict.values())\n    return max_val - min_val\n\ninput_dict = {'a': 5, 'b': -2, 'c': 3}\ndifference = calculate_difference(input_dict)\nprint(difference)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite code in Python that takes a given dictionary and returns the difference of the maximal and minimal values of the dictionary.\n\n### Solution:\n```\ndef calculate_difference(input_dict):\n    max_val = max(input_dict.values())\n    min_val = min(input_dict.values())\n    return max_val - min_val\n\ninput_dict = {'a': 5, 'b': -2, 'c': 3}\ndifference = calculate_difference(input_dict)\nprint(difference)\n```"
    },
    {
        "instruction": "Using the given data, create a class in Python and add some methods to the class.",
        "output": "class File:\n    \"\"\"A simple file class\"\"\"\n    def __init__(self, name, size, type):\n        self.name = name\n        self.size = size\n        self.type = type\n\n    def get_name(self):\n        return self.name\n\n    def get_size(self):\n        return self.size\n\n    def get_type(self):\n        return self.type",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nUsing the given data, create a class in Python and add some methods to the class.\n\n### Solution:\n```\nclass File:\n    \"\"\"A simple file class\"\"\"\n    def __init__(self, name, size, type):\n        self.name = name\n        self.size = size\n        self.type = type\n\n    def get_name(self):\n        return self.name\n\n    def get_size(self):\n        return self.size\n\n    def get_type(self):\n        return self.type\n```"
    },
    {
        "instruction": "Create a Python program to find the elements that are common in two unsorted lists.",
        "output": "def common_in_two_lists(list1, list2):\n    common_elements = []\n    for number in list1:\n        if number in list2:\n            common_elements.append(number)\n    return common_elements",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to find the elements that are common in two unsorted lists.\n\n### Solution:\n```\ndef common_in_two_lists(list1, list2):\n    common_elements = []\n    for number in list1:\n        if number in list2:\n            common_elements.append(number)\n    return common_elements\n```"
    },
    {
        "instruction": "Generate a Python program to compress a string into a series of numbers and vice-versa.",
        "output": "def compress(string):\n    if string == '' or not string:\n        return string\n    compressed_str = []\n    i = 0\n    j = 0\n    while i < len(string):\n        while j < len(string) and string[j] == string[i]:\n            j = j + 1\n        compressed_str.append([string[i], str(j-i)])\n        i = j\n    return compressed_str\n\ndef decompress(compressed_str):\n    decompressed_str = \"\"\n    for i in compressed_str:\n        decompressed_str+=i[0]*int(i[1])\n    return decompressed_str",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python program to compress a string into a series of numbers and vice-versa.\n\n### Solution:\n```\ndef compress(string):\n    if string == '' or not string:\n        return string\n    compressed_str = []\n    i = 0\n    j = 0\n    while i < len(string):\n        while j < len(string) and string[j] == string[i]:\n            j = j + 1\n        compressed_str.append([string[i], str(j-i)])\n        i = j\n    return compressed_str\n\ndef decompress(compressed_str):\n    decompressed_str = \"\"\n    for i in compressed_str:\n        decompressed_str+=i[0]*int(i[1])\n    return decompressed_str\n```"
    },
    {
        "instruction": "Compose a Python class for creating a person object",
        "output": "class Person:\n    \"\"\"\n    Creates a Person object with given name, age, and gender. \n    \"\"\"\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def greet(self):\n        \"\"\"\n        Prints out a greeting for the Person\n        \"\"\"\n        print('Hello, my name is ' + self.name)\n\nif __name__ == '__main__':\n    John = Person('John', 25, 'male')\n    John.greet()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCompose a Python class for creating a person object\n\n### Solution:\n```\nclass Person:\n    \"\"\"\n    Creates a Person object with given name, age, and gender. \n    \"\"\"\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def greet(self):\n        \"\"\"\n        Prints out a greeting for the Person\n        \"\"\"\n        print('Hello, my name is ' + self.name)\n\nif __name__ == '__main__':\n    John = Person('John', 25, 'male')\n    John.greet()\n```"
    },
    {
        "instruction": "Define a class method in Python to initialize an object's fields.",
        "output": "class SomeClass:\n\n    def __init__(self, field1, field2):\n        self.field1 = field1\n        self.field2 = field2",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDefine a class method in Python to initialize an object's fields.\n\n### Solution:\n```\nclass SomeClass:\n\n    def __init__(self, field1, field2):\n        self.field1 = field1\n        self.field2 = field2\n```"
    },
    {
        "instruction": "Write a function in Python to generate n numbers of Fibonacci series.",
        "output": "def fibonacci_series(n): \n    # First two terms \n    a = 0\n    b = 1\n    c = 0\n    print(\"Fibonacci Series:\", end = \" \")\n    print(a , b , end = \" \")\n    for i in range(2,n): \n        c = a + b \n        a = b \n        b = c \n        print(c , end = \" \") \n\n# Output should come like\n# 0 1 1 2 3 5 8 13 21 34",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a function in Python to generate n numbers of Fibonacci series.\n\n### Solution:\n```\ndef fibonacci_series(n): \n    # First two terms \n    a = 0\n    b = 1\n    c = 0\n    print(\"Fibonacci Series:\", end = \" \")\n    print(a , b , end = \" \")\n    for i in range(2,n): \n        c = a + b \n        a = b \n        b = c \n        print(c , end = \" \") \n\n# Output should come like\n# 0 1 1 2 3 5 8 13 21 34\n```"
    },
    {
        "instruction": "Develop a program in Python to compute the median of three numbers.",
        "output": "def median(a, b, c): \n    if (a <= b <= c) or (c <= b <= a): \n        median = b \n    elif (b <= a <= c) or (c <= a <= b): \n        median = a \n    else: \n        median = c \n  \n    return median",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop a program in Python to compute the median of three numbers.\n\n### Solution:\n```\ndef median(a, b, c): \n    if (a <= b <= c) or (c <= b <= a): \n        median = b \n    elif (b <= a <= c) or (c <= a <= b): \n        median = a \n    else: \n        median = c \n  \n    return median\n```"
    },
    {
        "instruction": "Create a Python class that takes a list as input and returns a sorted list as output.",
        "output": "class SortList:\n    def __init__(self, lst):\n        self.lst = lst\n        \n    def sort_list(self):\n        self.lst.sort()\n        return self.lst",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python class that takes a list as input and returns a sorted list as output.\n\n### Solution:\n```\nclass SortList:\n    def __init__(self, lst):\n        self.lst = lst\n        \n    def sort_list(self):\n        self.lst.sort()\n        return self.lst\n```"
    },
    {
        "instruction": "Create a Python algorithm to classify positive and negative sentiment in tweets.",
        "output": "def sentiment_analysis(tweets):\n    # Initialize a list to store the result \n    results = [] \n\n    # Iterate through each tweet\n    for tweet in tweets:\n        # Clean the tweet \n        tweet = preprocessing(tweet)\n\n        # Vectorize the tweet and obtain the prediction \n        tweet_vector = vectorize(tweet)\n        prediction = predict_sentiment(tweet_vector)\n\n        # Append the prediction to the result list\n        if prediction == 1:\n            results.append(\"Positive\")\n        elif preduction == 0:\n            results.append(\"Negative\")\n\n    return results",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python algorithm to classify positive and negative sentiment in tweets.\n\n### Solution:\n```\ndef sentiment_analysis(tweets):\n    # Initialize a list to store the result \n    results = [] \n\n    # Iterate through each tweet\n    for tweet in tweets:\n        # Clean the tweet \n        tweet = preprocessing(tweet)\n\n        # Vectorize the tweet and obtain the prediction \n        tweet_vector = vectorize(tweet)\n        prediction = predict_sentiment(tweet_vector)\n\n        # Append the prediction to the result list\n        if prediction == 1:\n            results.append(\"Positive\")\n        elif preduction == 0:\n            results.append(\"Negative\")\n\n    return results\n```"
    },
    {
        "instruction": "Design an online voting system in Python that supports multiple choices.",
        "output": "import datetime\n\n# Voting_System class\nclass Voting_System:\n\n    # voting_options instance variable\n    def __init__(self, voting_options):\n        self.voting_options = voting_options\n\n    # Vote function\n    def vote(self, user_id, option_id):\n        if user_id not in self.voting_options.keys():\n            self.voting_options[user_id] = option_id\n            return True\n        else:\n            return False\n\n    # get_all_votes function\n    def get_all_votes(self):\n        return self.voting_options",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign an online voting system in Python that supports multiple choices.\n\n### Solution:\n```\nimport datetime\n\n# Voting_System class\nclass Voting_System:\n\n    # voting_options instance variable\n    def __init__(self, voting_options):\n        self.voting_options = voting_options\n\n    # Vote function\n    def vote(self, user_id, option_id):\n        if user_id not in self.voting_options.keys():\n            self.voting_options[user_id] = option_id\n            return True\n        else:\n            return False\n\n    # get_all_votes function\n    def get_all_votes(self):\n        return self.voting_options\n```"
    },
    {
        "instruction": "Write a Python program to calculate the area of a regular hexagon",
        "output": "import math\n\ndef calculateArea(side): \n    area = (3 * math.sqrt(3) * (side * side)) / 2\n    return area",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to calculate the area of a regular hexagon\n\n### Solution:\n```\nimport math\n\ndef calculateArea(side): \n    area = (3 * math.sqrt(3) * (side * side)) / 2\n    return area\n```"
    },
    {
        "instruction": "Create a class in Python to store temperature data.",
        "output": "class TemperatureData:\n    def __init__(self, temperature):\n        self.temperature = temperature\n\n    def get_temperature(self):\n        return self.temperature",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a class in Python to store temperature data.\n\n### Solution:\n```\nclass TemperatureData:\n    def __init__(self, temperature):\n        self.temperature = temperature\n\n    def get_temperature(self):\n        return self.temperature\n```"
    },
    {
        "instruction": "Develop an algorithm to remove the duplicate words in a given string.",
        "output": "def remove_duplicates(string): \n    words = string.split(\" \") \n    res = [] \n    for word in words: \n        if word not in res: \n            res.append(word) \n    return (\" \".join(res)) \n\nstring = \"I love coding love coding Python\"\nres = remove_duplicates(string) \nprint(\"String after removing duplicates:\")\nprint(res)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop an algorithm to remove the duplicate words in a given string.\n\n### Solution:\n```\ndef remove_duplicates(string): \n    words = string.split(\" \") \n    res = [] \n    for word in words: \n        if word not in res: \n            res.append(word) \n    return (\" \".join(res)) \n\nstring = \"I love coding love coding Python\"\nres = remove_duplicates(string) \nprint(\"String after removing duplicates:\")\nprint(res)\n```"
    },
    {
        "instruction": "Create a Python program to remove punctuations from the given sentence",
        "output": "import string\n\ndef remove_punctuations(sentence):\n    translator = str.maketrans('', '', string.punctuation)\n    return sentence.translate(translator)\n\nprint(remove_punctuations(\"He loves to eat Italian; pizza, pasta, and gelato\"))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to remove punctuations from the given sentence\n\n### Solution:\n```\nimport string\n\ndef remove_punctuations(sentence):\n    translator = str.maketrans('', '', string.punctuation)\n    return sentence.translate(translator)\n\nprint(remove_punctuations(\"He loves to eat Italian; pizza, pasta, and gelato\"))\n```"
    },
    {
        "instruction": "Construct an efficient algorithm to find all prime numbers up to a given number N in Python.",
        "output": "def sieve_of_eratosthenes(n): \n    # Create a boolean array \"prime[0..n]\" and initialize \n    #  all entries it as true. A value in prime[i] will \n    # finally be false if i is Not a prime, else true. \n    prime = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n        # If prime[p] is not changed, then it is a prime \n        if (prime[p] == True): \n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                prime[i] = False\n        p += 1\n  \n    # Print all prime numbers \n    result = []\n    for p in range(2, n): \n        if prime[p]: \n            result.append(p) \n  \n    return result\n\nN = 100\nprint(\"All prime numbers up to\", N, \"are:\")\nprint(sieve_of_eratosthenes(N))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConstruct an efficient algorithm to find all prime numbers up to a given number N in Python.\n\n### Solution:\n```\ndef sieve_of_eratosthenes(n): \n    # Create a boolean array \"prime[0..n]\" and initialize \n    #  all entries it as true. A value in prime[i] will \n    # finally be false if i is Not a prime, else true. \n    prime = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n        # If prime[p] is not changed, then it is a prime \n        if (prime[p] == True): \n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                prime[i] = False\n        p += 1\n  \n    # Print all prime numbers \n    result = []\n    for p in range(2, n): \n        if prime[p]: \n            result.append(p) \n  \n    return result\n\nN = 100\nprint(\"All prime numbers up to\", N, \"are:\")\nprint(sieve_of_eratosthenes(N))\n```"
    },
    {
        "instruction": "Write a Python script that takes a list of integers and checks if any two numbers sum up to a given target.",
        "output": "def checkSum(arr, target): \n for i in range(len(arr)): \n for j in range(i + 1, len(arr)): \n if arr[i] + arr[j] == target: \n return True\n\n return False\n\nnums = [3, 2, 5, 7]\ntarget = 9\n\nprint(checkSum(nums, target)) # output: True",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python script that takes a list of integers and checks if any two numbers sum up to a given target.\n\n### Solution:\n```\ndef checkSum(arr, target): \n for i in range(len(arr)): \n for j in range(i + 1, len(arr)): \n if arr[i] + arr[j] == target: \n return True\n\n return False\n\nnums = [3, 2, 5, 7]\ntarget = 9\n\nprint(checkSum(nums, target)) # output: True\n```"
    },
    {
        "instruction": "Write a python program that prints the number of days in a month.",
        "output": "# Function to calculate number of days in a month\ndef num_days_in_month(month, year):\n    # List of all months\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n              \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    \n    # List of all number of days in a month\n    num_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Check if the year is a leap year\n    if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):\n        num_of_days[1] = 29\n    \n    # Return the number of days\n    return num_of_days[months.index(month)]\n\n# Driver Code \nmonth = \"May\"\nyear = 2020\nprint(\"Number of days in {} {} are {}\".format(month, year, num_days_in_month(month, year)))\n\n# Output:\n# Number of days in May 2020 are 31",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a python program that prints the number of days in a month.\n\n### Solution:\n```\n# Function to calculate number of days in a month\ndef num_days_in_month(month, year):\n    # List of all months\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n              \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    \n    # List of all number of days in a month\n    num_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Check if the year is a leap year\n    if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):\n        num_of_days[1] = 29\n    \n    # Return the number of days\n    return num_of_days[months.index(month)]\n\n# Driver Code \nmonth = \"May\"\nyear = 2020\nprint(\"Number of days in {} {} are {}\".format(month, year, num_days_in_month(month, year)))\n\n# Output:\n# Number of days in May 2020 are 31\n```"
    },
    {
        "instruction": "Write a Python script to implement a linear search algorithm.",
        "output": "def linear_search(data, key):\n    for i in range(len(data)):\n        if data[i] == key:\n            return i\n    return -1\n\ndata = [5, 4, 2, 8, 7]\nkey = 7\n\nresult = linear_search(data, key)\n\nif result != -1:\n    print(\"Element found at \" + str(result))\nelse:\n    print(\"Element not found\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python script to implement a linear search algorithm.\n\n### Solution:\n```\ndef linear_search(data, key):\n    for i in range(len(data)):\n        if data[i] == key:\n            return i\n    return -1\n\ndata = [5, 4, 2, 8, 7]\nkey = 7\n\nresult = linear_search(data, key)\n\nif result != -1:\n    print(\"Element found at \" + str(result))\nelse:\n    print(\"Element not found\")\n```"
    },
    {
        "instruction": "Create a Python program that uses a given list of words to construct a poem.",
        "output": "def create_poem(words):\n    poem = \"\"\n    for word in words:\n        poem += word + \"\\n\"\n\n    poem += \"\\nSleep, dream and beauty\\nReality shatters in life\\nWhere dreams forevermore dwell\"\n    return poem\n\nprint(create_poem([\"Sleep\", \"Dream\", \"Reality\", \"Beauty\", \"Life\"]))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program that uses a given list of words to construct a poem.\n\n### Solution:\n```\ndef create_poem(words):\n    poem = \"\"\n    for word in words:\n        poem += word + \"\\n\"\n\n    poem += \"\\nSleep, dream and beauty\\nReality shatters in life\\nWhere dreams forevermore dwell\"\n    return poem\n\nprint(create_poem([\"Sleep\", \"Dream\", \"Reality\", \"Beauty\", \"Life\"]))\n```"
    },
    {
        "instruction": "Write a Python program to print out all the distinct elements of an array.",
        "output": "def print_distinct(lst):\n    seen = set()\n    distinct = []\n    for x in lst:\n        if x not in seen:\n            distinct.append(x)\n            seen.add(x)\n    print(distinct)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to print out all the distinct elements of an array.\n\n### Solution:\n```\ndef print_distinct(lst):\n    seen = set()\n    distinct = []\n    for x in lst:\n        if x not in seen:\n            distinct.append(x)\n            seen.add(x)\n    print(distinct)\n```"
    },
    {
        "instruction": "Convert an existing function from Python 3 to Python 2.",
        "output": "def check_anagram(string1, string2):\n    if(sorted(list(string1)) == sorted(list(string2))):\n        return True\n    else:\n        return False",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConvert an existing function from Python 3 to Python 2.\n\n### Solution:\n```\ndef check_anagram(string1, string2):\n    if(sorted(list(string1)) == sorted(list(string2))):\n        return True\n    else:\n        return False\n```"
    },
    {
        "instruction": "Write a Python program to generate a HTML table according to given data.",
        "output": "def generate_table(data):\n table = '<table>'\n for row in data:\n table += '<tr>'\n for cell in row:\n table += '<td>{}</td>'.format(cell)\n table += '</tr>'\n table += '</table>'\n\n return table\n\nprint(generate_table(data))\n# Output\n<table><tr><td>Name</td><td>Age</td></tr><tr><td>John</td><td>20</td></tr><tr><td>Jane</td><td>30</td></tr><tr><td>Tom</td><td>40</td></tr></table>",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to generate a HTML table according to given data.\n\n### Solution:\n```\ndef generate_table(data):\n table = '<table>'\n for row in data:\n table += '<tr>'\n for cell in row:\n table += '<td>{}</td>'.format(cell)\n table += '</tr>'\n table += '</table>'\n\n return table\n\nprint(generate_table(data))\n# Output\n<table><tr><td>Name</td><td>Age</td></tr><tr><td>John</td><td>20</td></tr><tr><td>Jane</td><td>30</td></tr><tr><td>Tom</td><td>40</td></tr></table>\n```"
    },
    {
        "instruction": "Create a Python program to check if an integer is divisible by 5",
        "output": "def is_divisible_by_5(number):\n    if (number % 5 == 0):\n        return True\n    else:\n        return False\n    \nnumber = 10\nis_divisible_by_5(number)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to check if an integer is divisible by 5\n\n### Solution:\n```\ndef is_divisible_by_5(number):\n    if (number % 5 == 0):\n        return True\n    else:\n        return False\n    \nnumber = 10\nis_divisible_by_5(number)\n```"
    },
    {
        "instruction": "Create a function in Python to generate a random data matrix with a given shape.",
        "output": "import numpy as np\n\ndef generate_random_matrix(rows, columns):\n    matrix = np.random.randint(low = 0, high = 100, size = (rows,columns))\n    return matrix",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a function in Python to generate a random data matrix with a given shape.\n\n### Solution:\n```\nimport numpy as np\n\ndef generate_random_matrix(rows, columns):\n    matrix = np.random.randint(low = 0, high = 100, size = (rows,columns))\n    return matrix\n```"
    },
    {
        "instruction": "Write a code to do sentiment analysis on a given sentence in Python.",
        "output": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsid = SentimentIntensityAnalyzer()\n\ngiven_sentence = \"I love spending time with my family\"\nscores = sid.polarity_scores(given_sentence)\nfor key in scores:\n    print('{0}: {1}, '.format(key, scores[key]), end='')\nprint()\n\nif scores['compound'] >= 0.05:\n    print(\"Positive Sentiment\")\nelif scores['compound'] <= -0.05:\n    print(\"Negative Sentiment\")\nelse:\n    print(\"Neutral Sentiment\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a code to do sentiment analysis on a given sentence in Python.\n\n### Solution:\n```\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsid = SentimentIntensityAnalyzer()\n\ngiven_sentence = \"I love spending time with my family\"\nscores = sid.polarity_scores(given_sentence)\nfor key in scores:\n    print('{0}: {1}, '.format(key, scores[key]), end='')\nprint()\n\nif scores['compound'] >= 0.05:\n    print(\"Positive Sentiment\")\nelif scores['compound'] <= -0.05:\n    print(\"Negative Sentiment\")\nelse:\n    print(\"Neutral Sentiment\")\n```"
    },
    {
        "instruction": "Generate a Python list comprehension that returns all even numbers in a given range.",
        "output": "even_nums = [num for num in range(start_num, end_num + 1) if num % 2 == 0]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python list comprehension that returns all even numbers in a given range.\n\n### Solution:\n```\neven_nums = [num for num in range(start_num, end_num + 1) if num % 2 == 0]\n```"
    },
    {
        "instruction": "Edit the program in Python, so it prints out the sum of the list of numbers and the average",
        "output": "arr = [10, 15, 20, 25]\n\ntotalSum = 0\nfor x in arr:\n    totalSum += x\n\nprint(\"Sum of the list: \"+str(totalSum)) \nprint(\"Average of the list: \"+str(totalSum/len(arr)))\n\nOutput:\nSum of the list: 70\nAverage of the list: 17.5",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nEdit the program in Python, so it prints out the sum of the list of numbers and the average\n\n### Solution:\n```\narr = [10, 15, 20, 25]\n\ntotalSum = 0\nfor x in arr:\n    totalSum += x\n\nprint(\"Sum of the list: \"+str(totalSum)) \nprint(\"Average of the list: \"+str(totalSum/len(arr)))\n\nOutput:\nSum of the list: 70\nAverage of the list: 17.5\n```"
    },
    {
        "instruction": "Generate a random password in Python with length of 8 characters with at least one lowercase, uppercase, number and special character.",
        "output": "import random \nimport string\n\ndef generatePassword(length):\n\n    password_characters = string.ascii_letters + string.digits + string.punctuation\n\n    password = ''.join(random.choice(password_characters) \n                       for i in range(length))\n    lowercase = [a for a in password if a.islower()]\n    uppercase = [b for b in password if b.isupper()]\n    number = [c for c in password if c.isdigit()]\n    special_character = [d for d in password if not d.isalnum()]\n\n    if len(lowercase) == 0 or len(uppercase) == 0 or len(number) == 0 or len(special_character) == 0 :\n        return generatePassword(length)\n    else:\n        return password\n\nprint(generatePassword(8))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a random password in Python with length of 8 characters with at least one lowercase, uppercase, number and special character.\n\n### Solution:\n```\nimport random \nimport string\n\ndef generatePassword(length):\n\n    password_characters = string.ascii_letters + string.digits + string.punctuation\n\n    password = ''.join(random.choice(password_characters) \n                       for i in range(length))\n    lowercase = [a for a in password if a.islower()]\n    uppercase = [b for b in password if b.isupper()]\n    number = [c for c in password if c.isdigit()]\n    special_character = [d for d in password if not d.isalnum()]\n\n    if len(lowercase) == 0 or len(uppercase) == 0 or len(number) == 0 or len(special_character) == 0 :\n        return generatePassword(length)\n    else:\n        return password\n\nprint(generatePassword(8))\n```"
    },
    {
        "instruction": "Generate a python program that takes two strings as input and outputs the longest common substring.",
        "output": "def longest_common_substring(s1, s2):\n    s1_length = len(s1)\n    s2_length = len(s2)\n  \n    matrix = [[0] * (s2_length + 1) for _ in range(s1_length + 1)]\n    longest, x_longest = 0, 0\n    for x in range(1, s1_length + 1):\n        for y in range(1, s2_length + 1):\n            if s1[x - 1] == s2[y - 1]:\n                matrix[x][y] = matrix[x - 1][y - 1] + 1\n                if matrix[x][y] > longest:\n                    longest = matrix[x][y]\n                    x_longest = x\n            else:\n                matrix[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\nlongest_common_substring(string1, string2) \n# output: 'Hello'",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a python program that takes two strings as input and outputs the longest common substring.\n\n### Solution:\n```\ndef longest_common_substring(s1, s2):\n    s1_length = len(s1)\n    s2_length = len(s2)\n  \n    matrix = [[0] * (s2_length + 1) for _ in range(s1_length + 1)]\n    longest, x_longest = 0, 0\n    for x in range(1, s1_length + 1):\n        for y in range(1, s2_length + 1):\n            if s1[x - 1] == s2[y - 1]:\n                matrix[x][y] = matrix[x - 1][y - 1] + 1\n                if matrix[x][y] > longest:\n                    longest = matrix[x][y]\n                    x_longest = x\n            else:\n                matrix[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\nlongest_common_substring(string1, string2) \n# output: 'Hello'\n```"
    },
    {
        "instruction": "Write a Python program to update a dictionary with the its key's length as the value.",
        "output": "mydict = {k: len(k) for k in mydict.keys()}",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to update a dictionary with the its key's length as the value.\n\n### Solution:\n```\nmydict = {k: len(k) for k in mydict.keys()}\n```"
    },
    {
        "instruction": "Write a Python program to convert a unix timestamp to UTC time.",
        "output": "import time\n\ntimestamp = 1594842400\nutc_time = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(timestamp))\n\nprint(utc_time) # Output: 2020-07-17 02:00:00",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to convert a unix timestamp to UTC time.\n\n### Solution:\n```\nimport time\n\ntimestamp = 1594842400\nutc_time = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(timestamp))\n\nprint(utc_time) # Output: 2020-07-17 02:00:00\n```"
    },
    {
        "instruction": "Write a Python script to download tweets from a given list of twitter accounts.",
        "output": "\"\"\"\nPython script to download tweets from a given list of twitter accounts.\n\"\"\"\n\nimport tweepy\n\ndef get_tweets(accounts):\n    # Authenticate with twitter\n    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n    auth.set_access_token(access_token, access_token_secret)\n    api = tweepy.API(auth)\n\n    # Get the latest tweets \n    all_tweets = []\n    for account in accounts:\n        tweets = api.user_timeline(screen_name=account, count=10)\n        all_tweets.extend(tweets)\n    \n    # Return the tweets as a list of dictionaries\n    return [tweet._json for tweet in all_tweets]\n\nif __name__ == '__main__':\n    accounts = ['USER1', 'USER2', 'USER3']\n    tweets = get_tweets(accounts)\n    print(tweets)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python script to download tweets from a given list of twitter accounts.\n\n### Solution:\n```\n\"\"\"\nPython script to download tweets from a given list of twitter accounts.\n\"\"\"\n\nimport tweepy\n\ndef get_tweets(accounts):\n    # Authenticate with twitter\n    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n    auth.set_access_token(access_token, access_token_secret)\n    api = tweepy.API(auth)\n\n    # Get the latest tweets \n    all_tweets = []\n    for account in accounts:\n        tweets = api.user_timeline(screen_name=account, count=10)\n        all_tweets.extend(tweets)\n    \n    # Return the tweets as a list of dictionaries\n    return [tweet._json for tweet in all_tweets]\n\nif __name__ == '__main__':\n    accounts = ['USER1', 'USER2', 'USER3']\n    tweets = get_tweets(accounts)\n    print(tweets)\n```"
    },
    {
        "instruction": "Design a Python program to calculate Fibonacci sequence for n number of terms, with n given by user.",
        "output": "def fibonacci(n):\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)\n\nn = int(input(\"Enter number of terms for Fibonacci sequence: \"))\n\nprint(\"Fibonacci sequence:\")\nfor i in range(n):\n  print(fibonacci(i))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a Python program to calculate Fibonacci sequence for n number of terms, with n given by user.\n\n### Solution:\n```\ndef fibonacci(n):\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)\n\nn = int(input(\"Enter number of terms for Fibonacci sequence: \"))\n\nprint(\"Fibonacci sequence:\")\nfor i in range(n):\n  print(fibonacci(i))\n```"
    },
    {
        "instruction": "Create a program in Python to classify the age of a human using Machine Learning.",
        "output": "# Load data\ndata = np.array(data)\n\n# Labels\nlabels = np.array([0, 1, 0, 1, 0, 0, 1, 0])\n\n# Create training and testing data\nX_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=0)\n\n# Train the model\nclf = SVC()\nclf.fit(X_train, y_train)\n\n# Test the model\ny_pred = clf.predict(X_test)\n\n# Print accuracy\nprint(\"Accuracy: {}\".format(accuracy_score(y_test, y_pred)))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a program in Python to classify the age of a human using Machine Learning.\n\n### Solution:\n```\n# Load data\ndata = np.array(data)\n\n# Labels\nlabels = np.array([0, 1, 0, 1, 0, 0, 1, 0])\n\n# Create training and testing data\nX_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=0)\n\n# Train the model\nclf = SVC()\nclf.fit(X_train, y_train)\n\n# Test the model\ny_pred = clf.predict(X_test)\n\n# Print accuracy\nprint(\"Accuracy: {}\".format(accuracy_score(y_test, y_pred)))\n```"
    },
    {
        "instruction": "Create a Python program that generates a crossword puzzle with random words",
        "output": "\"\"\"\nCreate a Python program that generates a crossword puzzle with random words\n\"\"\"\nimport string\nimport random\n\ndef generate_crossword():\n    # Generate a 10x10 2D array\n    puzzle = [['_' for i in range(10)] for j in range(10)]\n    \n    characters = string.ascii_uppercase + string.ascii_lowercase\n    # Populate the array with random letters\n    for i in range(10):\n        for j in range(10):\n            puzzle[i][j] = random.choice(characters)\n    \n    # Check the random letters and replace them with words where possible\n    \n    \n    # Return the puzzle\n    return puzzle\n\nif __name__ == '__main__':\n    generate_crossword()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program that generates a crossword puzzle with random words\n\n### Solution:\n```\n\"\"\"\nCreate a Python program that generates a crossword puzzle with random words\n\"\"\"\nimport string\nimport random\n\ndef generate_crossword():\n    # Generate a 10x10 2D array\n    puzzle = [['_' for i in range(10)] for j in range(10)]\n    \n    characters = string.ascii_uppercase + string.ascii_lowercase\n    # Populate the array with random letters\n    for i in range(10):\n        for j in range(10):\n            puzzle[i][j] = random.choice(characters)\n    \n    # Check the random letters and replace them with words where possible\n    \n    \n    # Return the puzzle\n    return puzzle\n\nif __name__ == '__main__':\n    generate_crossword()\n```"
    },
    {
        "instruction": "Given a list of numbers, write a python program that finds an index of an array element and its corresponding value.",
        "output": "def find_index_and_value(my_list):\n    for i, num in enumerate(my_list):\n        print(\"Element with index %d has value %d\" % (i, num))\n\nmy_list = [2,4,6,8,10]\nfind_index_and_value(my_list)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGiven a list of numbers, write a python program that finds an index of an array element and its corresponding value.\n\n### Solution:\n```\ndef find_index_and_value(my_list):\n    for i, num in enumerate(my_list):\n        print(\"Element with index %d has value %d\" % (i, num))\n\nmy_list = [2,4,6,8,10]\nfind_index_and_value(my_list)\n```"
    },
    {
        "instruction": "Construct a single line of code in python to get the last element of a list",
        "output": "last_element = [1, 8, 3, 10, 5][-1]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConstruct a single line of code in python to get the last element of a list\n\n### Solution:\n```\nlast_element = [1, 8, 3, 10, 5][-1]\n```"
    },
    {
        "instruction": "Generate code in Python to remove a given element from a given list.",
        "output": "list = [2, 3, 4, 5, 6]\n\nlist.remove(5)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate code in Python to remove a given element from a given list.\n\n### Solution:\n```\nlist = [2, 3, 4, 5, 6]\n\nlist.remove(5)\n```"
    },
    {
        "instruction": "Write a Python program that prints all prime numbers up to a given number n.",
        "output": "def prime_numbers(n):\n for i in range(2,n+1):\n prime = True\n for j in range(2,i):\n if i % j == 0:\n prime = False\n if prime:\n print(i)\n \nprime_numbers(10) # Output: 2, 3, 5, 7",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program that prints all prime numbers up to a given number n.\n\n### Solution:\n```\ndef prime_numbers(n):\n for i in range(2,n+1):\n prime = True\n for j in range(2,i):\n if i % j == 0:\n prime = False\n if prime:\n print(i)\n \nprime_numbers(10) # Output: 2, 3, 5, 7\n```"
    },
    {
        "instruction": "Design and implement a Python class that stores words and their meanings as a dictionary.",
        "output": "class Dictionary (object):\n    def __init__(self):\n        self.data = {} #initialize empty dictionary\n\n    def add(self, word, definition):\n        self.data[word] = definition #add a new word, definition pair\n\n    def remove(self, word):\n        if word in self.data:\n            del self.data[word] #removes a word, definition pair\n\n    def print_all(self):\n        for word in self.data.keys():\n            print(word + ':', self.data[word]) #prints all words, definitions stored",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign and implement a Python class that stores words and their meanings as a dictionary.\n\n### Solution:\n```\nclass Dictionary (object):\n    def __init__(self):\n        self.data = {} #initialize empty dictionary\n\n    def add(self, word, definition):\n        self.data[word] = definition #add a new word, definition pair\n\n    def remove(self, word):\n        if word in self.data:\n            del self.data[word] #removes a word, definition pair\n\n    def print_all(self):\n        for word in self.data.keys():\n            print(word + ':', self.data[word]) #prints all words, definitions stored\n```"
    },
    {
        "instruction": "Edit the following Python code to re-rank the numbers in descending order.",
        "output": "numbers = [4, 7, 2, 3]\nnumbers.sort(reverse=True)\nprint(numbers)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nEdit the following Python code to re-rank the numbers in descending order.\n\n### Solution:\n```\nnumbers = [4, 7, 2, 3]\nnumbers.sort(reverse=True)\nprint(numbers)\n```"
    },
    {
        "instruction": "Write an Algorithm in Python that takes in a comma-separated string of numbers and returns the sum of the numbers.",
        "output": "def sumString(s):\n nums = s.split(',')\n total = 0\n for num in nums:\n total += int(num)\n return total",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite an Algorithm in Python that takes in a comma-separated string of numbers and returns the sum of the numbers.\n\n### Solution:\n```\ndef sumString(s):\n nums = s.split(',')\n total = 0\n for num in nums:\n total += int(num)\n return total\n```"
    },
    {
        "instruction": "Develop a program in Python to detect the outliers of a given dataset.",
        "output": "import numpy as np \n\n# Load dataset \ndata = np.genfromtxt(\"data.csv\", delimiter=\",\") \n\n# Calculate interquartile range \nQ1 = np.percentile(data, 25) \nQ3 = np.percentile(data, 75) \n\n# Interquartile range \nIQR = Q3 - Q1 \n\n# Remove outliers \noutliers = (data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))\n\n# Print outliers \nprint(data[outliers])",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop a program in Python to detect the outliers of a given dataset.\n\n### Solution:\n```\nimport numpy as np \n\n# Load dataset \ndata = np.genfromtxt(\"data.csv\", delimiter=\",\") \n\n# Calculate interquartile range \nQ1 = np.percentile(data, 25) \nQ3 = np.percentile(data, 75) \n\n# Interquartile range \nIQR = Q3 - Q1 \n\n# Remove outliers \noutliers = (data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))\n\n# Print outliers \nprint(data[outliers])\n```"
    },
    {
        "instruction": "Write a Python program for a program that checks if two strings are palindromes.",
        "output": "def is_palindrome(str1, str2):\n # Reverse str1\n reverse_str1 = str1[::-1]\n\n # Check if str1 is the same as the reversed version of str2\n if reverse_str1 == str2:\n return True\n else:\n return False\n\n# Sample input\nstr1 = 'radar'\nstr2 = 'dad'\n\n# Check if the strings are palindromes\nprint(is_palindrome(str1, str2)) # Output: True",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program for a program that checks if two strings are palindromes.\n\n### Solution:\n```\ndef is_palindrome(str1, str2):\n # Reverse str1\n reverse_str1 = str1[::-1]\n\n # Check if str1 is the same as the reversed version of str2\n if reverse_str1 == str2:\n return True\n else:\n return False\n\n# Sample input\nstr1 = 'radar'\nstr2 = 'dad'\n\n# Check if the strings are palindromes\nprint(is_palindrome(str1, str2)) # Output: True\n```"
    },
    {
        "instruction": "Design a Python program which can pre-process a given dataset of text for further processing by a machine learning model.",
        "output": "\"\"\"\nDesign a Python program which can pre-process a given dataset of text for further processing by a machine learning model.\n\"\"\"\n\nimport re\nimport nltk\n\ndef preprocess_text(text):\n     # lower case\n    text = text.lower()\n\n    # remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # tokenize\n    tokens = nltk.tokenize.word_tokenize(text)\n\n    # remove stopwords\n    words = [word for word in tokens if not word in nltk.corpus.stopwords.words('english')]\n    \n    # lemmatize\n    lemmatizer = nltk.stem.WordNetLemmatizer()\n    words = [lemmatizer.lemmatize(word) for word in words]\n\n    return words\n\nif __name__ == '__main__':\n    text = 'hello world! My name is John.'\n    preprocessed = preprocess_text(text)\n    print(preprocessed)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a Python program which can pre-process a given dataset of text for further processing by a machine learning model.\n\n### Solution:\n```\n\"\"\"\nDesign a Python program which can pre-process a given dataset of text for further processing by a machine learning model.\n\"\"\"\n\nimport re\nimport nltk\n\ndef preprocess_text(text):\n     # lower case\n    text = text.lower()\n\n    # remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # tokenize\n    tokens = nltk.tokenize.word_tokenize(text)\n\n    # remove stopwords\n    words = [word for word in tokens if not word in nltk.corpus.stopwords.words('english')]\n    \n    # lemmatize\n    lemmatizer = nltk.stem.WordNetLemmatizer()\n    words = [lemmatizer.lemmatize(word) for word in words]\n\n    return words\n\nif __name__ == '__main__':\n    text = 'hello world! My name is John.'\n    preprocessed = preprocess_text(text)\n    print(preprocessed)\n```"
    },
    {
        "instruction": "Can you convert this Python code to Ruby?",
        "output": "def my_func(a, b)\n  a + b\nend",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCan you convert this Python code to Ruby?\n\n### Solution:\n```\ndef my_func(a, b)\n  a + b\nend\n```"
    },
    {
        "instruction": "Create a program in Python to multiply all numbers in a list by a given number and return the result as a new list.",
        "output": "def multiplyListByNumber(list, number):\n  return [element*number for element in list]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a program in Python to multiply all numbers in a list by a given number and return the result as a new list.\n\n### Solution:\n```\ndef multiplyListByNumber(list, number):\n  return [element*number for element in list]\n```"
    },
    {
        "instruction": "Generate a unique identifier in Python",
        "output": "import uuid\n\ndef generateUniqueId():\n return str(uuid.uuid4())\n\nuniqueId = generateUniqueId()\nprint(uniqueId)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a unique identifier in Python\n\n### Solution:\n```\nimport uuid\n\ndef generateUniqueId():\n return str(uuid.uuid4())\n\nuniqueId = generateUniqueId()\nprint(uniqueId)\n```"
    },
    {
        "instruction": "Design a Python function to evaluate the number of underlying characters in a string.",
        "output": "def getNumberOfChars(String):\n    total_len = 0\n    for word in string.split():\n        total_len += len(word)\n    return total_len",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a Python function to evaluate the number of underlying characters in a string.\n\n### Solution:\n```\ndef getNumberOfChars(String):\n    total_len = 0\n    for word in string.split():\n        total_len += len(word)\n    return total_len\n```"
    },
    {
        "instruction": "Create a Python function to score the similarity between two strings.",
        "output": "def score_similarity(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][m] / (n + m)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python function to score the similarity between two strings.\n\n### Solution:\n```\ndef score_similarity(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][m] / (n + m)\n```"
    },
    {
        "instruction": "Write a Python function to convert USD to Euro and print the new value to the console.",
        "output": "def usd_to_euro(amount):\n  euro = amount * 0.9\n  print(amount, \"USD is equal to\", euro, \"Euros.\")\n  \nusd_to_euro(12.5)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python function to convert USD to Euro and print the new value to the console.\n\n### Solution:\n```\ndef usd_to_euro(amount):\n  euro = amount * 0.9\n  print(amount, \"USD is equal to\", euro, \"Euros.\")\n  \nusd_to_euro(12.5)\n```"
    },
    {
        "instruction": "Generate a class that models a car in Python.",
        "output": "class Car:\n def __init__(self, make, model, year):\n  self.make = make\n  self.model = model\n  self.year = year\n \n def get_make(self):\n  return self.make\n \n def get_model(self):\n  return self.model\n \n def get_year(self):\n  return self.year",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a class that models a car in Python.\n\n### Solution:\n```\nclass Car:\n def __init__(self, make, model, year):\n  self.make = make\n  self.model = model\n  self.year = year\n \n def get_make(self):\n  return self.make\n \n def get_model(self):\n  return self.model\n \n def get_year(self):\n  return self.year\n```"
    },
    {
        "instruction": "Create a function in Python to create a wordcount of a given text.",
        "output": "def wordcount(text):\n    counts = dict()\n    words = text.split()\n\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n\n    return counts\n\nprint(wordcount(text))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a function in Python to create a wordcount of a given text.\n\n### Solution:\n```\ndef wordcount(text):\n    counts = dict()\n    words = text.split()\n\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n\n    return counts\n\nprint(wordcount(text))\n```"
    },
    {
        "instruction": "Design a program in Python to filter the elements from a list which are not divisible by 3.",
        "output": "def filter_list(arr):\n    filtered_list = []\n    for num in arr:\n        if num % 3 != 0:\n            filtered_list.append(num)\n    return filtered_list\n\nprint(filter_list([2, 3, 4, 5, 6, 7, 8, 9]))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a program in Python to filter the elements from a list which are not divisible by 3.\n\n### Solution:\n```\ndef filter_list(arr):\n    filtered_list = []\n    for num in arr:\n        if num % 3 != 0:\n            filtered_list.append(num)\n    return filtered_list\n\nprint(filter_list([2, 3, 4, 5, 6, 7, 8, 9]))\n```"
    },
    {
        "instruction": "Find the most expensive item from the given list using Python.",
        "output": "most_expensive_item = max(list_of_items, key=lambda x: x['price'])",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nFind the most expensive item from the given list using Python.\n\n### Solution:\n```\nmost_expensive_item = max(list_of_items, key=lambda x: x['price'])\n```"
    },
    {
        "instruction": "Compose a Python Code to swap two numbers without using a temporary variable.",
        "output": "# Input two numbers\na = 10\nb = 5\n\n# Swapping using bitwise operator\na = a ^ b \nb = a ^ b \na = a ^ b \n\n# Printing output\nprint(\"a =\", a) \nprint(\"b =\", b)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCompose a Python Code to swap two numbers without using a temporary variable.\n\n### Solution:\n```\n# Input two numbers\na = 10\nb = 5\n\n# Swapping using bitwise operator\na = a ^ b \nb = a ^ b \na = a ^ b \n\n# Printing output\nprint(\"a =\", a) \nprint(\"b =\", b)\n```"
    },
    {
        "instruction": "Create a TextBlob classifier in Python which takes in a string and outputs whether the sentiment of the string is positive or negative.",
        "output": "from textblob import TextBlob\n\nclass SentimentClassifier:\n\n def classify(self, text):\n  # Create TextBlob object\n  analysis = TextBlob(text)\n  # Set sentiment \n  if analysis.sentiment[0]>0: \n   return 'positive'\n  elif analysis.sentiment[0]<0: \n   return 'negative'\n  else: \n   return 'neutral'",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a TextBlob classifier in Python which takes in a string and outputs whether the sentiment of the string is positive or negative.\n\n### Solution:\n```\nfrom textblob import TextBlob\n\nclass SentimentClassifier:\n\n def classify(self, text):\n  # Create TextBlob object\n  analysis = TextBlob(text)\n  # Set sentiment \n  if analysis.sentiment[0]>0: \n   return 'positive'\n  elif analysis.sentiment[0]<0: \n   return 'negative'\n  else: \n   return 'neutral'\n```"
    },
    {
        "instruction": "Optimize a given piece of Python code so that it runs faster without compromising on the integrity of the output.",
        "output": "def get_elements(numbers_list):\n result = []\n for x in range(0, len(numbers_list), 2):\n result.append(numbers_list[x])\n return result",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nOptimize a given piece of Python code so that it runs faster without compromising on the integrity of the output.\n\n### Solution:\n```\ndef get_elements(numbers_list):\n result = []\n for x in range(0, len(numbers_list), 2):\n result.append(numbers_list[x])\n return result\n```"
    },
    {
        "instruction": "Train a recurrent neural network in Python to generate a text summary of a given article",
        "output": "import tensorflow as tf\nfrom tensorflow.keras.layers import Input, Dense, Embedding, GRU, Dropout\n\ndef build_model(vocab_size, embedding_dim):\n    model = tf.keras.Sequential()\n    # Embedding layer\n    model.add(Embedding(vocab_size, embedding_dim, input_length=500))\n    # GRU layer\n    model.add(GRU(128, dropout=0.25))\n    # Dropout layer\n    model.add(Dropout(0.5))\n    # Output layer\n    model.add(Dense(vocab_size, activation='softmax'))\n    return model",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nTrain a recurrent neural network in Python to generate a text summary of a given article\n\n### Solution:\n```\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Input, Dense, Embedding, GRU, Dropout\n\ndef build_model(vocab_size, embedding_dim):\n    model = tf.keras.Sequential()\n    # Embedding layer\n    model.add(Embedding(vocab_size, embedding_dim, input_length=500))\n    # GRU layer\n    model.add(GRU(128, dropout=0.25))\n    # Dropout layer\n    model.add(Dropout(0.5))\n    # Output layer\n    model.add(Dense(vocab_size, activation='softmax'))\n    return model\n```"
    },
    {
        "instruction": "Given an array of strings, write a Python function to remove all duplicates and return the resulting array.",
        "output": "def removeDuplicates(arr):\n result = [] \n  \n # traverse for all elements \n for i in arr: \n  \n  # check if exists in result \n  if i not in result: \n   result.append(i) \n  \n # return result \n return result",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGiven an array of strings, write a Python function to remove all duplicates and return the resulting array.\n\n### Solution:\n```\ndef removeDuplicates(arr):\n result = [] \n  \n # traverse for all elements \n for i in arr: \n  \n  # check if exists in result \n  if i not in result: \n   result.append(i) \n  \n # return result \n return result\n```"
    },
    {
        "instruction": "Create a function in python that takes two integers as inputs and outputs the greatest common divisor.",
        "output": "def gcd(x, y): \n  \n   while(y): \n       x, y = y, x % y \n  \n   return x \n  \n # driver code  \nx = 105\ny = 45 \nprint(\"The gcd of\", x,  \n                        \"and\", y, \"is\", gcd(x, y))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a function in python that takes two integers as inputs and outputs the greatest common divisor.\n\n### Solution:\n```\ndef gcd(x, y): \n  \n   while(y): \n       x, y = y, x % y \n  \n   return x \n  \n # driver code  \nx = 105\ny = 45 \nprint(\"The gcd of\", x,  \n                        \"and\", y, \"is\", gcd(x, y))\n```"
    },
    {
        "instruction": "Write a Python program to parse an HTML document and extract text content from the document.",
        "output": "from bs4 import BeautifulSoup\n\nhtml_doc = \"\"\"\n<div>\n\t<p>This is some text.</p>\n\t<p>This is another text.</p>\n\t<div>\n\t\t<span>Some more text.</span>\n\t</div>\n</div>\n\"\"\"\n\nsoup = BeautifulSoup(html_doc)\n\ntext = soup.get_text()\n\n# Output\n# This is some text.\n# This is another text.\n# Some more text.",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to parse an HTML document and extract text content from the document.\n\n### Solution:\n```\nfrom bs4 import BeautifulSoup\n\nhtml_doc = \"\"\"\n<div>\n\t<p>This is some text.</p>\n\t<p>This is another text.</p>\n\t<div>\n\t\t<span>Some more text.</span>\n\t</div>\n</div>\n\"\"\"\n\nsoup = BeautifulSoup(html_doc)\n\ntext = soup.get_text()\n\n# Output\n# This is some text.\n# This is another text.\n# Some more text.\n```"
    },
    {
        "instruction": "Construct a Python dictionary that has the value \"hello\" assigned to the key \"word\".",
        "output": "my_dict = {\n    \"word\": \"hello\"\n}",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConstruct a Python dictionary that has the value \"hello\" assigned to the key \"word\".\n\n### Solution:\n```\nmy_dict = {\n    \"word\": \"hello\"\n}\n```"
    },
    {
        "instruction": "Implement a sorting algorithm in Python to sort an array of integers.",
        "output": "def sort(ary):\n    # Iterate over each item in the array\n    for i in range(len(ary)):\n        min_index = i\n        # Find the minimum value in the subarray from i to the end of the array\n        for j in range(i + 1, len(ary)):\n            if ary[j] < ary[min_index]:\n                min_index = j\n        # Swap the values\n        ary[i], ary[min_index] = ary[min_index], ary[i]\n\nsort(ary)\nprint(ary) # Output: [1, 3, 5, 7, 9]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nImplement a sorting algorithm in Python to sort an array of integers.\n\n### Solution:\n```\ndef sort(ary):\n    # Iterate over each item in the array\n    for i in range(len(ary)):\n        min_index = i\n        # Find the minimum value in the subarray from i to the end of the array\n        for j in range(i + 1, len(ary)):\n            if ary[j] < ary[min_index]:\n                min_index = j\n        # Swap the values\n        ary[i], ary[min_index] = ary[min_index], ary[i]\n\nsort(ary)\nprint(ary) # Output: [1, 3, 5, 7, 9]\n```"
    },
    {
        "instruction": "Design a Python script to remove any overlapping words in two string and join them into a single string.",
        "output": "def remove_overlap(string1, string2): \n    #split string1 into a list of words\n    words1 = string1.split()\n    #split string2 into a list of words\n    words2 = string2.split()\n    #initialize an empty list\n    result = []\n    #compare between the two words list \n    for word in words1:\n        if word not in words2:\n            result.append(word)\n    #join string2 into the result list\n    result = result + words2\n    # join the result list into a single string\n    new_string = ' '.join(result)\n  \n    return new_string\n\n#call the remove_overlap()function\nresult = remove_overlap(string1, string2)\nprint(result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a Python script to remove any overlapping words in two string and join them into a single string.\n\n### Solution:\n```\ndef remove_overlap(string1, string2): \n    #split string1 into a list of words\n    words1 = string1.split()\n    #split string2 into a list of words\n    words2 = string2.split()\n    #initialize an empty list\n    result = []\n    #compare between the two words list \n    for word in words1:\n        if word not in words2:\n            result.append(word)\n    #join string2 into the result list\n    result = result + words2\n    # join the result list into a single string\n    new_string = ' '.join(result)\n  \n    return new_string\n\n#call the remove_overlap()function\nresult = remove_overlap(string1, string2)\nprint(result)\n```"
    },
    {
        "instruction": "Create a function in Python to calculate the standard deviation from a given array of numbers.",
        "output": "def compute_std_dev(nums): \n\tmean = sum(nums) / len(nums)\n\tvariance = 0\n\tfor n in nums:\n\t\tvariance += (n - mean) ** 2\n\tvariance /= len(nums)\n\n\tstd_dev = variance ** 0.5\n\treturn std_dev",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a function in Python to calculate the standard deviation from a given array of numbers.\n\n### Solution:\n```\ndef compute_std_dev(nums): \n\tmean = sum(nums) / len(nums)\n\tvariance = 0\n\tfor n in nums:\n\t\tvariance += (n - mean) ** 2\n\tvariance /= len(nums)\n\n\tstd_dev = variance ** 0.5\n\treturn std_dev\n```"
    },
    {
        "instruction": "Write a Python program that takes a sequence of strings, sorts them alphabetically, and prints them to the console.",
        "output": "sequence = [\"Hello\", \"world\", \"Welcome\", \"to\", \"the\", \"Coding\", \"Revolution\"]\n\nsorted_sequence = sorted(sequence)\n\nfor word in sorted_sequence:\n    print(word)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program that takes a sequence of strings, sorts them alphabetically, and prints them to the console.\n\n### Solution:\n```\nsequence = [\"Hello\", \"world\", \"Welcome\", \"to\", \"the\", \"Coding\", \"Revolution\"]\n\nsorted_sequence = sorted(sequence)\n\nfor word in sorted_sequence:\n    print(word)\n```"
    },
    {
        "instruction": "Write a code to display prime numbers between two given numbers using python.",
        "output": "def displayPrime(start, end): \n    for i in range(start, end + 1): \n        if isPrime(i): \n            print(i)\n          \ndef isPrime(n): \n    if n <= 1: \n        return False\n    for i in range(2, n): \n        if n % i == 0: \n            return False  \n    return True\n    \nif __name__ == '__main__': \n    start = 1\n    end = 10\n    displayPrime(start, end) # 2, 3, 5, 7",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a code to display prime numbers between two given numbers using python.\n\n### Solution:\n```\ndef displayPrime(start, end): \n    for i in range(start, end + 1): \n        if isPrime(i): \n            print(i)\n          \ndef isPrime(n): \n    if n <= 1: \n        return False\n    for i in range(2, n): \n        if n % i == 0: \n            return False  \n    return True\n    \nif __name__ == '__main__': \n    start = 1\n    end = 10\n    displayPrime(start, end) # 2, 3, 5, 7\n```"
    },
    {
        "instruction": "Generate a python program that takes input as a string and prints out each word in the string in reverse order.",
        "output": "# Take input\ntext = input('Enter a string: ')\n\n# Split string into words\nwords = text.split(' ') \n\n# Reverse order\nwords.reverse() \n\n# Print\nfor word in words:\n print(word)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a python program that takes input as a string and prints out each word in the string in reverse order.\n\n### Solution:\n```\n# Take input\ntext = input('Enter a string: ')\n\n# Split string into words\nwords = text.split(' ') \n\n# Reverse order\nwords.reverse() \n\n# Print\nfor word in words:\n print(word)\n```"
    },
    {
        "instruction": "Write a Python program for generating random passwords. The program should allow the user to specify a length and should contain a mix of upper and lowercase letters, numbers, and symbols.",
        "output": "import string\nimport random\n\ndef generate_random_password(length):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.sample(characters, length))\n\npassword_length = 6\npassword = generate_random_password(password_length)\nprint(password)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program for generating random passwords. The program should allow the user to specify a length and should contain a mix of upper and lowercase letters, numbers, and symbols.\n\n### Solution:\n```\nimport string\nimport random\n\ndef generate_random_password(length):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.sample(characters, length))\n\npassword_length = 6\npassword = generate_random_password(password_length)\nprint(password)\n```"
    },
    {
        "instruction": "Create a Selenium test automation script in Python for verifying a user login.",
        "output": "from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\ndriver = webdriver.Chrome()\ndriver.get('https://www.example.com/login')\n\nusername_field = driver.find_element_by_name('username')\npassword_field = driver.find_element_by_name('password')\n\nusername_field.send_keys('example_username')\npassword_field.send_keys('example_password')\n\ndriver.find_element_by_xpath(\"//button[text()='Log in']\").click()\n\nWebDriverWait(driver, 10).until_not(EC.url_changes('https://www.example.com/login'))\n\nassert driver.current_url == 'https://www.example.com/home'",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Selenium test automation script in Python for verifying a user login.\n\n### Solution:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\ndriver = webdriver.Chrome()\ndriver.get('https://www.example.com/login')\n\nusername_field = driver.find_element_by_name('username')\npassword_field = driver.find_element_by_name('password')\n\nusername_field.send_keys('example_username')\npassword_field.send_keys('example_password')\n\ndriver.find_element_by_xpath(\"//button[text()='Log in']\").click()\n\nWebDriverWait(driver, 10).until_not(EC.url_changes('https://www.example.com/login'))\n\nassert driver.current_url == 'https://www.example.com/home'\n```"
    },
    {
        "instruction": "Create a Python program to store information of a student like name, age and marks in three different variables and print the stored values.",
        "output": "name = \"John\"\nage = 15\nmarks = 90\n\nprint(\"Name: \", name)\nprint(\"Age: \", age)\nprint(\"Marks: \", marks)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to store information of a student like name, age and marks in three different variables and print the stored values.\n\n### Solution:\n```\nname = \"John\"\nage = 15\nmarks = 90\n\nprint(\"Name: \", name)\nprint(\"Age: \", age)\nprint(\"Marks: \", marks)\n```"
    },
    {
        "instruction": "Generate a Python program to check if any element of a given list is palindrome or not.",
        "output": "list1 = [12, 121, 3]\n\n# Iterate through the list\nfor element in list1:\n    # Convert the element to a string\n    element = str(element)\n    \n    # Check if the element is a palindrome\n    if element == element[::-1]:\n        print(element + \" is a palindrome\")\n    else:\n        print(element + \" is not a palindrome\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python program to check if any element of a given list is palindrome or not.\n\n### Solution:\n```\nlist1 = [12, 121, 3]\n\n# Iterate through the list\nfor element in list1:\n    # Convert the element to a string\n    element = str(element)\n    \n    # Check if the element is a palindrome\n    if element == element[::-1]:\n        print(element + \" is a palindrome\")\n    else:\n        print(element + \" is not a palindrome\")\n```"
    },
    {
        "instruction": "Create a neural network class in Python to model a linear regression function.",
        "output": "import numpy as np\nclass LinearRegressionModel:\n    def __init__(self, input_dim, output_dim):\n        ''' Initialises the weights and bias of the linear regression model\n        Arguments:\n            input_dim {int} -- Number of input features\n            output_dim {int} -- Number of outputs\n        '''\n        self.weights = np.zeros((input_dim, output_dim))\n        self.bias = np.zeros((1, output_dim))\n\n    def forward(self, x):\n        ''' Calculates the forward pass of the linear regression model\n        Arguments:\n            x {numpy array} -- Input data of size (N, input_dim)\n        Returns:\n            out {numpy array} -- Output of the linear regression model of size (N, output_dim)\n        '''\n        out = np.dot(x, self.weights) + self.bias\n        return out",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a neural network class in Python to model a linear regression function.\n\n### Solution:\n```\nimport numpy as np\nclass LinearRegressionModel:\n    def __init__(self, input_dim, output_dim):\n        ''' Initialises the weights and bias of the linear regression model\n        Arguments:\n            input_dim {int} -- Number of input features\n            output_dim {int} -- Number of outputs\n        '''\n        self.weights = np.zeros((input_dim, output_dim))\n        self.bias = np.zeros((1, output_dim))\n\n    def forward(self, x):\n        ''' Calculates the forward pass of the linear regression model\n        Arguments:\n            x {numpy array} -- Input data of size (N, input_dim)\n        Returns:\n            out {numpy array} -- Output of the linear regression model of size (N, output_dim)\n        '''\n        out = np.dot(x, self.weights) + self.bias\n        return out\n```"
    },
    {
        "instruction": "Generate a python program to calculate the square root of a number",
        "output": "def sqrt_calc(num):\n    return num**0.5",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a python program to calculate the square root of a number\n\n### Solution:\n```\ndef sqrt_calc(num):\n    return num**0.5\n```"
    },
    {
        "instruction": "Use a machine learning algorithm to classify emails into two categories: junk and non-junk using Python.",
        "output": "from sklearn.naive_bayes import MultinomialNB\n\n# Load training data\nX_train = ...\ny_train = ...\n\n# Create classifier\nclf = MultinomialNB()   \n\n# Train the classifier\nclf.fit(X_train, y_train)   \n\n# Make predictions\ny_predicted = clf.predict(X_test)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nUse a machine learning algorithm to classify emails into two categories: junk and non-junk using Python.\n\n### Solution:\n```\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load training data\nX_train = ...\ny_train = ...\n\n# Create classifier\nclf = MultinomialNB()   \n\n# Train the classifier\nclf.fit(X_train, y_train)   \n\n# Make predictions\ny_predicted = clf.predict(X_test)\n```"
    },
    {
        "instruction": "Create a Python program to compress a given string by replacing all repeating characters with a single instance and its count.",
        "output": "def compress(s): \n    # Initialize results \n    output = \"\" \n  \n    # Initialize count \n    count = 1\n  \n    # Traverse the string \n    for i in range(len(s)): \n          \n        # If the current character is same \n        # as next one, increment its count \n        if (i+1 < len(s) and s[i] == s[i+1]): \n            count += 1\n          \n        else: \n            # Append the count and character \n            outputo + = str(count) + s[i] \n          \n            # Reset the  count  \n            count = 1\n          \n    # Append the last obtained characters \n    # and their count \n    output += str(count) + s[i] \n  \n    return output\n\ns = \"aabbbbbbcccc\"\nprint(compress(s))\n# Output: 2a6b4c",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to compress a given string by replacing all repeating characters with a single instance and its count.\n\n### Solution:\n```\ndef compress(s): \n    # Initialize results \n    output = \"\" \n  \n    # Initialize count \n    count = 1\n  \n    # Traverse the string \n    for i in range(len(s)): \n          \n        # If the current character is same \n        # as next one, increment its count \n        if (i+1 < len(s) and s[i] == s[i+1]): \n            count += 1\n          \n        else: \n            # Append the count and character \n            outputo + = str(count) + s[i] \n          \n            # Reset the  count  \n            count = 1\n          \n    # Append the last obtained characters \n    # and their count \n    output += str(count) + s[i] \n  \n    return output\n\ns = \"aabbbbbbcccc\"\nprint(compress(s))\n# Output: 2a6b4c\n```"
    },
    {
        "instruction": "Implement an algorithm in Python to search for a number in a given sorted list of numbers.",
        "output": "def binarySearch(arr, number):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right)//2\n        if arr[mid] == number:\n            return mid\n        elif arr[mid] < number:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\nif __name__ == '__main__':\n    arr = [1, 3, 5, 7, 8, 9]\n    number = 7\n    result = binarySearch(arr, number)\n    print(result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nImplement an algorithm in Python to search for a number in a given sorted list of numbers.\n\n### Solution:\n```\ndef binarySearch(arr, number):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right)//2\n        if arr[mid] == number:\n            return mid\n        elif arr[mid] < number:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\nif __name__ == '__main__':\n    arr = [1, 3, 5, 7, 8, 9]\n    number = 7\n    result = binarySearch(arr, number)\n    print(result)\n```"
    },
    {
        "instruction": "Write a Python class that will generate an output in JSON format from a provided input.",
        "output": "class JSONGenerator:\n    def __init__(self, input):\n        self.input = input\n \n    def generate(self):\n        return json.dumps(self.input)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python class that will generate an output in JSON format from a provided input.\n\n### Solution:\n```\nclass JSONGenerator:\n    def __init__(self, input):\n        self.input = input\n \n    def generate(self):\n        return json.dumps(self.input)\n```"
    },
    {
        "instruction": "Create a Python program to encode/decode data using a one-time pad-style of encryption.",
        "output": "import base64\n\nencrypted_string = base64.b64decode(encrypted_string)\ndecryption_key = base64.b64decode(decryption_key)\n\ndecrypted_string = \"\"\n\nassert len(encrypted_string) == len(decryption_key)\nfor i in range(len(encrypted_string)):\n    decrypted_string += chr(ord(encrypted_string[i]) ^ ord(decryption_key[i]))\n\nprint(decrypted_string)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to encode/decode data using a one-time pad-style of encryption.\n\n### Solution:\n```\nimport base64\n\nencrypted_string = base64.b64decode(encrypted_string)\ndecryption_key = base64.b64decode(decryption_key)\n\ndecrypted_string = \"\"\n\nassert len(encrypted_string) == len(decryption_key)\nfor i in range(len(encrypted_string)):\n    decrypted_string += chr(ord(encrypted_string[i]) ^ ord(decryption_key[i]))\n\nprint(decrypted_string)\n```"
    },
    {
        "instruction": "Construct a class in Python to represent a 2D point.",
        "output": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def get_x(self):\n        return self.x\n    def get_y(self):\n        return self.y\n    def is_origin(self):\n        return self.x == 0 and self.y == 0\n    def __str__(self):\n        return 'Point(x = {}, y = {})'.format(self.x, self.y)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConstruct a class in Python to represent a 2D point.\n\n### Solution:\n```\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def get_x(self):\n        return self.x\n    def get_y(self):\n        return self.y\n    def is_origin(self):\n        return self.x == 0 and self.y == 0\n    def __str__(self):\n        return 'Point(x = {}, y = {})'.format(self.x, self.y)\n```"
    },
    {
        "instruction": "Develop an algorithm in Python to create a Fibonacci sequence up to the nth number.",
        "output": "def fibonacci(n):\n  if n<0:\n    print(\"Incorrect input\")\n  elif n==1:\n    return 0\n  elif n==2:\n    return 1\n  else:\n    return fibonacci(n-1)+fibonacci(n-2)\nprint(\"Fibonacci series up to\",n,\":\")\nfor i in range(1,n+1):\n  print(fibonacci(i))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop an algorithm in Python to create a Fibonacci sequence up to the nth number.\n\n### Solution:\n```\ndef fibonacci(n):\n  if n<0:\n    print(\"Incorrect input\")\n  elif n==1:\n    return 0\n  elif n==2:\n    return 1\n  else:\n    return fibonacci(n-1)+fibonacci(n-2)\nprint(\"Fibonacci series up to\",n,\":\")\nfor i in range(1,n+1):\n  print(fibonacci(i))\n```"
    },
    {
        "instruction": "Create a basic text editor using Python.",
        "output": "import tkinter\nfrom tkinter import *\n\n# create the root window\nroot = Tk()\n\n# title for the root window\nroot.title('Text Editor') \n\n# create text box\ntext = Text(root)\ntext.pack()\n\n# create scroll bar\nscroll_bar = Scrollbar(root)\n# attach the scroll bar to the text box\nscroll_bar.pack(side='right', fill='y')\n# configure text box with the scrollbar\ntext.config(yscrollcommand=scroll_bar.set)\nscroll_bar.config(command=text.yview)\n\n# main loop\nroot.mainloop()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a basic text editor using Python.\n\n### Solution:\n```\nimport tkinter\nfrom tkinter import *\n\n# create the root window\nroot = Tk()\n\n# title for the root window\nroot.title('Text Editor') \n\n# create text box\ntext = Text(root)\ntext.pack()\n\n# create scroll bar\nscroll_bar = Scrollbar(root)\n# attach the scroll bar to the text box\nscroll_bar.pack(side='right', fill='y')\n# configure text box with the scrollbar\ntext.config(yscrollcommand=scroll_bar.set)\nscroll_bar.config(command=text.yview)\n\n# main loop\nroot.mainloop()\n```"
    },
    {
        "instruction": "Edit a Python program to sort an array of size n with m different types of numbers in ascending order.",
        "output": "# Sort an array with m different types of elements\ndef sort_array(arr):\n    # Get the number of different types of elements \n    m = len(set(arr)) \n    n = len(arr) \n  \n    # Create an output array of size n\n    output = [0] * (n) \n   \n    # Store count of individual numbers in \n    # count array \n    count = [0] * (m) \n    for i in range(0, n): \n        count[arr[i]] += 1\n   \n    # finding cummulative count \n    for i in range(1, m): \n        count[i] += count[i - 1] \n  \n    # Inserting values in sorted array\n    for i in range(n - 1, -1, -1): \n        output[count[arr[i]] - 1] = arr[i] \n        count[arr[i]] -= 1\n   \n    return output \n\n# Driver Code \narr = [2, 1, 1, 3, 6, 4, 5, 5]\nsorted_arr = sort_array(arr) \n  \n# Printing the sorted array \nprint(*sorted_arr)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nEdit a Python program to sort an array of size n with m different types of numbers in ascending order.\n\n### Solution:\n```\n# Sort an array with m different types of elements\ndef sort_array(arr):\n    # Get the number of different types of elements \n    m = len(set(arr)) \n    n = len(arr) \n  \n    # Create an output array of size n\n    output = [0] * (n) \n   \n    # Store count of individual numbers in \n    # count array \n    count = [0] * (m) \n    for i in range(0, n): \n        count[arr[i]] += 1\n   \n    # finding cummulative count \n    for i in range(1, m): \n        count[i] += count[i - 1] \n  \n    # Inserting values in sorted array\n    for i in range(n - 1, -1, -1): \n        output[count[arr[i]] - 1] = arr[i] \n        count[arr[i]] -= 1\n   \n    return output \n\n# Driver Code \narr = [2, 1, 1, 3, 6, 4, 5, 5]\nsorted_arr = sort_array(arr) \n  \n# Printing the sorted array \nprint(*sorted_arr)\n```"
    },
    {
        "instruction": "Create a program in Python to check for duplicate words in a given sentence.",
        "output": "sentence = \"I am going to the store to buy food\"\n\nwords = sentence.split(' ')\n\n#Table to keep track of duplicates\ntable = []\n\nfor word in words:\n if word in table:\n print(\"Duplicate word found: \"+word)\n else:\n table.append(word)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a program in Python to check for duplicate words in a given sentence.\n\n### Solution:\n```\nsentence = \"I am going to the store to buy food\"\n\nwords = sentence.split(' ')\n\n#Table to keep track of duplicates\ntable = []\n\nfor word in words:\n if word in table:\n print(\"Duplicate word found: \"+word)\n else:\n table.append(word)\n```"
    },
    {
        "instruction": "Design a python program which takes a two strings and finds out if they are anagrams.",
        "output": "def is_anagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n        \n    hashmap = {}\n    \n    for letter in str1:\n        if letter in hashmap:\n            hashmap[letter] += 1\n        else:\n            hashmap[letter] = 1\n    \n    for letter in str2:\n        if letter not in hashmap or hashmap[letter] == 0:\n            return False\n        else:\n            hashmap[letter] -= 1\n            \n    for key in hashmap:\n        if hashmap[key] != 0:\n            return False\n            \n    return True",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a python program which takes a two strings and finds out if they are anagrams.\n\n### Solution:\n```\ndef is_anagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n        \n    hashmap = {}\n    \n    for letter in str1:\n        if letter in hashmap:\n            hashmap[letter] += 1\n        else:\n            hashmap[letter] = 1\n    \n    for letter in str2:\n        if letter not in hashmap or hashmap[letter] == 0:\n            return False\n        else:\n            hashmap[letter] -= 1\n            \n    for key in hashmap:\n        if hashmap[key] != 0:\n            return False\n            \n    return True\n```"
    },
    {
        "instruction": "Design a function in Python for finding the missing number in an array of integers.",
        "output": "def find_missing_number(arr):\n # Set to store all numbers from 1 to the last element in the array\n # For an array of length n, the last element has value n \n all_nums = set(range(1, arr[-1] + 1)) \n \n # Set to store all numbers present in the array\n arr_nums = set(arr) \n  \n return list(all_nums - arr_nums)[0] \n\n# Test\nprint(find_missing_number([1, 2, 3, 4, 6, 7, 8, 9]))\n# Output: 5",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a function in Python for finding the missing number in an array of integers.\n\n### Solution:\n```\ndef find_missing_number(arr):\n # Set to store all numbers from 1 to the last element in the array\n # For an array of length n, the last element has value n \n all_nums = set(range(1, arr[-1] + 1)) \n \n # Set to store all numbers present in the array\n arr_nums = set(arr) \n  \n return list(all_nums - arr_nums)[0] \n\n# Test\nprint(find_missing_number([1, 2, 3, 4, 6, 7, 8, 9]))\n# Output: 5\n```"
    },
    {
        "instruction": "Modify an existing Python function to eliminate any redundancies",
        "output": "def just_me(name):\n    print(\"Hi, my name is \"+name+\". I am special and nothing else matters.\")\n    print(\"What about you?\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nModify an existing Python function to eliminate any redundancies\n\n### Solution:\n```\ndef just_me(name):\n    print(\"Hi, my name is \"+name+\". I am special and nothing else matters.\")\n    print(\"What about you?\")\n```"
    },
    {
        "instruction": "Can you write a python program to solve a system of linear equations?",
        "output": "def solve_linear_equations(a, b, c):\n    \"\"\"\n    This function takes three parameters: a, b and c, which are the coefficients of a system of linear equations, \n    and returns a tuple of the solution of the system.\n    \"\"\"\n    x = (c - b) / (a - b)\n    y = (5 - a*x) / b\n    \n    return (x, y)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCan you write a python program to solve a system of linear equations?\n\n### Solution:\n```\ndef solve_linear_equations(a, b, c):\n    \"\"\"\n    This function takes three parameters: a, b and c, which are the coefficients of a system of linear equations, \n    and returns a tuple of the solution of the system.\n    \"\"\"\n    x = (c - b) / (a - b)\n    y = (5 - a*x) / b\n    \n    return (x, y)\n```"
    },
    {
        "instruction": "Create a program in Python that takes two lists and checks for common elements between them.",
        "output": "list1 = [1,2,3,4]\nlist2 = [3,4,5,6] \n\ndef check_common(list1, list2): \n    result = False\n    for x in list1: \n        for y in list2: \n            if x == y: \n                result = True\n                return result  \n    return result \n  \nprint(check_common(list1, list2))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a program in Python that takes two lists and checks for common elements between them.\n\n### Solution:\n```\nlist1 = [1,2,3,4]\nlist2 = [3,4,5,6] \n\ndef check_common(list1, list2): \n    result = False\n    for x in list1: \n        for y in list2: \n            if x == y: \n                result = True\n                return result  \n    return result \n  \nprint(check_common(list1, list2))\n```"
    },
    {
        "instruction": "Write a Python program to generate random passwords based on user input. The program should take the user input as the length of the password, number of special characters to include, and the list of available characters and generate a random password.",
        "output": "import random\n\ndef generate_password(length, num_special_char, allowed_chars):\n password = ''\n for i in range(length):\n  password += random.choice(allowed_chars)\n for i in range(num_special_char):\n  password += random.choice('!@#$%^&*')\n return ''.join(random.sample(password, len(password)))\n\n print(generate_password(length, num_special_char, allowed_chars))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to generate random passwords based on user input. The program should take the user input as the length of the password, number of special characters to include, and the list of available characters and generate a random password.\n\n### Solution:\n```\nimport random\n\ndef generate_password(length, num_special_char, allowed_chars):\n password = ''\n for i in range(length):\n  password += random.choice(allowed_chars)\n for i in range(num_special_char):\n  password += random.choice('!@#$%^&*')\n return ''.join(random.sample(password, len(password)))\n\n print(generate_password(length, num_special_char, allowed_chars))\n```"
    },
    {
        "instruction": "Write an expression in python to check if a given number is prime",
        "output": "def is_prime(number):\n    if number>1:\n        for i in range(2,number):\n            if number%i==0:\n                return False\n    else:\n        return False\n    return True\nprint(is_prime(number))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite an expression in python to check if a given number is prime\n\n### Solution:\n```\ndef is_prime(number):\n    if number>1:\n        for i in range(2,number):\n            if number%i==0:\n                return False\n    else:\n        return False\n    return True\nprint(is_prime(number))\n```"
    },
    {
        "instruction": "Create a program to detect a palindrome string in Python.",
        "output": "# Function to check if a string is a palindrome\ndef is_palindrome(original_string):  \n    reversed_string = original_string[::-1]  \n    if original_string == reversed_string:\n        return True \n    else:\n        return False  \n  \n# Print result\nprint(is_palindrome(original_string))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a program to detect a palindrome string in Python.\n\n### Solution:\n```\n# Function to check if a string is a palindrome\ndef is_palindrome(original_string):  \n    reversed_string = original_string[::-1]  \n    if original_string == reversed_string:\n        return True \n    else:\n        return False  \n  \n# Print result\nprint(is_palindrome(original_string))\n```"
    },
    {
        "instruction": "Rewrite the existing code to edit the contents of an existing Python dictionary.",
        "output": "language_dict = {\n    'English': 'Hi', \n    'Spanish': 'Hola', \n    'Japanese': 'Konnichiwa'\n    }\n    \ndef edit_dict(dictionary, key, value):\n    dictionary[key] = value",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nRewrite the existing code to edit the contents of an existing Python dictionary.\n\n### Solution:\n```\nlanguage_dict = {\n    'English': 'Hi', \n    'Spanish': 'Hola', \n    'Japanese': 'Konnichiwa'\n    }\n    \ndef edit_dict(dictionary, key, value):\n    dictionary[key] = value\n```"
    },
    {
        "instruction": "Generate a Python program to print each letter in a word on a separate line.",
        "output": "def print_letters(word):\n    for letter in word:\n        print(letter)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python program to print each letter in a word on a separate line.\n\n### Solution:\n```\ndef print_letters(word):\n    for letter in word:\n        print(letter)\n```"
    },
    {
        "instruction": "Write a Python program to select rows with score greater than 8 from the given Pandas DataFrame.",
        "output": "import pandas as pd\n\n# Create a DataFrame from given data\ndata = { 'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\n\ndf = pd.DataFrame(data)\n\n# Select rows with score greater than 8\ndf_selected = df[df['score'] > 8]\n\n# Print dataframe\nprint(df_selected)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to select rows with score greater than 8 from the given Pandas DataFrame.\n\n### Solution:\n```\nimport pandas as pd\n\n# Create a DataFrame from given data\ndata = { 'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\n\ndf = pd.DataFrame(data)\n\n# Select rows with score greater than 8\ndf_selected = df[df['score'] > 8]\n\n# Print dataframe\nprint(df_selected)\n```"
    },
    {
        "instruction": "Create unit tests for a Python function that adds two numbers.",
        "output": "import unittest\n\ndef add_two_numbers(a, b):\n return a + b\n\nclass TestAddTwoNumbers(unittest.TestCase):\n def test_add_two_numbers_positive(self):\n  result = add_two_numbers(1, 2)\n  self.assertEqual(result, 3)\n\n def test_add_two_numbers_negative(self):\n  result = add_two_numbers(-1, -2)\n  self.assertEqual(result, -3)\n\nif __name__ == '__main__':\n unittest.main()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate unit tests for a Python function that adds two numbers.\n\n### Solution:\n```\nimport unittest\n\ndef add_two_numbers(a, b):\n return a + b\n\nclass TestAddTwoNumbers(unittest.TestCase):\n def test_add_two_numbers_positive(self):\n  result = add_two_numbers(1, 2)\n  self.assertEqual(result, 3)\n\n def test_add_two_numbers_negative(self):\n  result = add_two_numbers(-1, -2)\n  self.assertEqual(result, -3)\n\nif __name__ == '__main__':\n unittest.main()\n```"
    },
    {
        "instruction": "Build a program in Python that prints out all the prime numbers between 2 and 100.",
        "output": "def prime_numbers():\n    primes = [2]\n    for num in range(3, 101):\n        if all(num % prime != 0 for prime in primes):\n            primes.append(num)\n    print(primes)\n\nprime_numbers()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nBuild a program in Python that prints out all the prime numbers between 2 and 100.\n\n### Solution:\n```\ndef prime_numbers():\n    primes = [2]\n    for num in range(3, 101):\n        if all(num % prime != 0 for prime in primes):\n            primes.append(num)\n    print(primes)\n\nprime_numbers()\n```"
    },
    {
        "instruction": "Create a python program to generate a report of the ten most viewed videos on YouTube this week.",
        "output": "import json\nimport requests\n\ndef get_top_ten_videos():\n    \"\"\"\n    Returns the top ten viewed videos on YouTube as a report.\n    \"\"\"\n\n    # Get the data of the top ten viewed videos on YouTube using the API \n    response = requests.get(\"https://www.googleapis.com/youtube/v3/videos?part=snippet%2C+statistics&chart=mostPopular&maxResults=10&key=api-key\")\n    data = json.loads(response.text)\n\n    # Create string with Youtube video info\n    report = \"Top 10 most viewed YouTube videos this week:\\n\"\n    for item in data['items']:\n       # extract video data\n        title = item['snippet']['title']\n        views = item['statistics']['viewCount']\n        report += '- ' + title + \": \" + views + \" views\\n\" \n\n    return report\n\nif __name__ == '__main__':\n    print(get_top_ten_videos())",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a python program to generate a report of the ten most viewed videos on YouTube this week.\n\n### Solution:\n```\nimport json\nimport requests\n\ndef get_top_ten_videos():\n    \"\"\"\n    Returns the top ten viewed videos on YouTube as a report.\n    \"\"\"\n\n    # Get the data of the top ten viewed videos on YouTube using the API \n    response = requests.get(\"https://www.googleapis.com/youtube/v3/videos?part=snippet%2C+statistics&chart=mostPopular&maxResults=10&key=api-key\")\n    data = json.loads(response.text)\n\n    # Create string with Youtube video info\n    report = \"Top 10 most viewed YouTube videos this week:\\n\"\n    for item in data['items']:\n       # extract video data\n        title = item['snippet']['title']\n        views = item['statistics']['viewCount']\n        report += '- ' + title + \": \" + views + \" views\\n\" \n\n    return report\n\nif __name__ == '__main__':\n    print(get_top_ten_videos())\n```"
    },
    {
        "instruction": "Write a Python program to split a list into two parts, where the size of the first part is determined by the user.",
        "output": "def split_list(lst, size):\n    part1 = lst[:size]\n    part2 = lst[size:]\n    return part1, part2\n\n# example\nmy_list = [1, 2, 3, 4, 5, 6, 7]\npart1, part2 = split_list(my_list, 3)\nprint(part1) # [1, 2, 3]\nprint(part2) # [4, 5, 6, 7]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to split a list into two parts, where the size of the first part is determined by the user.\n\n### Solution:\n```\ndef split_list(lst, size):\n    part1 = lst[:size]\n    part2 = lst[size:]\n    return part1, part2\n\n# example\nmy_list = [1, 2, 3, 4, 5, 6, 7]\npart1, part2 = split_list(my_list, 3)\nprint(part1) # [1, 2, 3]\nprint(part2) # [4, 5, 6, 7]\n```"
    },
    {
        "instruction": "Create a CGI script in Python to process form data from an HTML page.",
        "output": "#!/usr/bin/env python\n \nimport cgi\n \n#Get form data\nform = cgi.FieldStorage()\n \nname = form.getvalue('name')\nage = form.getvalue('age')\n\n# Display the results\nprint \"Content-type: text/html\"\nprint\nprint \"<html>\"\nprint \"<body>\"\nprint \"<p>Hi, %s! You are %s years old.</p>\" % (name, age)\nprint \"</body>\"\nprint \"</html>\"",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a CGI script in Python to process form data from an HTML page.\n\n### Solution:\n```\n#!/usr/bin/env python\n \nimport cgi\n \n#Get form data\nform = cgi.FieldStorage()\n \nname = form.getvalue('name')\nage = form.getvalue('age')\n\n# Display the results\nprint \"Content-type: text/html\"\nprint\nprint \"<html>\"\nprint \"<body>\"\nprint \"<p>Hi, %s! You are %s years old.</p>\" % (name, age)\nprint \"</body>\"\nprint \"</html>\"\n```"
    },
    {
        "instruction": "Generate a Python program to create a histogram from a data set.",
        "output": "import matplotlib.pyplot as plt\n \ndata = [2, 4, 5, 3, 5, 6, 8, 2]\nplt.hist(data, bins = 5) \n \nplt.title(\"Histogram\") \nplt.xlabel(\"Values\")\nplt.ylabel(\"Frequency\")\nplt.show()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python program to create a histogram from a data set.\n\n### Solution:\n```\nimport matplotlib.pyplot as plt\n \ndata = [2, 4, 5, 3, 5, 6, 8, 2]\nplt.hist(data, bins = 5) \n \nplt.title(\"Histogram\") \nplt.xlabel(\"Values\")\nplt.ylabel(\"Frequency\")\nplt.show()\n```"
    },
    {
        "instruction": "Create a Python class for storing and retrieving data from a database.",
        "output": "import sqlite3\n\nclass DataAccess(object):\n \n def __init__(self, db_name):\n self.conn = sqlite3.connect(db_name)\n self.cur = self.conn.cursor()\n \n def save_data(self, table, id, name):\n self.cur.execute(f\"INSERT INTO {table} VALUES (?, ?)\", (id, name))\n self.conn.commit()\n \n def read_data(self, table, id):\n self.cur.execute(f\"SELECT * FROM {table} WHERE id = ?\", (id,))\n return self.cur.fetchone()\n \n def close_connection(self):\n self.conn.close()\n\nUserDAO = DataAccess('my_db.db')",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python class for storing and retrieving data from a database.\n\n### Solution:\n```\nimport sqlite3\n\nclass DataAccess(object):\n \n def __init__(self, db_name):\n self.conn = sqlite3.connect(db_name)\n self.cur = self.conn.cursor()\n \n def save_data(self, table, id, name):\n self.cur.execute(f\"INSERT INTO {table} VALUES (?, ?)\", (id, name))\n self.conn.commit()\n \n def read_data(self, table, id):\n self.cur.execute(f\"SELECT * FROM {table} WHERE id = ?\", (id,))\n return self.cur.fetchone()\n \n def close_connection(self):\n self.conn.close()\n\nUserDAO = DataAccess('my_db.db')\n```"
    },
    {
        "instruction": "Create a Python script to find the most common word in a string.",
        "output": "# Split the string into words\nwords = \"Today is a beautiful day\".split()\n\n# Initialize a dictionary\ncount = {} \n  \n# Iterate over each word in the list \nfor word in words: \n    \n    # If the word is already in the dictionary, increment its frequency \n    if word in count: \n        count[word] += 1\n  \n    # Else, set its frequency to 1\n    else: \n        count[word] = 1\n  \n# Get the most frequently occurring element in the list \nmax_value = max(count.values())\nmax_key = max(count, key=count.get)\n  \nprint(max_key, \"is the most frequent word\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python script to find the most common word in a string.\n\n### Solution:\n```\n# Split the string into words\nwords = \"Today is a beautiful day\".split()\n\n# Initialize a dictionary\ncount = {} \n  \n# Iterate over each word in the list \nfor word in words: \n    \n    # If the word is already in the dictionary, increment its frequency \n    if word in count: \n        count[word] += 1\n  \n    # Else, set its frequency to 1\n    else: \n        count[word] = 1\n  \n# Get the most frequently occurring element in the list \nmax_value = max(count.values())\nmax_key = max(count, key=count.get)\n  \nprint(max_key, \"is the most frequent word\")\n```"
    },
    {
        "instruction": "Create a neural network model using Keras in Python for sentiment analysis. The model should be able to classify the sentiment of a movie review as either positive or negative.",
        "output": "import tensorflow as tf\nfrom tensorflow import keras\n\n# Define model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(24, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile Model\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n\n# Train the model\nmodel.fit(training_padded, training_labels, epochs=num_epochs, validation_data=(testing_padded, testing_labels))\n\n# Make predictions\nsentiment = model.predict(testing_padded)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a neural network model using Keras in Python for sentiment analysis. The model should be able to classify the sentiment of a movie review as either positive or negative.\n\n### Solution:\n```\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Define model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(24, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile Model\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n\n# Train the model\nmodel.fit(training_padded, training_labels, epochs=num_epochs, validation_data=(testing_padded, testing_labels))\n\n# Make predictions\nsentiment = model.predict(testing_padded)\n```"
    },
    {
        "instruction": "Write a Python code to decode a JSON string.",
        "output": "import json\n\njson_string = '{\"name\": \"John\", \"age\": 30, \"is_married\": false}'\n\ndata = json.loads(json_string)\nname = data['name']\nage = data['age']\nis_married = data['is_married']\n\nprint('Name: ', name)\nprint('Age: ', age)\nprint('Is Married: ', is_married)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python code to decode a JSON string.\n\n### Solution:\n```\nimport json\n\njson_string = '{\"name\": \"John\", \"age\": 30, \"is_married\": false}'\n\ndata = json.loads(json_string)\nname = data['name']\nage = data['age']\nis_married = data['is_married']\n\nprint('Name: ', name)\nprint('Age: ', age)\nprint('Is Married: ', is_married)\n```"
    },
    {
        "instruction": "Write a Python list comprehension to extract the individual digits of a given number.",
        "output": "[int(d) for d in str(num)]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python list comprehension to extract the individual digits of a given number.\n\n### Solution:\n```\n[int(d) for d in str(num)]\n```"
    },
    {
        "instruction": "Create a python program to filter out all the even numbers from a given list.",
        "output": "def filter_even_numbers(numbers):\n    even_numbers = []\n    for i in numbers:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n    \n    \nfiltered = filter_even_numbers([3, 4, 5, 6, 7])\nprint(filtered)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a python program to filter out all the even numbers from a given list.\n\n### Solution:\n```\ndef filter_even_numbers(numbers):\n    even_numbers = []\n    for i in numbers:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n    \n    \nfiltered = filter_even_numbers([3, 4, 5, 6, 7])\nprint(filtered)\n```"
    },
    {
        "instruction": "Write a Python program to create all possible strings by using 'a', 'e', 'i', 'o', 'u'. The length of the string should be at least two characters.",
        "output": "import itertools\n\nvowels = ['a', 'e', 'i', 'o', 'u']\n\nfor s in itertools.combinations_with_replacement(vowels, 2):\n        print(''.join(s))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to create all possible strings by using 'a', 'e', 'i', 'o', 'u'. The length of the string should be at least two characters.\n\n### Solution:\n```\nimport itertools\n\nvowels = ['a', 'e', 'i', 'o', 'u']\n\nfor s in itertools.combinations_with_replacement(vowels, 2):\n        print(''.join(s))\n```"
    },
    {
        "instruction": "Develop a web scraping Python program to scrape the product details of a sample store.",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\n#  Get the HTML from the webpage\npage = requests.get('https://example.com')\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# Isolate the product information\nproduct_list = soup.find_all('div', class_='product')\n\n# Extract the product information\nproducts = []\nfor product in product_list:\n   name = product.find('div', class_='name').text.strip()\n   price = product.find('div', class_='price').text.strip()\n   description = product.find('div', class_='description').text.strip()\n   products.append({\n      'name': name,\n      'price': price,\n      'description': description\n   })\n\n# Print the product list\nprint(products)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop a web scraping Python program to scrape the product details of a sample store.\n\n### Solution:\n```\nimport requests\nfrom bs4 import BeautifulSoup\n\n#  Get the HTML from the webpage\npage = requests.get('https://example.com')\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# Isolate the product information\nproduct_list = soup.find_all('div', class_='product')\n\n# Extract the product information\nproducts = []\nfor product in product_list:\n   name = product.find('div', class_='name').text.strip()\n   price = product.find('div', class_='price').text.strip()\n   description = product.find('div', class_='description').text.strip()\n   products.append({\n      'name': name,\n      'price': price,\n      'description': description\n   })\n\n# Print the product list\nprint(products)\n```"
    },
    {
        "instruction": "Create a Python script to generate a global unique identifier (GUID).",
        "output": "import uuid\n \n# generate a GUID\nguid = str(uuid.uuid4())\n \n# print the GUID\nprint(guid)\n\n// Output: 3c112f3d-3c68-4b4c-a85d-672622be9f25",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python script to generate a global unique identifier (GUID).\n\n### Solution:\n```\nimport uuid\n \n# generate a GUID\nguid = str(uuid.uuid4())\n \n# print the GUID\nprint(guid)\n\n// Output: 3c112f3d-3c68-4b4c-a85d-672622be9f25\n```"
    },
    {
        "instruction": "Generate Python code to find numbers that are multiples of both 3 and 5 between 0 and 100.",
        "output": "# List of numbers which are multiples of both 3 and 5 between 0 and 100\nmultiples_3_5 = [] \n\n# Iterate over all numbers between 0 and 100 \nfor num in range(101): \n \n    # Check for multiples of both 3 and 5 \n    if num % 3 == 0 and num % 5 == 0: \n        multiples_3_5.append(num) \n      \nprint(multiples_3_5)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate Python code to find numbers that are multiples of both 3 and 5 between 0 and 100.\n\n### Solution:\n```\n# List of numbers which are multiples of both 3 and 5 between 0 and 100\nmultiples_3_5 = [] \n\n# Iterate over all numbers between 0 and 100 \nfor num in range(101): \n \n    # Check for multiples of both 3 and 5 \n    if num % 3 == 0 and num % 5 == 0: \n        multiples_3_5.append(num) \n      \nprint(multiples_3_5)\n```"
    },
    {
        "instruction": "Create a Python function to find the maximum number in an array. The function should accept a single argument and return the maximum value in the array.",
        "output": "def find_maximum(arr):\n  max_val = arr[0]\n  for value in arr:\n    if value > max_val:\n      max_val = value\n  return max_val\n\n# Usage\nmax_num = find_maximum([5, 8, 0, 1, 3, 9])\nprint(max_num)\n# prints 9",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python function to find the maximum number in an array. The function should accept a single argument and return the maximum value in the array.\n\n### Solution:\n```\ndef find_maximum(arr):\n  max_val = arr[0]\n  for value in arr:\n    if value > max_val:\n      max_val = value\n  return max_val\n\n# Usage\nmax_num = find_maximum([5, 8, 0, 1, 3, 9])\nprint(max_num)\n# prints 9\n```"
    },
    {
        "instruction": "Write a Python program to implement a given sorting algorithm",
        "output": "def insertion_sort(arr):\n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key \n\narr = [9, 8, 7, 6, 5, 4, 3, 2, 1]\ninsertion_sort(arr)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to implement a given sorting algorithm\n\n### Solution:\n```\ndef insertion_sort(arr):\n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key \n\narr = [9, 8, 7, 6, 5, 4, 3, 2, 1]\ninsertion_sort(arr)\n```"
    },
    {
        "instruction": "Write a Python program to create a GraphQL API endpoint",
        "output": "import graphene\n\nclass Query(graphene.ObjectType):\n    # An endpoint to fetch all books\n    books = graphene.List(BookType)\n\n    def resolve_books(self, info):\n        return books\n\n\nclass Mutation(graphene.ObjectType):\n    # An endpoint to add a book\n    add_book = graphene.Field(BookType, title=graphene.String(), author=graphene.String(), )\n\n    def mutate(self, info, title, author):\n        book = Book(title=title, author=author)\n        book.save()\n\n        return book\n\nschema = graphene.Schema(query=Query, mutation=Mutation)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to create a GraphQL API endpoint\n\n### Solution:\n```\nimport graphene\n\nclass Query(graphene.ObjectType):\n    # An endpoint to fetch all books\n    books = graphene.List(BookType)\n\n    def resolve_books(self, info):\n        return books\n\n\nclass Mutation(graphene.ObjectType):\n    # An endpoint to add a book\n    add_book = graphene.Field(BookType, title=graphene.String(), author=graphene.String(), )\n\n    def mutate(self, info, title, author):\n        book = Book(title=title, author=author)\n        book.save()\n\n        return book\n\nschema = graphene.Schema(query=Query, mutation=Mutation)\n```"
    },
    {
        "instruction": "Write a Python class that takes 2 strings as arguments and prints them out in a concatenated form.",
        "output": "class ConcatStrings:\n    def __init__(self, string1, string2):\n        self.string1 = string1\n        self.string2 = string2\n\n    def print_concat(self):\n        print(self.string1 + self.string2)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python class that takes 2 strings as arguments and prints them out in a concatenated form.\n\n### Solution:\n```\nclass ConcatStrings:\n    def __init__(self, string1, string2):\n        self.string1 = string1\n        self.string2 = string2\n\n    def print_concat(self):\n        print(self.string1 + self.string2)\n```"
    },
    {
        "instruction": "Create a program in Python to remove all the occurrences of an item from a list.",
        "output": "def removeItem(list, item):\n    # loop through the list\n    for i in list:\n        # check if the element is the item to remove\n        if i == item:\n            # remove the item\n            list.remove(i)\n    # return the list\n    return list\n\n#example\nlist = [1, 2, 3, 4, 2, 5, 2]\nresult = removeItem(list, 2)\n\nprint(result)\n# Output: [1, 3, 4, 5]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a program in Python to remove all the occurrences of an item from a list.\n\n### Solution:\n```\ndef removeItem(list, item):\n    # loop through the list\n    for i in list:\n        # check if the element is the item to remove\n        if i == item:\n            # remove the item\n            list.remove(i)\n    # return the list\n    return list\n\n#example\nlist = [1, 2, 3, 4, 2, 5, 2]\nresult = removeItem(list, 2)\n\nprint(result)\n# Output: [1, 3, 4, 5]\n```"
    },
    {
        "instruction": "Create a Python program that can detect vowels in a given string.",
        "output": "def detect_vowels(inp_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    return [char for char in inp_str if char.lower() in vowels]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program that can detect vowels in a given string.\n\n### Solution:\n```\ndef detect_vowels(inp_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    return [char for char in inp_str if char.lower() in vowels]\n```"
    },
    {
        "instruction": "Generate a python code to sum the elements in the given array.",
        "output": "def sum_array(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nsum_array(arr)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a python code to sum the elements in the given array.\n\n### Solution:\n```\ndef sum_array(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nsum_array(arr)\n```"
    },
    {
        "instruction": "Compose a Python program to print the first hundred odd numbers.",
        "output": "# declaring an empty list\nodds = []\n\n# looping for a range of 1 to 100\nfor n in range(1,101):\n# check if the number is odd\n if n % 2 != 0:\n  # add the odd numbers to the list\n  odds.append(n)\n\n# print the list\nprint(odds)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCompose a Python program to print the first hundred odd numbers.\n\n### Solution:\n```\n# declaring an empty list\nodds = []\n\n# looping for a range of 1 to 100\nfor n in range(1,101):\n# check if the number is odd\n if n % 2 != 0:\n  # add the odd numbers to the list\n  odds.append(n)\n\n# print the list\nprint(odds)\n```"
    },
    {
        "instruction": "Write a Python program to create a stack using two queues.",
        "output": "class Stack:\n def __init__(self):\n self.queue1 = []\n self.queue2 = []\n \n def push(self, value):\n self.queue1.append(value)\n \n def pop(self):\n if self.queue1:\n while len(self.queue1) > 1:\n self.queue2.append(self.queue1.pop(0))\n\n return self.queue1.pop(0)\n \n else:\n while len(self.queue2) > 1:\n self.queue1.append(self.queue2.pop(0))\n\n return self.queue2.pop(0)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to create a stack using two queues.\n\n### Solution:\n```\nclass Stack:\n def __init__(self):\n self.queue1 = []\n self.queue2 = []\n \n def push(self, value):\n self.queue1.append(value)\n \n def pop(self):\n if self.queue1:\n while len(self.queue1) > 1:\n self.queue2.append(self.queue1.pop(0))\n\n return self.queue1.pop(0)\n \n else:\n while len(self.queue2) > 1:\n self.queue1.append(self.queue2.pop(0))\n\n return self.queue2.pop(0)\n```"
    },
    {
        "instruction": "Design a function in Python for encoding a message using ROT13 cipher.",
        "output": "import string \n  \ndef rot13_encode(plaintext, key): \n    ciphertext = \"\" \n    for char in plaintext: \n        if char in string.ascii_lowercase: \n            ciphertext += chr((ord(char) - key - 97) % 26 + 97)\n        elif char in string.ascii_uppercase: \n            ciphertext += chr((ord(char) - key - 65) % 26 + 65) \n        else: \n            ciphertext += char \n    return ciphertext \n  \nprint(rot13_encode(\"attack at dawn\", 13))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a function in Python for encoding a message using ROT13 cipher.\n\n### Solution:\n```\nimport string \n  \ndef rot13_encode(plaintext, key): \n    ciphertext = \"\" \n    for char in plaintext: \n        if char in string.ascii_lowercase: \n            ciphertext += chr((ord(char) - key - 97) % 26 + 97)\n        elif char in string.ascii_uppercase: \n            ciphertext += chr((ord(char) - key - 65) % 26 + 65) \n        else: \n            ciphertext += char \n    return ciphertext \n  \nprint(rot13_encode(\"attack at dawn\", 13))\n```"
    },
    {
        "instruction": "Edit an existing Python code so that it is more efficient and optimized for run time.",
        "output": "def average(arr):\n    return sum(arr) / len(arr)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nEdit an existing Python code so that it is more efficient and optimized for run time.\n\n### Solution:\n```\ndef average(arr):\n    return sum(arr) / len(arr)\n```"
    },
    {
        "instruction": "Write a Python program to find the number of system parameters that are not set correctly.",
        "output": "def find_system_parameter_count():\n    \"\"\"Find the number of system parameters not set correctly.\"\"\"\n    count = 0\n    for param in system_parameters:\n        if not is_correctly_set(param):\n            count += 1\n    return count",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to find the number of system parameters that are not set correctly.\n\n### Solution:\n```\ndef find_system_parameter_count():\n    \"\"\"Find the number of system parameters not set correctly.\"\"\"\n    count = 0\n    for param in system_parameters:\n        if not is_correctly_set(param):\n            count += 1\n    return count\n```"
    },
    {
        "instruction": "Cut at current position in a string by 1 letter in Python.",
        "output": "mystring = mystring[:-1]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCut at current position in a string by 1 letter in Python.\n\n### Solution:\n```\nmystring = mystring[:-1]\n```"
    },
    {
        "instruction": "Write a Python program to search for a specific value in a list.",
        "output": "def search_list(search_term, my_list):\n for item in my_list:\n if item == search_term:\n return True\nreturn False\n\nmy_list = [2, 4, 6, 8, 10]\nsearch_term = 8\n\nif search_list(search_term, my_list):\n print(\"Value found\")\nelse:\n print(\"Value not found\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to search for a specific value in a list.\n\n### Solution:\n```\ndef search_list(search_term, my_list):\n for item in my_list:\n if item == search_term:\n return True\nreturn False\n\nmy_list = [2, 4, 6, 8, 10]\nsearch_term = 8\n\nif search_list(search_term, my_list):\n print(\"Value found\")\nelse:\n print(\"Value not found\")\n```"
    },
    {
        "instruction": "Create a Python program that finds the longest word in a sentence.",
        "output": "def find_longest_word(sentence):\n    # Split sentence into a list of words\n    words = sentence.split()\n    # Track the longest word\n    longest_word = ''\n    # Iterate over the list of words\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    # Return the longest word\n    return longest_word\n\nprint(find_longest_word(\"My name is John\"))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program that finds the longest word in a sentence.\n\n### Solution:\n```\ndef find_longest_word(sentence):\n    # Split sentence into a list of words\n    words = sentence.split()\n    # Track the longest word\n    longest_word = ''\n    # Iterate over the list of words\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    # Return the longest word\n    return longest_word\n\nprint(find_longest_word(\"My name is John\"))\n```"
    },
    {
        "instruction": "Design a recursive function in Python that prints the nth Fibonacci number.",
        "output": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1 \n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a recursive function in Python that prints the nth Fibonacci number.\n\n### Solution:\n```\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1 \n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n```"
    },
    {
        "instruction": "Create a Python class to represent a person and its details.",
        "output": "class Person:\n def __init__(self, name, age):\n  self.name = name\n  self.age = age\n\ndef describe_person(self): \n print(f\"Name: {self.name}, Age: {self.age}\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python class to represent a person and its details.\n\n### Solution:\n```\nclass Person:\n def __init__(self, name, age):\n  self.name = name\n  self.age = age\n\ndef describe_person(self): \n print(f\"Name: {self.name}, Age: {self.age}\")\n```"
    },
    {
        "instruction": "Write a Python script that prints out all the numbers from 1 to 100, with the following exceptions:\n- If the number is a multiple of 3, print \"Fizz\" instead of the number.\n- If the number is a multiple of 5, print \"Buzz\" instead of the number.\n- If the number is a multiple of both 3 and 5, print \"FizzBuzz\" instead of the number.",
        "output": "for num in range(1,101):\n if num % 3 == 0 and num % 5 == 0:\n  print('FizzBuzz')\n elif num % 3 == 0:\n  print('Fizz')\n elif num % 5 == 0:\n  print('Buzz')\n else:\n  print(num)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python script that prints out all the numbers from 1 to 100, with the following exceptions:\n- If the number is a multiple of 3, print \"Fizz\" instead of the number.\n- If the number is a multiple of 5, print \"Buzz\" instead of the number.\n- If the number is a multiple of both 3 and 5, print \"FizzBuzz\" instead of the number.\n\n### Solution:\n```\nfor num in range(1,101):\n if num % 3 == 0 and num % 5 == 0:\n  print('FizzBuzz')\n elif num % 3 == 0:\n  print('Fizz')\n elif num % 5 == 0:\n  print('Buzz')\n else:\n  print(num)\n```"
    },
    {
        "instruction": "Create a python program to assess whether or not a movie genre is representing violent behavior, given a review of the movie.",
        "output": "\"\"\"\nCreate a program to assess whether or not a movie genre is representing violent behaviour\n\"\"\"\n\nimport nltk\nfrom nltk.tokenize import word_tokenize\n\ndef classify_movie(review):\n    # Tokenize review\n    tokens = word_tokenize(review)\n\n    # Check for violent words in the review\n    violent_words = ['violence', 'violent', 'killing', 'fight', 'bloody', 'war']\n\n    for token in tokens:\n        if token in violent_words:\n            return 'Yes'\n\n    return 'No'\n\nif __name__ == '__main__':\n    review = 'The movie is full of thrilling action scenes and lots of violence.'\n    result = classify_movie(review)\n    print(result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a python program to assess whether or not a movie genre is representing violent behavior, given a review of the movie.\n\n### Solution:\n```\n\"\"\"\nCreate a program to assess whether or not a movie genre is representing violent behaviour\n\"\"\"\n\nimport nltk\nfrom nltk.tokenize import word_tokenize\n\ndef classify_movie(review):\n    # Tokenize review\n    tokens = word_tokenize(review)\n\n    # Check for violent words in the review\n    violent_words = ['violence', 'violent', 'killing', 'fight', 'bloody', 'war']\n\n    for token in tokens:\n        if token in violent_words:\n            return 'Yes'\n\n    return 'No'\n\nif __name__ == '__main__':\n    review = 'The movie is full of thrilling action scenes and lots of violence.'\n    result = classify_movie(review)\n    print(result)\n```"
    },
    {
        "instruction": "Create a function in Python that takes a dictionary and a string as an argument and checks if the key is present in the given dictionary.",
        "output": "def checkKeyExists(dictionary, key):\n    return key in dictionary.keys()\n\ndict = {\n    \"Name\":\"John\",\n    \"Age\":25\n}\nString = \"Name\"\n\nprint(checkKeyExists(dict, String))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a function in Python that takes a dictionary and a string as an argument and checks if the key is present in the given dictionary.\n\n### Solution:\n```\ndef checkKeyExists(dictionary, key):\n    return key in dictionary.keys()\n\ndict = {\n    \"Name\":\"John\",\n    \"Age\":25\n}\nString = \"Name\"\n\nprint(checkKeyExists(dict, String))\n```"
    },
    {
        "instruction": "Write a Python program which accepts a sequence of comma-separated numbers from console and generates a list.",
        "output": "numbers = input(\"Please enter a sequence of comma-separated numbers:\")\n\nnum_list = numbers.split(',')\n\nnum_list = list(map(int, num_list))\n\nprint(num_list)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program which accepts a sequence of comma-separated numbers from console and generates a list.\n\n### Solution:\n```\nnumbers = input(\"Please enter a sequence of comma-separated numbers:\")\n\nnum_list = numbers.split(',')\n\nnum_list = list(map(int, num_list))\n\nprint(num_list)\n```"
    },
    {
        "instruction": "Create a function to normalize a given string using Python.",
        "output": "def normalize_string(s):\n    return s.lower().strip()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a function to normalize a given string using Python.\n\n### Solution:\n```\ndef normalize_string(s):\n    return s.lower().strip()\n```"
    },
    {
        "instruction": "Write a Python script to find the unique elements of a given list.",
        "output": "list_x = [1, 1, 2, 3, 4, 5, 5]\nunique_elements = set(list_x)\nprint(unique_elements) #output: {1, 2, 3, 4, 5}",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python script to find the unique elements of a given list.\n\n### Solution:\n```\nlist_x = [1, 1, 2, 3, 4, 5, 5]\nunique_elements = set(list_x)\nprint(unique_elements) #output: {1, 2, 3, 4, 5}\n```"
    },
    {
        "instruction": "Generate a python program to sort a collection of data given in the form of a 2-dimensional array.",
        "output": "def sortArray(arr): \n  arr.sort(key = lambda x: x[1]) \n  return arr \n  \n# Driver Code \narr = [[1, 2],[2, 6], [3, 4], [4, 5]] \n\nprint (sortArray(arr))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a python program to sort a collection of data given in the form of a 2-dimensional array.\n\n### Solution:\n```\ndef sortArray(arr): \n  arr.sort(key = lambda x: x[1]) \n  return arr \n  \n# Driver Code \narr = [[1, 2],[2, 6], [3, 4], [4, 5]] \n\nprint (sortArray(arr))\n```"
    },
    {
        "instruction": "Create code to multiply two matrices in Python.",
        "output": "def matrixMultiplication(A, B):\n\tN = len(A)\n\tC = [[0 for x in range(N)] for y in range(N)]\n\n\tfor i in range(N):\n\t\tfor j in range(N):\n\t\t\tfor k in range(N):\n\t\t\t\tC[i][j] += A[i][k] * B[k][j]\n\n\treturn C\n\nA = [[1,2],\n     [3,4]]\nB = [[4,3],\n     [2,1]]\n\nprint(matrixMultiplication(A, B))\n\n#output: [[8, 5], [20, 13]]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate code to multiply two matrices in Python.\n\n### Solution:\n```\ndef matrixMultiplication(A, B):\n\tN = len(A)\n\tC = [[0 for x in range(N)] for y in range(N)]\n\n\tfor i in range(N):\n\t\tfor j in range(N):\n\t\t\tfor k in range(N):\n\t\t\t\tC[i][j] += A[i][k] * B[k][j]\n\n\treturn C\n\nA = [[1,2],\n     [3,4]]\nB = [[4,3],\n     [2,1]]\n\nprint(matrixMultiplication(A, B))\n\n#output: [[8, 5], [20, 13]]\n```"
    },
    {
        "instruction": "Develop an algorithm in Python to sort an array of integers using the Merge Sort algorithm",
        "output": "# Merge Sort Algorithm\n\ndef merge(left, right):\n  sortedList = []\n  i, j = 0, 0\n  while i < len(left) and j < len(right):\n    if left[i] < right[j]:\n      sortedList.append(left[i])\n      i += 1\n    else:\n      sortedList.append(right[j])\n      j += 1\n  # Check if anything remains\n  sortedList += left[i:]\n  sortedList += right[j:]\n  return sortedList\n\ndef mergeSort(arr):\n  # Base case, already sorted\n  if len(arr) <= 1:\n    return arr\n\n  # Split in half\n  mid  = len(arr)/2\n  left = arr[:mid]\n  right = arr[mid:]\n  \n  # Sort each half and merge\n  left  = mergeSort(left)\n  right = mergeSort(right)\n  return merge(left, right)\n\n# Driver Code\narr = [6,2,5,1,8,9,0]\n\nsortedArr = mergeSort(arr)\nprint(sortedArr)\n\n# Output: [0, 1, 2, 5, 6, 8, 9]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop an algorithm in Python to sort an array of integers using the Merge Sort algorithm\n\n### Solution:\n```\n# Merge Sort Algorithm\n\ndef merge(left, right):\n  sortedList = []\n  i, j = 0, 0\n  while i < len(left) and j < len(right):\n    if left[i] < right[j]:\n      sortedList.append(left[i])\n      i += 1\n    else:\n      sortedList.append(right[j])\n      j += 1\n  # Check if anything remains\n  sortedList += left[i:]\n  sortedList += right[j:]\n  return sortedList\n\ndef mergeSort(arr):\n  # Base case, already sorted\n  if len(arr) <= 1:\n    return arr\n\n  # Split in half\n  mid  = len(arr)/2\n  left = arr[:mid]\n  right = arr[mid:]\n  \n  # Sort each half and merge\n  left  = mergeSort(left)\n  right = mergeSort(right)\n  return merge(left, right)\n\n# Driver Code\narr = [6,2,5,1,8,9,0]\n\nsortedArr = mergeSort(arr)\nprint(sortedArr)\n\n# Output: [0, 1, 2, 5, 6, 8, 9]\n```"
    },
    {
        "instruction": "Create a function for checking if a string is palindrome using Python.",
        "output": "def is_palindrome(text):\n    reverse = text[::-1] # reverse the string\n    return text == reverse",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a function for checking if a string is palindrome using Python.\n\n### Solution:\n```\ndef is_palindrome(text):\n    reverse = text[::-1] # reverse the string\n    return text == reverse\n```"
    },
    {
        "instruction": "Write a Python function to check if an element exists in a list.",
        "output": "def check_list(list_, element): \n    return element in list_",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python function to check if an element exists in a list.\n\n### Solution:\n```\ndef check_list(list_, element): \n    return element in list_\n```"
    },
    {
        "instruction": "Optimize a code snippet in Python. The code snippet is a function for computing the factorial of a number.",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nOptimize a code snippet in Python. The code snippet is a function for computing the factorial of a number.\n\n### Solution:\n```\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result\n```"
    },
    {
        "instruction": "Create a program in Python for generating a Fibonacci sequence.",
        "output": "# Generate a Fibonacci sequence\n\n# Function to generate Fibonacci sequence\ndef Fibonacci(n):\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return Fibonacci(n-1) + Fibonacci(n-2)\n\n# Print the sequence upto n terms\nterms = 10\nprint(\"Fibonacci sequence:\")\nfor num in range(1, terms + 1):\n    print(Fibonacci(num))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a program in Python for generating a Fibonacci sequence.\n\n### Solution:\n```\n# Generate a Fibonacci sequence\n\n# Function to generate Fibonacci sequence\ndef Fibonacci(n):\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return Fibonacci(n-1) + Fibonacci(n-2)\n\n# Print the sequence upto n terms\nterms = 10\nprint(\"Fibonacci sequence:\")\nfor num in range(1, terms + 1):\n    print(Fibonacci(num))\n```"
    },
    {
        "instruction": "Build logic in Python for validating a standard credit card number.",
        "output": "import re\n\n# validates a credit card number\ndef validateCreditCardNumber(num):\n\t# check the length is 16 digits\n\tif len(num) != 16:\n\t\treturn False\n\t# use a regex to match the input\n\tpattern = \"^([0-9]{4})([0-9]{4})([0-9]{4})([0-9]{4})$\"\n\tif re.match(pattern, num):\n\t\treturn True\n\treturn False\n\n# testing\nprint(validateCreditCardNumber('4556 6849 0002 2321')) # True\nprint(validateCreditCardNumber('123456789')) # False",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nBuild logic in Python for validating a standard credit card number.\n\n### Solution:\n```\nimport re\n\n# validates a credit card number\ndef validateCreditCardNumber(num):\n\t# check the length is 16 digits\n\tif len(num) != 16:\n\t\treturn False\n\t# use a regex to match the input\n\tpattern = \"^([0-9]{4})([0-9]{4})([0-9]{4})([0-9]{4})$\"\n\tif re.match(pattern, num):\n\t\treturn True\n\treturn False\n\n# testing\nprint(validateCreditCardNumber('4556 6849 0002 2321')) # True\nprint(validateCreditCardNumber('123456789')) # False\n```"
    },
    {
        "instruction": "Generate a graphical representation of a function using Python.",
        "output": "import matplotlib.pyplot as plt\n\nx = range(-10, 11)\ny = [2 * x_coord + 3 for x_coord in x]\nplt.plot(x, y)\nplt.title('Graph of the function: f(x) = 2x + 3')\nplt.xlabel('x')\nplt.ylabel('2x + 3')\n\nplt.show()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a graphical representation of a function using Python.\n\n### Solution:\n```\nimport matplotlib.pyplot as plt\n\nx = range(-10, 11)\ny = [2 * x_coord + 3 for x_coord in x]\nplt.plot(x, y)\nplt.title('Graph of the function: f(x) = 2x + 3')\nplt.xlabel('x')\nplt.ylabel('2x + 3')\n\nplt.show()\n```"
    },
    {
        "instruction": "Write a Python program that takes a list of numbers and finds the most frequently occuring element in it.",
        "output": "def find_most_frequent_element(in_list):\n    counts = {}\n    for element in in_list:\n        if element in counts:\n            counts[element] += 1\n        else:\n            counts[element] = 1\n    max_count = max(counts.values())\n    return [key for key,value in counts.items() if value == max_count][0]\n\nmost_frequent_element = find_most_frequent_element([2,3,5,7,3,3,4])\nprint(most_frequent_element)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program that takes a list of numbers and finds the most frequently occuring element in it.\n\n### Solution:\n```\ndef find_most_frequent_element(in_list):\n    counts = {}\n    for element in in_list:\n        if element in counts:\n            counts[element] += 1\n        else:\n            counts[element] = 1\n    max_count = max(counts.values())\n    return [key for key,value in counts.items() if value == max_count][0]\n\nmost_frequent_element = find_most_frequent_element([2,3,5,7,3,3,4])\nprint(most_frequent_element)\n```"
    },
    {
        "instruction": "Given a number of queues, each containing numbers, write python code to find and print out the numbers at the front of each queue.",
        "output": "def print_front_elements_from_queues(queue_list):\n    for queue in queue_list:\n        print(queue[0])\n\nqueue_list = [queue1, queue2]\n\nprint_front_elements_from_queues(queue_list) # This should print 5 and 7",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGiven a number of queues, each containing numbers, write python code to find and print out the numbers at the front of each queue.\n\n### Solution:\n```\ndef print_front_elements_from_queues(queue_list):\n    for queue in queue_list:\n        print(queue[0])\n\nqueue_list = [queue1, queue2]\n\nprint_front_elements_from_queues(queue_list) # This should print 5 and 7\n```"
    },
    {
        "instruction": "Design a function in Python for merging two dictionaries.",
        "output": "def merge_dicts(dict1, dict2):\n    dict3 = {**dict1, **dict2} \n    return dict3",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a function in Python for merging two dictionaries.\n\n### Solution:\n```\ndef merge_dicts(dict1, dict2):\n    dict3 = {**dict1, **dict2} \n    return dict3\n```"
    },
    {
        "instruction": "Generate a class for representing a 2D point in Python.",
        "output": "class Point2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def distance(self, other):\n        return ((self.x - other.x)**2 + (self.y - other.y)**2)**0.5\n\n# usage example        \np1 = Point2D(1, 1)\np2 = Point2D(5, 5)\nprint(p1.distance(p2)) # 4.242640687119285",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a class for representing a 2D point in Python.\n\n### Solution:\n```\nclass Point2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def distance(self, other):\n        return ((self.x - other.x)**2 + (self.y - other.y)**2)**0.5\n\n# usage example        \np1 = Point2D(1, 1)\np2 = Point2D(5, 5)\nprint(p1.distance(p2)) # 4.242640687119285\n```"
    },
    {
        "instruction": "Generate a function in Python to optimize a function based on the mean squared error metric.",
        "output": "import gradientDescent as GD\n\ndef optimize(weights):\n cost, gradient = GD.cost_function(f, weights)\n optimizer = GD.Optimizer(learning_rate=0.01, momentum=0.9, decay=0.001)\n optimizer.run(cost, gradient)\n return optimizer.weights",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a function in Python to optimize a function based on the mean squared error metric.\n\n### Solution:\n```\nimport gradientDescent as GD\n\ndef optimize(weights):\n cost, gradient = GD.cost_function(f, weights)\n optimizer = GD.Optimizer(learning_rate=0.01, momentum=0.9, decay=0.001)\n optimizer.run(cost, gradient)\n return optimizer.weights\n```"
    },
    {
        "instruction": "Create a python script to identify if a given string is a valid IPv4 address or not.",
        "output": "def is_valid_ipv4(ip):\n    parts = ip.split('.')\n    if len(parts) != 4:\n        return False\n    for part in parts:\n        if not part.isdigit():\n            return False\n        if int(part) < 0 or int(part) > 255:\n            return False\n    return True\n\nprint(is_valid_ipv4('192.168.25.688'))\n\nOutput: False",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a python script to identify if a given string is a valid IPv4 address or not.\n\n### Solution:\n```\ndef is_valid_ipv4(ip):\n    parts = ip.split('.')\n    if len(parts) != 4:\n        return False\n    for part in parts:\n        if not part.isdigit():\n            return False\n        if int(part) < 0 or int(part) > 255:\n            return False\n    return True\n\nprint(is_valid_ipv4('192.168.25.688'))\n\nOutput: False\n```"
    },
    {
        "instruction": "Write a Python program to implement a greedy algorithm to solve the given scheduling problem.",
        "output": "#Greedy algorithm to solve scheduling problem\n\n#Optimal order\norder = []\n\n#Sort jobs according to end time\npro_idx = [i[0] for i in sorted(enumerate(End), key=lambda x:x[1])]\n\n#Calculate result\ntotalProfit = 0\ncurr_time = 0\nfor i in range(len(pro_idx)):\n    #Choose job in optimal order\n    idx = pro_idx[i]\n \n    #Check if job starts later than current time\n    start = Start[idx]\n    if start >= curr_time:\n        order.append(idx + 1)\n        curr_time = End[idx]\n        totalProfit += Profit[idx]\n \n#Print results\nprint(\"Optimal order:\", order)\nprint(\"Maximum profit:\", totalProfit)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to implement a greedy algorithm to solve the given scheduling problem.\n\n### Solution:\n```\n#Greedy algorithm to solve scheduling problem\n\n#Optimal order\norder = []\n\n#Sort jobs according to end time\npro_idx = [i[0] for i in sorted(enumerate(End), key=lambda x:x[1])]\n\n#Calculate result\ntotalProfit = 0\ncurr_time = 0\nfor i in range(len(pro_idx)):\n    #Choose job in optimal order\n    idx = pro_idx[i]\n \n    #Check if job starts later than current time\n    start = Start[idx]\n    if start >= curr_time:\n        order.append(idx + 1)\n        curr_time = End[idx]\n        totalProfit += Profit[idx]\n \n#Print results\nprint(\"Optimal order:\", order)\nprint(\"Maximum profit:\", totalProfit)\n```"
    },
    {
        "instruction": "Edit the following Python code and make it more efficient.",
        "output": "def maxProfit(prices): \n    if not prices: \n        return 0\n    max_profit, min_price = 0, prices[0] \n    for price in prices[1:]: \n        min_price = min(min_price, price) \n        max_profit = max(max_profit, price - min_price) \n    return max_profit",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nEdit the following Python code and make it more efficient.\n\n### Solution:\n```\ndef maxProfit(prices): \n    if not prices: \n        return 0\n    max_profit, min_price = 0, prices[0] \n    for price in prices[1:]: \n        min_price = min(min_price, price) \n        max_profit = max(max_profit, price - min_price) \n    return max_profit\n```"
    },
    {
        "instruction": "Generate the syntax tree for a given Python expression.",
        "output": "import ast\n\ntree = ast.parse(expression)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate the syntax tree for a given Python expression.\n\n### Solution:\n```\nimport ast\n\ntree = ast.parse(expression)\n```"
    },
    {
        "instruction": "Create a Python script for implementing a linear search in an array of integers.",
        "output": "def linear_search(arr, key): \n    n = len(arr) \n  \n    for i in range(0, n): \n        if arr[i] == key: \n            return i\n    return -1",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python script for implementing a linear search in an array of integers.\n\n### Solution:\n```\ndef linear_search(arr, key): \n    n = len(arr) \n  \n    for i in range(0, n): \n        if arr[i] == key: \n            return i\n    return -1\n```"
    },
    {
        "instruction": "Write a Python code snippet to calculate the average of the given numbers.",
        "output": "def calc_avg(nums):\n    total = 0\n    for n in nums:\n        total += n\n \n    return total/len(nums)\n \navg = calc_avg([5, 10, 15, 20, 25])\nprint(avg)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python code snippet to calculate the average of the given numbers.\n\n### Solution:\n```\ndef calc_avg(nums):\n    total = 0\n    for n in nums:\n        total += n\n \n    return total/len(nums)\n \navg = calc_avg([5, 10, 15, 20, 25])\nprint(avg)\n```"
    },
    {
        "instruction": "Create a Python program to swap the first and last items in a list.",
        "output": "def swap(items):\n    temp = items[0]\n    items[0] = items[-1]\n    items[-1] = temp\n    return items",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to swap the first and last items in a list.\n\n### Solution:\n```\ndef swap(items):\n    temp = items[0]\n    items[0] = items[-1]\n    items[-1] = temp\n    return items\n```"
    },
    {
        "instruction": "Create a Python script to generate random passwords. The passwords should have at least 5 characters and should be able to contain uppercase, lowercase, numbers, and special characters.",
        "output": "import random\nimport string\n\ndef generate_password():\n    length = 5\n    chars = string.ascii_letters + string.digits + '!@#$%^&*()'\n    random.seed = (random.SystemRandom().random() * 1000000000)\n\n    return ''.join(random.choice(chars) for i in range(length))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python script to generate random passwords. The passwords should have at least 5 characters and should be able to contain uppercase, lowercase, numbers, and special characters.\n\n### Solution:\n```\nimport random\nimport string\n\ndef generate_password():\n    length = 5\n    chars = string.ascii_letters + string.digits + '!@#$%^&*()'\n    random.seed = (random.SystemRandom().random() * 1000000000)\n\n    return ''.join(random.choice(chars) for i in range(length))\n```"
    },
    {
        "instruction": "Construct a python program to copy an array.",
        "output": "def copyArray(arr): \n  \n    res = [] \n  \n    for i in range(len(arr)): \n        res.append(arr[i]) \n  \n    return res",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConstruct a python program to copy an array.\n\n### Solution:\n```\ndef copyArray(arr): \n  \n    res = [] \n  \n    for i in range(len(arr)): \n        res.append(arr[i]) \n  \n    return res\n```"
    },
    {
        "instruction": "Write a Python program to detect and remove the first vowel from a given string.",
        "output": "def removeVowel(string):\n # define a set of vowels \n vowels = {'a', 'e', 'i', 'o', 'u'}\n \n # loop through each character of the string \n for i in range(len(string)): \n # check if the character is a vowel \n if string[i] in vowels: \n # return the modified string \n return string[:i] + string[i + 1:]\n \nreturn string\n \nstring = \"this is a test string\"\nprint(removeVowel(string))\n# Output: thrs is a test strng",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to detect and remove the first vowel from a given string.\n\n### Solution:\n```\ndef removeVowel(string):\n # define a set of vowels \n vowels = {'a', 'e', 'i', 'o', 'u'}\n \n # loop through each character of the string \n for i in range(len(string)): \n # check if the character is a vowel \n if string[i] in vowels: \n # return the modified string \n return string[:i] + string[i + 1:]\n \nreturn string\n \nstring = \"this is a test string\"\nprint(removeVowel(string))\n# Output: thrs is a test strng\n```"
    },
    {
        "instruction": "Write a code snippet in Python to extract a substring from a given string.",
        "output": "def extract_substring(string):\n  return string[2:5]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a code snippet in Python to extract a substring from a given string.\n\n### Solution:\n```\ndef extract_substring(string):\n  return string[2:5]\n```"
    },
    {
        "instruction": "Find a way to write an entire program without using any looping constructs or if-else statements.",
        "output": "// In C\n#include <stdio.h>\n\nint main()\n{\n    int x = 0;\n    // Recurse to infinity\n    x = main();\n    printf(\"Infinite Recursion Complete\");\n    return 0;\n}\n\n// In Python\ndef recursive_call():\n  recursive_call()\n\nrecursive_call()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nFind a way to write an entire program without using any looping constructs or if-else statements.\n\n### Solution:\n```\n// In C\n#include <stdio.h>\n\nint main()\n{\n    int x = 0;\n    // Recurse to infinity\n    x = main();\n    printf(\"Infinite Recursion Complete\");\n    return 0;\n}\n\n// In Python\ndef recursive_call():\n  recursive_call()\n\nrecursive_call()\n```"
    },
    {
        "instruction": "Create an API endpoint in a python Flask application to get the list of items stored in a database table called products.",
        "output": "from flask import Flask, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3'\ndb = SQLAlchemy(app)\n\nclass Product(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  name = db.Column(db.String(40), nullable=False)\n\n@app.route('/products', methods=['GET'])\ndef get_products():\n  products = Product.query.all()\n  products_list = []\n  for product in products:\n    products_list.append({\n      'id': product.id,\n      'name': product.name\n    })\n  return  jsonify(products_list)\n\nif __name__ == '__main__':\n app.run(host='0.0.0.0', port=5000, debug=True)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate an API endpoint in a python Flask application to get the list of items stored in a database table called products.\n\n### Solution:\n```\nfrom flask import Flask, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3'\ndb = SQLAlchemy(app)\n\nclass Product(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  name = db.Column(db.String(40), nullable=False)\n\n@app.route('/products', methods=['GET'])\ndef get_products():\n  products = Product.query.all()\n  products_list = []\n  for product in products:\n    products_list.append({\n      'id': product.id,\n      'name': product.name\n    })\n  return  jsonify(products_list)\n\nif __name__ == '__main__':\n app.run(host='0.0.0.0', port=5000, debug=True)\n```"
    },
    {
        "instruction": "Create a Python script to categorize the following list of words.",
        "output": "words = [\"carpet\", \"chair\", \"table\", \"floor\"]\n\ncategories = {}\nfor word in words:\n    if word in [\"carpet\"]:\n        categories[\"furnishing\"] = categories.get(\"furnishing\", []) + [word]\n    elif word in [\"chair\", \"table\"]:\n        categories[\"furniture\"] = categories.get(\"furniture\", []) + [word]\n    elif word in [\"floor\"]:\n        categories[\"flooring\"] = categories.get(\"flooring\", []) + [word]\n    else:\n        categories[\"other\"] = categories.get(\"other\", []) + [word]\n\nprint(categories)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python script to categorize the following list of words.\n\n### Solution:\n```\nwords = [\"carpet\", \"chair\", \"table\", \"floor\"]\n\ncategories = {}\nfor word in words:\n    if word in [\"carpet\"]:\n        categories[\"furnishing\"] = categories.get(\"furnishing\", []) + [word]\n    elif word in [\"chair\", \"table\"]:\n        categories[\"furniture\"] = categories.get(\"furniture\", []) + [word]\n    elif word in [\"floor\"]:\n        categories[\"flooring\"] = categories.get(\"flooring\", []) + [word]\n    else:\n        categories[\"other\"] = categories.get(\"other\", []) + [word]\n\nprint(categories)\n```"
    },
    {
        "instruction": "Develop a system in Python for detecting plagiarism.",
        "output": "import difflib\n\ndef plagiarism_detector(string_a, string_b):\n    sequence = difflib.SequenceMatcher(None, string_a, string_b)\n    similarity = sequence.ratio() * 100\n    print('Similarity = {:.2f}%'.format(similarity))\n\nplagiarism_detector('The quick brown fox', 'The quick brown fox jumps over the lazy dog')",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop a system in Python for detecting plagiarism.\n\n### Solution:\n```\nimport difflib\n\ndef plagiarism_detector(string_a, string_b):\n    sequence = difflib.SequenceMatcher(None, string_a, string_b)\n    similarity = sequence.ratio() * 100\n    print('Similarity = {:.2f}%'.format(similarity))\n\nplagiarism_detector('The quick brown fox', 'The quick brown fox jumps over the lazy dog')\n```"
    },
    {
        "instruction": "Develop an algorithm in Python that takes an array of integers and finds two numbers whose sum is the given target.",
        "output": "def two_sum(arr, target):\n for num1 in arr:\n for num2 in arr:\n if num1 + num2 == target:\n return (num1, num2)\n\nresult = two_sum([1, 3, 5, 7, 9], 12)\nprint(result)\n# Output -> (5, 7)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop an algorithm in Python that takes an array of integers and finds two numbers whose sum is the given target.\n\n### Solution:\n```\ndef two_sum(arr, target):\n for num1 in arr:\n for num2 in arr:\n if num1 + num2 == target:\n return (num1, num2)\n\nresult = two_sum([1, 3, 5, 7, 9], 12)\nprint(result)\n# Output -> (5, 7)\n```"
    },
    {
        "instruction": "Design a Python class for an Employee, containing person's name, age, salary, and designation.",
        "output": "class Employee: \n    def __init__(self, name, age, salary, designation): \n        self.name = name \n        self.age = age \n        self.salary = salary \n        self.designation = designation \n  \n    def get_details(self): \n        return self.name + \" \" + str(self.age) + \" \" + str(self.salary) + \" \" + self.designation \n  \n    def __str__(self): \n        return self.name + \" \" + str(self.age) + \" \" + str(self.salary) + \" \" + self.designation",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a Python class for an Employee, containing person's name, age, salary, and designation.\n\n### Solution:\n```\nclass Employee: \n    def __init__(self, name, age, salary, designation): \n        self.name = name \n        self.age = age \n        self.salary = salary \n        self.designation = designation \n  \n    def get_details(self): \n        return self.name + \" \" + str(self.age) + \" \" + str(self.salary) + \" \" + self.designation \n  \n    def __str__(self): \n        return self.name + \" \" + str(self.age) + \" \" + str(self.salary) + \" \" + self.designation\n```"
    },
    {
        "instruction": "Write a Python function to generate a multiplication table for a given number.",
        "output": "def generate_table(num):\n    # print the table heading\n    print(\"MULTIPLICATION TABLE FOR {}\".format(num))\n    # generate the table\n    for i in range(1, 11):\n        print(\"{} x {} = {}\".format(num, i, num*i))\n\n# generate table for 9\ngenerate_table(9)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python function to generate a multiplication table for a given number.\n\n### Solution:\n```\ndef generate_table(num):\n    # print the table heading\n    print(\"MULTIPLICATION TABLE FOR {}\".format(num))\n    # generate the table\n    for i in range(1, 11):\n        print(\"{} x {} = {}\".format(num, i, num*i))\n\n# generate table for 9\ngenerate_table(9)\n```"
    },
    {
        "instruction": "Design an automated system in Python to remove all even numbers from a list.",
        "output": "def remove_even(list):\n    return [i for i in list if i%2 != 0]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign an automated system in Python to remove all even numbers from a list.\n\n### Solution:\n```\ndef remove_even(list):\n    return [i for i in list if i%2 != 0]\n```"
    },
    {
        "instruction": "Create a Python function to return a list that its elements are in descending order based on input parameter.",
        "output": "def sort_descending(lst):\n    return sorted(lst, reverse=True)\n  \n# Example \nlist_sample = [7, 4, 3, 10, 2, 1]\nresult = sort_descending(list_sample)  \nprint(result) \n# Output: [10, 7, 4, 3, 2, 1]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python function to return a list that its elements are in descending order based on input parameter.\n\n### Solution:\n```\ndef sort_descending(lst):\n    return sorted(lst, reverse=True)\n  \n# Example \nlist_sample = [7, 4, 3, 10, 2, 1]\nresult = sort_descending(list_sample)  \nprint(result) \n# Output: [10, 7, 4, 3, 2, 1]\n```"
    },
    {
        "instruction": "Design a Python script to insert a given string at the beginning and end of a given array.",
        "output": "def insertBeginningAndEnd(arr, str):\n    result = []\n    for element in arr:\n        result.append(str + element + str)\n\n    return result\n\nresult = insertBeginningAndEnd([\"hello\", \"world\"], \"***\")\nprint(result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a Python script to insert a given string at the beginning and end of a given array.\n\n### Solution:\n```\ndef insertBeginningAndEnd(arr, str):\n    result = []\n    for element in arr:\n        result.append(str + element + str)\n\n    return result\n\nresult = insertBeginningAndEnd([\"hello\", \"world\"], \"***\")\nprint(result)\n```"
    },
    {
        "instruction": "Generate a two-dimensional array of ones using Python.",
        "output": "import numpy as np \n\narr = np.ones((r,c))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a two-dimensional array of ones using Python.\n\n### Solution:\n```\nimport numpy as np \n\narr = np.ones((r,c))\n```"
    },
    {
        "instruction": "Generate a function in Python that takes a number as input and prints its corresponding binary representation.",
        "output": "def binary_representation(num):\n    binary_representation = bin(num)[2:] \n    print(\"Binary representation of \" + str(num) + \" is: \" + binary_representation)\n\n# Driver code\nbinary_representation(5) # Binary representation of 5 is: 101",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a function in Python that takes a number as input and prints its corresponding binary representation.\n\n### Solution:\n```\ndef binary_representation(num):\n    binary_representation = bin(num)[2:] \n    print(\"Binary representation of \" + str(num) + \" is: \" + binary_representation)\n\n# Driver code\nbinary_representation(5) # Binary representation of 5 is: 101\n```"
    },
    {
        "instruction": "Create a command-line tool in Python with a single argument --number. The tool should prompt for a number, then calculate and print the factorial of the number.",
        "output": "import sys\n\ndef factorial(n):\n if n == 1 or n == 0:\n return 1\n else:\n return n * factorial(n-1)\n\nif __name__ == '__main__':\n if len(sys.argv) > 1 and sys.argv[1] == '--number':\n try:\n number = int(input('Please enter a number: '))\n print(f'{number}! = {factorial(number)}')\n except ValueError:\n print('Please enter a valid number.')\nelse:\n print('Please provide a single argument --number')",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a command-line tool in Python with a single argument --number. The tool should prompt for a number, then calculate and print the factorial of the number.\n\n### Solution:\n```\nimport sys\n\ndef factorial(n):\n if n == 1 or n == 0:\n return 1\n else:\n return n * factorial(n-1)\n\nif __name__ == '__main__':\n if len(sys.argv) > 1 and sys.argv[1] == '--number':\n try:\n number = int(input('Please enter a number: '))\n print(f'{number}! = {factorial(number)}')\n except ValueError:\n print('Please enter a valid number.')\nelse:\n print('Please provide a single argument --number')\n```"
    },
    {
        "instruction": "Write a Python program to print out the triangle pattern given an height n as input.",
        "output": "def print_triangle(n): \n\n    for i in range(n): \n        for j in range(i+1): \n            print(\"*\",end=\"\") \n        print() \n  \nn = 4\nprint_triangle(n)\n\n# Output\n# *\n# **\n# ***\n# ****",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to print out the triangle pattern given an height n as input.\n\n### Solution:\n```\ndef print_triangle(n): \n\n    for i in range(n): \n        for j in range(i+1): \n            print(\"*\",end=\"\") \n        print() \n  \nn = 4\nprint_triangle(n)\n\n# Output\n# *\n# **\n# ***\n# ****\n```"
    },
    {
        "instruction": "Write a Python function to check whether a number is in a given range.",
        "output": "def check_range(num, lower, upper):\n        return (num >= lower and num <= upper)\n \nprint(check_range(10, 10, 20)) # prints True",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python function to check whether a number is in a given range.\n\n### Solution:\n```\ndef check_range(num, lower, upper):\n        return (num >= lower and num <= upper)\n \nprint(check_range(10, 10, 20)) # prints True\n```"
    },
    {
        "instruction": "Write a web scraper in Python to collect all the articles from the front page of a given website.",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# Specify the URL\nurl = 'website.com'\n\n# Get the response\nresponse = requests.get(url)\n\n# Parse the response\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Extract all the articles on the front page\narticles = soup.find_all('article', class_='front-page-article')\n\n# Iterate through each article and print its text\nfor article in articles:\n print(article.find('h2').text)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a web scraper in Python to collect all the articles from the front page of a given website.\n\n### Solution:\n```\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Specify the URL\nurl = 'website.com'\n\n# Get the response\nresponse = requests.get(url)\n\n# Parse the response\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Extract all the articles on the front page\narticles = soup.find_all('article', class_='front-page-article')\n\n# Iterate through each article and print its text\nfor article in articles:\n print(article.find('h2').text)\n```"
    },
    {
        "instruction": "Generate Python code to predict whether a Iris flower is a setosa or not.",
        "output": "import sklearn\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\n\niris = datasets.load_iris()\nX = iris.data\ny = iris.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\n\nX_new = np.array([[5.2,3.5,1.4,0.2]])\nprediction = knn.predict(X_new)\n\nif int(prediction) == 0:\n print('The flower is a Setosa.')\nelif int(prediction) == 1:\n print('The flower is a Versicolor.')\nelse:\n print('The flower is a Virginica.')",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate Python code to predict whether a Iris flower is a setosa or not.\n\n### Solution:\n```\nimport sklearn\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\n\niris = datasets.load_iris()\nX = iris.data\ny = iris.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\n\nX_new = np.array([[5.2,3.5,1.4,0.2]])\nprediction = knn.predict(X_new)\n\nif int(prediction) == 0:\n print('The flower is a Setosa.')\nelif int(prediction) == 1:\n print('The flower is a Versicolor.')\nelse:\n print('The flower is a Virginica.')\n```"
    },
    {
        "instruction": "Write a Python script that takes in two strings and finds the longest common subsequence.",
        "output": "def find_lcs(str1, str2):\n # create a matrix to store solutions to subproblems \n dp = [[0 for j in range(len(str2) + 1)] for i in range(len(str1) + 1)]\n\n # fill the lookup table in bottom-up manner\n for i in range(1, len(str1) + 1):\n  for j in range(1, len(str2) + 1):\n   if str1[i-1] == str2[j-1]:\n    dp[i][j] = 1 + dp[i-1][j-1]\n   else:\n    dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n \n # find the longest common sub sequence\n i, j = len(str1), len(str2)\n lcs = \"\"\n while i > 0 and j > 0:\n  if str1[i-1] == str2[j-1]:\n   lcs += str1[i-1]\n   i-=1\n   j-=1\n  elif dp[i][j-1] > dp[i-1][j]:\n   j-=1\n  else:\n   i-=1\n \n # Reverse the lcs string \n return lcs[::-1]\n\nstr1 = \"ACBA\"\nstr2 = \"ABAC\"\n\nprint(find_lcs(str1, str2))\n\n# Output: ACBA",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python script that takes in two strings and finds the longest common subsequence.\n\n### Solution:\n```\ndef find_lcs(str1, str2):\n # create a matrix to store solutions to subproblems \n dp = [[0 for j in range(len(str2) + 1)] for i in range(len(str1) + 1)]\n\n # fill the lookup table in bottom-up manner\n for i in range(1, len(str1) + 1):\n  for j in range(1, len(str2) + 1):\n   if str1[i-1] == str2[j-1]:\n    dp[i][j] = 1 + dp[i-1][j-1]\n   else:\n    dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n \n # find the longest common sub sequence\n i, j = len(str1), len(str2)\n lcs = \"\"\n while i > 0 and j > 0:\n  if str1[i-1] == str2[j-1]:\n   lcs += str1[i-1]\n   i-=1\n   j-=1\n  elif dp[i][j-1] > dp[i-1][j]:\n   j-=1\n  else:\n   i-=1\n \n # Reverse the lcs string \n return lcs[::-1]\n\nstr1 = \"ACBA\"\nstr2 = \"ABAC\"\n\nprint(find_lcs(str1, str2))\n\n# Output: ACBA\n```"
    },
    {
        "instruction": "Design a user interface in Python to capture a personal profile details.",
        "output": "def get_profile_details():\n    \n    name = input(\"Please enter your name: \")\n    age = int(input(\"Please enter your age: \"))\n    city = input(\"Please enter your city: \")\n    country = input(\"Please enter your country: \")\n    occupation = input(\"Please enter your occupation (if any): \")\n    \n    profile_details = {\n        'name': name,\n        'age': age,\n        'city': city,\n        'country': country,\n        'occupation': occupation\n    }\n    \n    return profile_details\n\n# Driver code\nprint(get_profile_details())",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a user interface in Python to capture a personal profile details.\n\n### Solution:\n```\ndef get_profile_details():\n    \n    name = input(\"Please enter your name: \")\n    age = int(input(\"Please enter your age: \"))\n    city = input(\"Please enter your city: \")\n    country = input(\"Please enter your country: \")\n    occupation = input(\"Please enter your occupation (if any): \")\n    \n    profile_details = {\n        'name': name,\n        'age': age,\n        'city': city,\n        'country': country,\n        'occupation': occupation\n    }\n    \n    return profile_details\n\n# Driver code\nprint(get_profile_details())\n```"
    },
    {
        "instruction": "Utilizing the given data, write a Python code to calculate the average of numbers stored in a list.",
        "output": "def calculate_average(lst):\nsum = 0\nfor num in lst:\n sum+=num\navg = sum/len(lst)\nreturn avg\n\nlist = [2, 3, 6, 8, 9]\naverage = calculate_average(list)\nprint(\"Average of list:\", average)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nUtilizing the given data, write a Python code to calculate the average of numbers stored in a list.\n\n### Solution:\n```\ndef calculate_average(lst):\nsum = 0\nfor num in lst:\n sum+=num\navg = sum/len(lst)\nreturn avg\n\nlist = [2, 3, 6, 8, 9]\naverage = calculate_average(list)\nprint(\"Average of list:\", average)\n```"
    },
    {
        "instruction": "Write a Python program to take a string as input and return a new string with all vowels removed.",
        "output": "def remove_vowels(string):\n    # compile regex\n    regex = re.compile('[aeiou]', re.IGNORECASE)\n    # replace matching characters with an empty string\n    return regex.sub('', string)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to take a string as input and return a new string with all vowels removed.\n\n### Solution:\n```\ndef remove_vowels(string):\n    # compile regex\n    regex = re.compile('[aeiou]', re.IGNORECASE)\n    # replace matching characters with an empty string\n    return regex.sub('', string)\n```"
    },
    {
        "instruction": "Implement a Python program to print the following structure using for loop.",
        "output": "# Program to print pyramid pattern in Python\n\nfor i in range(0,5):\n    for j in range(0,i+1):\n        print(\"*\",end=\"\")\n    print(\"\\r\")\n\n\"\"\"\n*\n**\n***\n****\n*****\n\"\"\"",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nImplement a Python program to print the following structure using for loop.\n\n### Solution:\n```\n# Program to print pyramid pattern in Python\n\nfor i in range(0,5):\n    for j in range(0,i+1):\n        print(\"*\",end=\"\")\n    print(\"\\r\")\n\n\"\"\"\n*\n**\n***\n****\n*****\n\"\"\"\n```"
    },
    {
        "instruction": "Generate code for an ML model object-tracking system in Python. The system should be able to detect the objects like pedestrian, vehicle, animals and track the movement of the object.",
        "output": "import cv2\nimport numpy as np\n\n# Setup Video Capture\ncap = cv2.VideoCapture(0) # 0 is the default webcam\n\n# Object Classifier\nobject_classifier = cv2.CascadeClassifier('object.xml')\n\n# Tracking\nwhile True: \n ret, frame = cap.read()\n gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n\n # Detect Objects\n objects = object_classifier.detectMultiScale(gray, 1.3, 5)\n\n for (x,y,w,h) in objects:\n cv2.rectangle(frame, (x,y), (x+w, y+h), (255,0,0), 2)\n cv2.putText(frame, 'Objects', (x,y), cv2.FONT_HERSHEY_COMPLEX, 1, (0,255,0), 2)\n\n # Track the objects\n cv2.imshow('Object Tracking', frame)\n if cv2.waitKey(1) == 27: # Press Escape to exit\n break\n\ncap.release()\ncv2.destroyAllWindows()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate code for an ML model object-tracking system in Python. The system should be able to detect the objects like pedestrian, vehicle, animals and track the movement of the object.\n\n### Solution:\n```\nimport cv2\nimport numpy as np\n\n# Setup Video Capture\ncap = cv2.VideoCapture(0) # 0 is the default webcam\n\n# Object Classifier\nobject_classifier = cv2.CascadeClassifier('object.xml')\n\n# Tracking\nwhile True: \n ret, frame = cap.read()\n gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n\n # Detect Objects\n objects = object_classifier.detectMultiScale(gray, 1.3, 5)\n\n for (x,y,w,h) in objects:\n cv2.rectangle(frame, (x,y), (x+w, y+h), (255,0,0), 2)\n cv2.putText(frame, 'Objects', (x,y), cv2.FONT_HERSHEY_COMPLEX, 1, (0,255,0), 2)\n\n # Track the objects\n cv2.imshow('Object Tracking', frame)\n if cv2.waitKey(1) == 27: # Press Escape to exit\n break\n\ncap.release()\ncv2.destroyAllWindows()\n```"
    },
    {
        "instruction": "Generate a Python code for a decision tree classifier.",
        "output": "import pandas as pd\nfrom sklearn import tree\n\n# Load the data\ndata = pd.read_csv('data.csv')\nX = data[['height', 'weight']]\ny = data['gender']\n\n# Train the model\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)\n\n# Make a prediction\nprediction = clf.predict([[180, 80]])\nprint(prediction)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python code for a decision tree classifier.\n\n### Solution:\n```\nimport pandas as pd\nfrom sklearn import tree\n\n# Load the data\ndata = pd.read_csv('data.csv')\nX = data[['height', 'weight']]\ny = data['gender']\n\n# Train the model\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)\n\n# Make a prediction\nprediction = clf.predict([[180, 80]])\nprint(prediction)\n```"
    },
    {
        "instruction": "Create a Python class to represent a 3D vector object",
        "output": "class Vector3D(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def __str__(self):\n        return f\"Vector3D({self.x}, {self.y}, {self.z})\"\n    \n    def __add__(self, other):\n        return Vector3D(self.x + other.x,\n                        self.y + other.y,\n                        self.z + other.z)\n    \n    def __mul__(self, scalar):\n        return Vector3D(self.x * scalar,\n                        self.y * scalar,\n                        self.z * scalar)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python class to represent a 3D vector object\n\n### Solution:\n```\nclass Vector3D(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def __str__(self):\n        return f\"Vector3D({self.x}, {self.y}, {self.z})\"\n    \n    def __add__(self, other):\n        return Vector3D(self.x + other.x,\n                        self.y + other.y,\n                        self.z + other.z)\n    \n    def __mul__(self, scalar):\n        return Vector3D(self.x * scalar,\n                        self.y * scalar,\n                        self.z * scalar)\n```"
    },
    {
        "instruction": "Write a function in Python to identify all the keywords present in a given sentence.",
        "output": "def find_keywords(sentence):\n keywords = set()\n words = sentence.split(' ')\n for word in words:\n  if word.iskeyword():\n   keywords.add(word)\n return list(keywords)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a function in Python to identify all the keywords present in a given sentence.\n\n### Solution:\n```\ndef find_keywords(sentence):\n keywords = set()\n words = sentence.split(' ')\n for word in words:\n  if word.iskeyword():\n   keywords.add(word)\n return list(keywords)\n```"
    },
    {
        "instruction": "Write a function in Python to find the sum of two arguments.",
        "output": "def sum(num1, num2): \n    return num1 + num2",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a function in Python to find the sum of two arguments.\n\n### Solution:\n```\ndef sum(num1, num2): \n    return num1 + num2\n```"
    },
    {
        "instruction": "Create a list in Python that stores the names of 10 different fruits.",
        "output": "fruits = ['apple', 'banana', 'grape', 'pineapple', 'strawberry', 'orange', 'mango', 'pear', 'peach', 'kiwi']",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a list in Python that stores the names of 10 different fruits.\n\n### Solution:\n```\nfruits = ['apple', 'banana', 'grape', 'pineapple', 'strawberry', 'orange', 'mango', 'pear', 'peach', 'kiwi']\n```"
    },
    {
        "instruction": "Write a code in Python to evaluate the expression 3x + 5 for any given x",
        "output": "def expression(x):\n    return 3 * x + 5\n\nprint(expression(7))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a code in Python to evaluate the expression 3x + 5 for any given x\n\n### Solution:\n```\ndef expression(x):\n    return 3 * x + 5\n\nprint(expression(7))\n```"
    },
    {
        "instruction": "Generate a Python program that scrambles the input string by randomly switching the positions of the characters.",
        "output": "import random\n\ninput_string = \"Hello World\"\n\n#Split the given string\nstring_list = list(input_string)\nrandom.shuffle(string_list)\n\n#Form the scrambled string\nscrambled_string = \"\".join(string_list) \n\nprint(\"Scrambled string:\",scrambled_string)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python program that scrambles the input string by randomly switching the positions of the characters.\n\n### Solution:\n```\nimport random\n\ninput_string = \"Hello World\"\n\n#Split the given string\nstring_list = list(input_string)\nrandom.shuffle(string_list)\n\n#Form the scrambled string\nscrambled_string = \"\".join(string_list) \n\nprint(\"Scrambled string:\",scrambled_string)\n```"
    },
    {
        "instruction": "Generate Python code that collects all the even numbers from a given list of numbers.",
        "output": "def collect_even_numbers(nums):\n    even_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate Python code that collects all the even numbers from a given list of numbers.\n\n### Solution:\n```\ndef collect_even_numbers(nums):\n    even_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n```"
    },
    {
        "instruction": "Write a Python script to predict the sentiment of a given sentence using the TextBlob library.",
        "output": "import textblob\n\nsentence = \"Life is full of surprises.\"\nsentiment = textblob.TextBlob(sentence).sentiment.polarity\n\nif sentiment == 0:\n # neutral sentiment\n print(\"Neutral Sentiment\")\nelif sentiment > 0:\n # positive sentiment\n print(\"Positive Sentiment\")\nelse:\n # negative sentiment\n print(\"Negative Sentiment\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python script to predict the sentiment of a given sentence using the TextBlob library.\n\n### Solution:\n```\nimport textblob\n\nsentence = \"Life is full of surprises.\"\nsentiment = textblob.TextBlob(sentence).sentiment.polarity\n\nif sentiment == 0:\n # neutral sentiment\n print(\"Neutral Sentiment\")\nelif sentiment > 0:\n # positive sentiment\n print(\"Positive Sentiment\")\nelse:\n # negative sentiment\n print(\"Negative Sentiment\")\n```"
    },
    {
        "instruction": "Using the provided input, write a Python program to calculate the sum of the digits of a given number.",
        "output": "def sum_of_digits(number):\n    result = 0\n    while number > 0:\n        result += number % 10\n        number = number // 10\n    return result\n    \nif __name__ == '__main__':\n    number = 123\n    print(sum_of_digits(number))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nUsing the provided input, write a Python program to calculate the sum of the digits of a given number.\n\n### Solution:\n```\ndef sum_of_digits(number):\n    result = 0\n    while number > 0:\n        result += number % 10\n        number = number // 10\n    return result\n    \nif __name__ == '__main__':\n    number = 123\n    print(sum_of_digits(number))\n```"
    },
    {
        "instruction": "Create a function to generate all permutations of a given list in Python.",
        "output": "# Solution\n# First, let's define our list of numbers\nmy_list = [1, 2, 3]\n\n# Now, let's define a function to generate all permutations\ndef allPermutations(my_list):\n if len(my_list) == 0:\n  return []\n if len(my_list) == 1:\n  return [my_list]\n permutations = []\n for i in range(len(my_list)):\n  m = my_list[i]\n  remaining_list = my_list[:i] + my_list[i+1:]\n  for p in allPermutations(remaining_list):\n   permutations.append([m] + p)\n return permutations\n\n# Finally, we can call the function and print out the result\nprint(allPermutations(my_list))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a function to generate all permutations of a given list in Python.\n\n### Solution:\n```\n# Solution\n# First, let's define our list of numbers\nmy_list = [1, 2, 3]\n\n# Now, let's define a function to generate all permutations\ndef allPermutations(my_list):\n if len(my_list) == 0:\n  return []\n if len(my_list) == 1:\n  return [my_list]\n permutations = []\n for i in range(len(my_list)):\n  m = my_list[i]\n  remaining_list = my_list[:i] + my_list[i+1:]\n  for p in allPermutations(remaining_list):\n   permutations.append([m] + p)\n return permutations\n\n# Finally, we can call the function and print out the result\nprint(allPermutations(my_list))\n```"
    },
    {
        "instruction": "Describe a method to find the greatest common divisor (GCD) of two numbers in Python.",
        "output": "def gcd(a, b): \n    if a == 0 : \n        return b  \n    if b == 0 : \n        return a  \n  \n    if a == b: \n        return a \n  \n    if a > b: \n        return gcd(a-b, b) \n    return gcd(a, b-a) \n  \n# Driver program to test above function \na = 36 \nb = 30\n  \nif(gcd(a, b)): \n    print('GCD of', a, 'and', b, 'is', gcd(a, b))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDescribe a method to find the greatest common divisor (GCD) of two numbers in Python.\n\n### Solution:\n```\ndef gcd(a, b): \n    if a == 0 : \n        return b  \n    if b == 0 : \n        return a  \n  \n    if a == b: \n        return a \n  \n    if a > b: \n        return gcd(a-b, b) \n    return gcd(a, b-a) \n  \n# Driver program to test above function \na = 36 \nb = 30\n  \nif(gcd(a, b)): \n    print('GCD of', a, 'and', b, 'is', gcd(a, b))\n```"
    },
    {
        "instruction": "Optimize this Python code to count the number of occurrences of an element in an array.",
        "output": "def countOccurrences(arr, x): \n  \n    count = 0\n    n = len(arr) \n    for i in range(0, n): \n        if (x == arr[i]): \n            count = count + 1\n  \n    return count \n  \n# Driver code \narr = [2, 3, 3, 10, 12] \nx = 3\nassert countOccurrences(arr, x) == 2",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nOptimize this Python code to count the number of occurrences of an element in an array.\n\n### Solution:\n```\ndef countOccurrences(arr, x): \n  \n    count = 0\n    n = len(arr) \n    for i in range(0, n): \n        if (x == arr[i]): \n            count = count + 1\n  \n    return count \n  \n# Driver code \narr = [2, 3, 3, 10, 12] \nx = 3\nassert countOccurrences(arr, x) == 2\n```"
    },
    {
        "instruction": "write a python program to split an array of numbers into two halves for sorting.",
        "output": "\"\"\"Split an array of numbers into two halves\"\"\"\n\ndef split_array(arr):\n    # Find the middle point\n    mid = len(arr) // 2\n    # Split the array into two halves\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    return left_half, right_half\n\nif __name__ == '__main__':\n    arr = [4, 6, 2, 7, 9]\n    left_half, right_half = split_array(arr)\n    print(\"Left Half:\", left_half)\n    print(\"Right Half:\", right_half)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nwrite a python program to split an array of numbers into two halves for sorting.\n\n### Solution:\n```\n\"\"\"Split an array of numbers into two halves\"\"\"\n\ndef split_array(arr):\n    # Find the middle point\n    mid = len(arr) // 2\n    # Split the array into two halves\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    return left_half, right_half\n\nif __name__ == '__main__':\n    arr = [4, 6, 2, 7, 9]\n    left_half, right_half = split_array(arr)\n    print(\"Left Half:\", left_half)\n    print(\"Right Half:\", right_half)\n```"
    },
    {
        "instruction": "Design a function in Python to calculate the average of given numbers.",
        "output": "def calculate_average(numbers):\n    total = 0\n    for number in numbers:\n        total = total + number\n    return total / len(numbers)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a function in Python to calculate the average of given numbers.\n\n### Solution:\n```\ndef calculate_average(numbers):\n    total = 0\n    for number in numbers:\n        total = total + number\n    return total / len(numbers)\n```"
    },
    {
        "instruction": "Create a python program to read two strings of different lengths and find the longest common substring between them.",
        "output": "def longest_common_substring(str1, str2):\n    lcs = \"\"\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            if str1[i] == str2[j]:\n                tmp = str1[i]\n                k = i + 1\n                l = j + 1\n                while k < len(str1) and l < len(str2) and str1[k] == str2[l]:\n                    tmp += str1[k]\n                    k += 1\n                    l += 1\n                if len(tmp) > len(lcs):\n                    lcs = tmp\n    return lcs",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a python program to read two strings of different lengths and find the longest common substring between them.\n\n### Solution:\n```\ndef longest_common_substring(str1, str2):\n    lcs = \"\"\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            if str1[i] == str2[j]:\n                tmp = str1[i]\n                k = i + 1\n                l = j + 1\n                while k < len(str1) and l < len(str2) and str1[k] == str2[l]:\n                    tmp += str1[k]\n                    k += 1\n                    l += 1\n                if len(tmp) > len(lcs):\n                    lcs = tmp\n    return lcs\n```"
    },
    {
        "instruction": "Generate a python program to generate a json response based on following specification",
        "output": "import json\n\ndata = {\n    'name': 'John Doe',\n    'email': 'john@example.com',\n    'age': 32\n}\n\njson_data = json.dumps(data)\nprint(json_data)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a python program to generate a json response based on following specification\n\n### Solution:\n```\nimport json\n\ndata = {\n    'name': 'John Doe',\n    'email': 'john@example.com',\n    'age': 32\n}\n\njson_data = json.dumps(data)\nprint(json_data)\n```"
    },
    {
        "instruction": "Create an algorithm to convert temperatures from Celsius to Fahrenheit in Python.",
        "output": "def celcius_to_fahrenheit(temp):\n    return ((temp*9/5) + 32)\n\nprint(celcius_to_fahrenheit(20))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate an algorithm to convert temperatures from Celsius to Fahrenheit in Python.\n\n### Solution:\n```\ndef celcius_to_fahrenheit(temp):\n    return ((temp*9/5) + 32)\n\nprint(celcius_to_fahrenheit(20))\n```"
    },
    {
        "instruction": "Read the following data structure and create an equivalent dictionary in Python.",
        "output": "data = {\n    'height': '150cm',\n    'age': 20,\n    'name': 'John'\n}",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nRead the following data structure and create an equivalent dictionary in Python.\n\n### Solution:\n```\ndata = {\n    'height': '150cm',\n    'age': 20,\n    'name': 'John'\n}\n```"
    },
    {
        "instruction": "Construct a Python function to filter out all the words from a list that contains the letter \"a\".",
        "output": "def filter_words_with_a(words):\n return [word for word in words if \"a\" in word]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConstruct a Python function to filter out all the words from a list that contains the letter \"a\".\n\n### Solution:\n```\ndef filter_words_with_a(words):\n return [word for word in words if \"a\" in word]\n```"
    },
    {
        "instruction": "Write a Python program that takes an integer as input and returns a list which contains all the prime numbers up to the given integer.",
        "output": "def generate_prime_numbers(n):\n    prime_numbers = []\n    for num in range(2, n + 1):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            prime_numbers.append(num)\n    return prime_numbers\n\nif __name__ == \"__main__\":\n    n = 10\n    prime_numbers = generate_prime_numbers(n)\n    print(prime_numbers) # Output: [2, 3, 5, 7]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program that takes an integer as input and returns a list which contains all the prime numbers up to the given integer.\n\n### Solution:\n```\ndef generate_prime_numbers(n):\n    prime_numbers = []\n    for num in range(2, n + 1):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            prime_numbers.append(num)\n    return prime_numbers\n\nif __name__ == \"__main__\":\n    n = 10\n    prime_numbers = generate_prime_numbers(n)\n    print(prime_numbers) # Output: [2, 3, 5, 7]\n```"
    },
    {
        "instruction": "Using python, modify the code provided below to add the items in the list.",
        "output": "list = [1,2,3,4]\nsum = 0\n\nfor item in list:\n    sum += item\n\nprint(sum)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nUsing python, modify the code provided below to add the items in the list.\n\n### Solution:\n```\nlist = [1,2,3,4]\nsum = 0\n\nfor item in list:\n    sum += item\n\nprint(sum)\n```"
    },
    {
        "instruction": "Given a list of strings, write a Python function to remove all the whitespaces from each string.",
        "output": "def remove_whitespace(word_list):\n    return [word.strip() for word in word_list]\n\nstripped_list = remove_whitespace(['Hello  World  ', 'Hi  there', 'Good  Morning'])\nprint(stripped_list)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGiven a list of strings, write a Python function to remove all the whitespaces from each string.\n\n### Solution:\n```\ndef remove_whitespace(word_list):\n    return [word.strip() for word in word_list]\n\nstripped_list = remove_whitespace(['Hello  World  ', 'Hi  there', 'Good  Morning'])\nprint(stripped_list)\n```"
    },
    {
        "instruction": "Create a Python program to convert a list of words into its corresponding abbreviations.",
        "output": "def word_abbreviations(words):\n abbreviations = []\n for word in words:\n  abbreviations.append(word[0].upper() + str(len(word)-2) + word[-1].upper())\n return abbreviations\n\nlist_of_words = [\"Hello\",\"World\",\"Amazing\"]\nprint(word_abbreviations(list_of_words))\n\nOutput: ['H4o', 'W4d', 'A5g']",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to convert a list of words into its corresponding abbreviations.\n\n### Solution:\n```\ndef word_abbreviations(words):\n abbreviations = []\n for word in words:\n  abbreviations.append(word[0].upper() + str(len(word)-2) + word[-1].upper())\n return abbreviations\n\nlist_of_words = [\"Hello\",\"World\",\"Amazing\"]\nprint(word_abbreviations(list_of_words))\n\nOutput: ['H4o', 'W4d', 'A5g']\n```"
    },
    {
        "instruction": "Design a program in Python to calculate the sum of prime numbers between 1 to n",
        "output": "\"\"\"\nDesign a program in Python to calculate the sum of prime numbers between 1 to n\n\"\"\"\n\n# Function to check for prime numbers\ndef isPrime(num):\n    for n in range(2, num):\n        if (num % n) == 0:\n            return False\n    return True\n\n# Get the sum of prime numbers from 0 to n\ndef sum_prime_numbers(n):\n    prime_sum = 0\n    for i in range(2,n+1):\n        if isPrime(i):\n            prime_sum += i\n    return prime_sum\n\nif __name__ == '__main__':\n    n = 10\n    print(f'The sum of prime numbers from 0 to {n} is: {sum_prime_numbers(n)}')",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a program in Python to calculate the sum of prime numbers between 1 to n\n\n### Solution:\n```\n\"\"\"\nDesign a program in Python to calculate the sum of prime numbers between 1 to n\n\"\"\"\n\n# Function to check for prime numbers\ndef isPrime(num):\n    for n in range(2, num):\n        if (num % n) == 0:\n            return False\n    return True\n\n# Get the sum of prime numbers from 0 to n\ndef sum_prime_numbers(n):\n    prime_sum = 0\n    for i in range(2,n+1):\n        if isPrime(i):\n            prime_sum += i\n    return prime_sum\n\nif __name__ == '__main__':\n    n = 10\n    print(f'The sum of prime numbers from 0 to {n} is: {sum_prime_numbers(n)}')\n```"
    },
    {
        "instruction": "Create an algorithm in Python for finding the longest common substring of two strings.",
        "output": "# Function to find the longest common substring \ndef longestSubstring(s1, s2): \n \n\t# Create an array \n\tmat = [[0 for col in range(len(s2)+1)]  \n                         for row in range(len(s1)+1)] \n\t\n\t# Set maximum to 0 \n\tlargestCount = 0\n\n\t# Iterate through array \n\tfor x in range(1, len(s1)+1):\n\t\tfor y in range(1, len(s2)+1):\n\t\t\t\t# If there is a match, count increases by 1\n\t\t\t\tif (s1[x-1] == s2[y-1]):\n\t\t\t\t\tmat[x][y] = mat[x-1][y-1] + 1\n\t\t\t\t\t\n\t\t\t\t\t# check for new max, and update\n\t\t\t\t\tif (largestCount < mat[x][y]):\n\t\t\t\t\t\tlargestCount = mat[x][y]\n\n\t\t\t\t# If no match, set count as 0\n\t\t\t\telse:\n\t\t\t\t\tmat[x][y] = 0\n\n\t# Return largest count\n\treturn largestCount",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate an algorithm in Python for finding the longest common substring of two strings.\n\n### Solution:\n```\n# Function to find the longest common substring \ndef longestSubstring(s1, s2): \n \n\t# Create an array \n\tmat = [[0 for col in range(len(s2)+1)]  \n                         for row in range(len(s1)+1)] \n\t\n\t# Set maximum to 0 \n\tlargestCount = 0\n\n\t# Iterate through array \n\tfor x in range(1, len(s1)+1):\n\t\tfor y in range(1, len(s2)+1):\n\t\t\t\t# If there is a match, count increases by 1\n\t\t\t\tif (s1[x-1] == s2[y-1]):\n\t\t\t\t\tmat[x][y] = mat[x-1][y-1] + 1\n\t\t\t\t\t\n\t\t\t\t\t# check for new max, and update\n\t\t\t\t\tif (largestCount < mat[x][y]):\n\t\t\t\t\t\tlargestCount = mat[x][y]\n\n\t\t\t\t# If no match, set count as 0\n\t\t\t\telse:\n\t\t\t\t\tmat[x][y] = 0\n\n\t# Return largest count\n\treturn largestCount\n```"
    },
    {
        "instruction": "Generate a Python function that takes an input string and counts the number of occurrence of each letter.",
        "output": "def letter_frequency(str):\n    freq = {}\n    for letter in str:\n        if letter in freq:\n            freq[letter] += 1\n        else:\n            freq[letter] = 1\n    return freq\n        \nresult = letter_frequency(\"Hello World\")\nprint(result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python function that takes an input string and counts the number of occurrence of each letter.\n\n### Solution:\n```\ndef letter_frequency(str):\n    freq = {}\n    for letter in str:\n        if letter in freq:\n            freq[letter] += 1\n        else:\n            freq[letter] = 1\n    return freq\n        \nresult = letter_frequency(\"Hello World\")\nprint(result)\n```"
    },
    {
        "instruction": "Create a Python program to parse a JSON object and create a SQL table with the data.",
        "output": "import json\nimport sqlite3\n\n# Parse the JSON object\ndata = json.loads(data)\n\n# Connect to the database\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Create the SQL table\nc.execute(\"CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)\")\n\n# Insert the data\nc.execute(\"INSERT INTO users (id, name, age) VALUES (?,?,?)\", (data[\"id\"], data[\"name\"], data[\"age\"]))\n\n# Commit the changes\nconn.commit()\n\n# Close the connection\nconn.close()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to parse a JSON object and create a SQL table with the data.\n\n### Solution:\n```\nimport json\nimport sqlite3\n\n# Parse the JSON object\ndata = json.loads(data)\n\n# Connect to the database\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Create the SQL table\nc.execute(\"CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)\")\n\n# Insert the data\nc.execute(\"INSERT INTO users (id, name, age) VALUES (?,?,?)\", (data[\"id\"], data[\"name\"], data[\"age\"]))\n\n# Commit the changes\nconn.commit()\n\n# Close the connection\nconn.close()\n```"
    },
    {
        "instruction": "Implement a bubble sorting algorithm in Python.",
        "output": "def bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nImplement a bubble sorting algorithm in Python.\n\n### Solution:\n```\ndef bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n```"
    },
    {
        "instruction": "Create a Python program to print all the numbers between 1 and 5.",
        "output": "for num in range(1, 6):\n    print(num)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to print all the numbers between 1 and 5.\n\n### Solution:\n```\nfor num in range(1, 6):\n    print(num)\n```"
    },
    {
        "instruction": "Create a Python script to calculate all possible paths from (0,0,0) to (5,5,5).",
        "output": "def calculate_paths(x, y, z):\n    if x == 5 and y == 5 and z == 5:\n        return 1\n    total_paths = 0\n    if x < 5:\n        total_paths += calculate_paths(x + 1, y, z)\n    if y < 5:\n        total_paths += calculate_paths(x, y + 1, z)\n    if z < 5:\n        total_paths += calculate_paths(x, y, z + 1)\n    return total_paths",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python script to calculate all possible paths from (0,0,0) to (5,5,5).\n\n### Solution:\n```\ndef calculate_paths(x, y, z):\n    if x == 5 and y == 5 and z == 5:\n        return 1\n    total_paths = 0\n    if x < 5:\n        total_paths += calculate_paths(x + 1, y, z)\n    if y < 5:\n        total_paths += calculate_paths(x, y + 1, z)\n    if z < 5:\n        total_paths += calculate_paths(x, y, z + 1)\n    return total_paths\n```"
    },
    {
        "instruction": "Craft a Python script to reverse a string",
        "output": "def reverse_string(s):\n    result = \"\"\n    for i in range(len(s)-1, -1, -1):\n        result += s[i]\n    return result",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCraft a Python script to reverse a string\n\n### Solution:\n```\ndef reverse_string(s):\n    result = \"\"\n    for i in range(len(s)-1, -1, -1):\n        result += s[i]\n    return result\n```"
    },
    {
        "instruction": "Write a code to remove a specific value from a list in Python.",
        "output": "mylist = [10, 20, 30, 40, 10]\nvalue_to_remove = 10\n\n# new list after value is removed\nnew_list = [item for item in mylist if item != value_to_remove] \n\nprint(new_list)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a code to remove a specific value from a list in Python.\n\n### Solution:\n```\nmylist = [10, 20, 30, 40, 10]\nvalue_to_remove = 10\n\n# new list after value is removed\nnew_list = [item for item in mylist if item != value_to_remove] \n\nprint(new_list)\n```"
    },
    {
        "instruction": "Implement a function in Python that prints the average of the two numbers passed as arguments.",
        "output": "def compute_average(x, y):\n\treturn (x + y) / 2\n\nprint(compute_average(x,y))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nImplement a function in Python that prints the average of the two numbers passed as arguments.\n\n### Solution:\n```\ndef compute_average(x, y):\n\treturn (x + y) / 2\n\nprint(compute_average(x,y))\n```"
    },
    {
        "instruction": "You are given a 2D list that needs to be flattened into a single dimensional list. Write some python code to achieve this transformation.",
        "output": "def flatten_list(input_list): \n    flattened_list = [] \n      \n    # traversing the 2d list  \n    for row in input_list: \n        # traversing the row \n        for column in row: \n            flattened_list.append(column) \n    return flattened_list",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nYou are given a 2D list that needs to be flattened into a single dimensional list. Write some python code to achieve this transformation.\n\n### Solution:\n```\ndef flatten_list(input_list): \n    flattened_list = [] \n      \n    # traversing the 2d list  \n    for row in input_list: \n        # traversing the row \n        for column in row: \n            flattened_list.append(column) \n    return flattened_list\n```"
    },
    {
        "instruction": "Write a Python program to calculate the mode of the given list of numbers.",
        "output": "def find_mode(numbers):\n    most_freq = 0\n    mode = None\n\n    counts = {}\n    for num in numbers:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    for num in counts:\n        if counts[num] > most_freq:\n            most_freq = counts[num]\n            mode = num\n    \n    return mode",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to calculate the mode of the given list of numbers.\n\n### Solution:\n```\ndef find_mode(numbers):\n    most_freq = 0\n    mode = None\n\n    counts = {}\n    for num in numbers:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    for num in counts:\n        if counts[num] > most_freq:\n            most_freq = counts[num]\n            mode = num\n    \n    return mode\n```"
    },
    {
        "instruction": "Write a Python program to sort a list of tuples according to its second parameter in ascending order.",
        "output": "def sort_tuples(list): \n    \"\"\"Function to sort tuples according to their second parameter\"\"\" \n    list.sort(key = lambda x : x[1]) \n    return list\n\n#Example:\nprint(sort_tuples(list))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to sort a list of tuples according to its second parameter in ascending order.\n\n### Solution:\n```\ndef sort_tuples(list): \n    \"\"\"Function to sort tuples according to their second parameter\"\"\" \n    list.sort(key = lambda x : x[1]) \n    return list\n\n#Example:\nprint(sort_tuples(list))\n```"
    },
    {
        "instruction": "Can you provide a Python script to automatically generate a 5 character long random alphanumeric string?",
        "output": "import string\nimport random\n\ndef generate_random_string(length=5):\n  letters = string.ascii_letters + string.digits\n  return ''.join(random.choice(letters) for _ in range(length))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCan you provide a Python script to automatically generate a 5 character long random alphanumeric string?\n\n### Solution:\n```\nimport string\nimport random\n\ndef generate_random_string(length=5):\n  letters = string.ascii_letters + string.digits\n  return ''.join(random.choice(letters) for _ in range(length))\n```"
    },
    {
        "instruction": "Create a natural language processing (NLP) program in Python that extracts the main topic from a given sentence.",
        "output": "#importing libraries\nimport nltk\nfrom nltk.tokenize import sent_tokenize,word_tokenize\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.stem import PorterStemmer\nfrom nltk import wordpunct_tokenize\n\n#Importing input\ninput_sentence = 'This sentence is related to NLP'\n\n#Tokenizing the input\ninput_tokens = word_tokenize(input_sentence)\n\n#POS-Tagging the tokens\ninput_pos = nltk.pos_tag(input_tokens)\n\n#Lemmatizing the tokens\nlemmatizer = WordNetLemmatizer()\ninput_lemmatized = [lemmatizer.lemmatize(word) for word in input_tokens]\n\n#Stemming the tokens\nstemmer = PorterStemmer()\ninput_stemmed = [ stemmer.stem(word) for word in input_tokens ]\n\n#Finding the main topic\nfor (word, pos) in input_pos: \n    if (pos == 'NN' or pos == 'NNP'):\n          main_topic = word\n\nprint('Main Topic: ', main_topic)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a natural language processing (NLP) program in Python that extracts the main topic from a given sentence.\n\n### Solution:\n```\n#importing libraries\nimport nltk\nfrom nltk.tokenize import sent_tokenize,word_tokenize\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.stem import PorterStemmer\nfrom nltk import wordpunct_tokenize\n\n#Importing input\ninput_sentence = 'This sentence is related to NLP'\n\n#Tokenizing the input\ninput_tokens = word_tokenize(input_sentence)\n\n#POS-Tagging the tokens\ninput_pos = nltk.pos_tag(input_tokens)\n\n#Lemmatizing the tokens\nlemmatizer = WordNetLemmatizer()\ninput_lemmatized = [lemmatizer.lemmatize(word) for word in input_tokens]\n\n#Stemming the tokens\nstemmer = PorterStemmer()\ninput_stemmed = [ stemmer.stem(word) for word in input_tokens ]\n\n#Finding the main topic\nfor (word, pos) in input_pos: \n    if (pos == 'NN' or pos == 'NNP'):\n          main_topic = word\n\nprint('Main Topic: ', main_topic)\n```"
    },
    {
        "instruction": "Write a Python program to generate random passwords from a list of strings.",
        "output": "import random\n\nstrings = [\"random\",\"password\",\"security\",\"codes\",\"aaa\",\"bbb\",\"ccc\", \"ddd\"]\npassword = \"\"\n\nfor i in range(len(strings)):\n randomIndex = random.randint(0,len(strings) -1)\n password += strings[randomIndex]\n\nprint(\"Generated Password:\", password)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to generate random passwords from a list of strings.\n\n### Solution:\n```\nimport random\n\nstrings = [\"random\",\"password\",\"security\",\"codes\",\"aaa\",\"bbb\",\"ccc\", \"ddd\"]\npassword = \"\"\n\nfor i in range(len(strings)):\n randomIndex = random.randint(0,len(strings) -1)\n password += strings[randomIndex]\n\nprint(\"Generated Password:\", password)\n```"
    },
    {
        "instruction": "Edit the following Python program to fix the syntax error",
        "output": "def fx(x):\n    if x == 0:\n        x += 1\n    return x",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nEdit the following Python program to fix the syntax error\n\n### Solution:\n```\ndef fx(x):\n    if x == 0:\n        x += 1\n    return x\n```"
    },
    {
        "instruction": "Implement a Python program to generate randon uniform numbers. The program should have two input parameters a lower bound and an upper bound.",
        "output": "import random\n\n# generates a random number between lower and upper\ndef generateRandomNumber(lower, upper):\n r = random.uniform(lower, upper)\n return r\n\n# driver program\nif __name__ == \"__main__\":\n lower = 10\n upper = 20\n print(generateRandomNumber(lower, upper))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nImplement a Python program to generate randon uniform numbers. The program should have two input parameters a lower bound and an upper bound.\n\n### Solution:\n```\nimport random\n\n# generates a random number between lower and upper\ndef generateRandomNumber(lower, upper):\n r = random.uniform(lower, upper)\n return r\n\n# driver program\nif __name__ == \"__main__\":\n lower = 10\n upper = 20\n print(generateRandomNumber(lower, upper))\n```"
    },
    {
        "instruction": "Write Python code to find the sum of the factorial of a given number.",
        "output": "def find_sum_factorial_number(n):\n    sum_num = 0\n    for i in range(1, n + 1):\n        sum_num += math.factorial(i)\n    return sum_num\n\nif __name__ == '__main__':\n    n = int(input('Input a number: '))\n    print(find_sum_factorial_number(n))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite Python code to find the sum of the factorial of a given number.\n\n### Solution:\n```\ndef find_sum_factorial_number(n):\n    sum_num = 0\n    for i in range(1, n + 1):\n        sum_num += math.factorial(i)\n    return sum_num\n\nif __name__ == '__main__':\n    n = int(input('Input a number: '))\n    print(find_sum_factorial_number(n))\n```"
    },
    {
        "instruction": "Use the Paginator library in Python to create a list of items divided into multiple pages.",
        "output": "from paginator import Paginator\n\ndef page_items(items, page_number):\n    p = Paginator(items, 3) # items per page\n    return p.page(page_number).object_list\n\npage_1 = page_items([\"apple\", \"banana\", \"carrot\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"iceberg lettuce\"], 1)\nprint(page_1) # [\"apple\", \"banana\", \"carrot\"]\n\npage_2 = page_items([\"apple\", \"banana\", \"carrot\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"iceberg lettuce\"], 2)\nprint(page_2) # [\"date\", \"elderberry\", \"fig\"]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nUse the Paginator library in Python to create a list of items divided into multiple pages.\n\n### Solution:\n```\nfrom paginator import Paginator\n\ndef page_items(items, page_number):\n    p = Paginator(items, 3) # items per page\n    return p.page(page_number).object_list\n\npage_1 = page_items([\"apple\", \"banana\", \"carrot\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"iceberg lettuce\"], 1)\nprint(page_1) # [\"apple\", \"banana\", \"carrot\"]\n\npage_2 = page_items([\"apple\", \"banana\", \"carrot\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"iceberg lettuce\"], 2)\nprint(page_2) # [\"date\", \"elderberry\", \"fig\"]\n```"
    },
    {
        "instruction": "Using a given dataset, create a visualization in Python to identify how many of each type of fruit has been sold.",
        "output": "import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Read data\ndata = pd.read_csv(\"fruits.csv\")\n\n# Get fruit types\ntypes = data['Fruit'].unique()\n\n# Calculate quantity for each type\nquantity = [sum(data['Quantity'][data['Fruit'] == t]) for t in types]\n\n# Plot the bar chart\nplt.bar(types, quantity)\n\n# Add title, x and y axis labels and legend\nplt.title('Quantity of Fruits sold') \nplt.xlabel('Fruit Type') \nplt.ylabel('Quantity') \nplt.legend('Quantity sold') \n\n# Show the plot \nplt.show()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nUsing a given dataset, create a visualization in Python to identify how many of each type of fruit has been sold.\n\n### Solution:\n```\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Read data\ndata = pd.read_csv(\"fruits.csv\")\n\n# Get fruit types\ntypes = data['Fruit'].unique()\n\n# Calculate quantity for each type\nquantity = [sum(data['Quantity'][data['Fruit'] == t]) for t in types]\n\n# Plot the bar chart\nplt.bar(types, quantity)\n\n# Add title, x and y axis labels and legend\nplt.title('Quantity of Fruits sold') \nplt.xlabel('Fruit Type') \nplt.ylabel('Quantity') \nplt.legend('Quantity sold') \n\n# Show the plot \nplt.show()\n```"
    },
    {
        "instruction": "Optimize the following Python function to merge two lists.",
        "output": "def merge_lists(a, b):\n  merged_list = []\n  a_pos = 0\n  b_pos = 0\n  \n  while a_pos < len(a) and b_pos < len(b):\n    if a[a_pos] < b[b_pos]:\n      merged_list.append(a[a_pos])\n      a_pos += 1\n    else:\n      merged_list.append(b[b_pos])\n      b_pos += 1\n\n  return merged_list + a[a_pos:] + b[b_pos:]\n\na = [1,3,5]\nb = [2,4,6]\nprint(merge_lists(a,b))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nOptimize the following Python function to merge two lists.\n\n### Solution:\n```\ndef merge_lists(a, b):\n  merged_list = []\n  a_pos = 0\n  b_pos = 0\n  \n  while a_pos < len(a) and b_pos < len(b):\n    if a[a_pos] < b[b_pos]:\n      merged_list.append(a[a_pos])\n      a_pos += 1\n    else:\n      merged_list.append(b[b_pos])\n      b_pos += 1\n\n  return merged_list + a[a_pos:] + b[b_pos:]\n\na = [1,3,5]\nb = [2,4,6]\nprint(merge_lists(a,b))\n```"
    },
    {
        "instruction": "Given a text string, write a program in Python which will remove any two consecutive duplicate words from the string.",
        "output": "text = \"The quick brown fox jumps over the lazy dog\"\n\ndef remove_duplicate_words(text):\n  words = []\n  for word in text.split():\n    if not words or word != words[-1]:\n      words.append(word)\n  \n  return \" \".join(words)\n\ntext = \"The the quick brown fox fox jumps over the lazy dog dog\"\ntext = remove_duplicate_words(text)\nprint(text)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGiven a text string, write a program in Python which will remove any two consecutive duplicate words from the string.\n\n### Solution:\n```\ntext = \"The quick brown fox jumps over the lazy dog\"\n\ndef remove_duplicate_words(text):\n  words = []\n  for word in text.split():\n    if not words or word != words[-1]:\n      words.append(word)\n  \n  return \" \".join(words)\n\ntext = \"The the quick brown fox fox jumps over the lazy dog dog\"\ntext = remove_duplicate_words(text)\nprint(text)\n```"
    },
    {
        "instruction": "Create a Python script that replaces all words containing 3 or more consecutive vowels with \"*\".",
        "output": "import re\n\ndef replaceConsecutiveVowels(word): \n    regex = re.compile(r'[aeiou]{3,}', re.IGNORECASE) \n    return regex.sub(\"*\", word)\n\nword = \"entertainment\"\n\nprint(replaceConsecutiveVowels(word)) # Output: *",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python script that replaces all words containing 3 or more consecutive vowels with \"*\".\n\n### Solution:\n```\nimport re\n\ndef replaceConsecutiveVowels(word): \n    regex = re.compile(r'[aeiou]{3,}', re.IGNORECASE) \n    return regex.sub(\"*\", word)\n\nword = \"entertainment\"\n\nprint(replaceConsecutiveVowels(word)) # Output: *\n```"
    },
    {
        "instruction": "Create a Python program to detect anagrams. An anagram is a word or phrase formed by rearranging the letters of another word or phrase.",
        "output": "def isAnagram(word1, word2): \n  \n    # Get lengths of both strings \n    n1 = len(word1) \n    n2 = len(word2) \n  \n    # If both strings have different lengths, they \n    # cannot be anagrams \n    if (n1 != n2): \n        return False\n  \n    # Sort both strings \n    word1 = sorted(word1) \n    word2 = sorted(word2) \n  \n    # Compare sorted strings \n    for i in range(n1): \n        if word1[i] != word2[i]: \n            return False\n  \n    return True\n  \n# Driver program \nwords = (\"dear\", \"read\")\n  \nif isAnagram(words[0], words[1]): \n    print(\"The word\", words[0], \"and\", words[1], \"are anagrams\") \nelse: \n    print(\"The word\", words[0], \"and\", words[1], \"are not anagrams\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to detect anagrams. An anagram is a word or phrase formed by rearranging the letters of another word or phrase.\n\n### Solution:\n```\ndef isAnagram(word1, word2): \n  \n    # Get lengths of both strings \n    n1 = len(word1) \n    n2 = len(word2) \n  \n    # If both strings have different lengths, they \n    # cannot be anagrams \n    if (n1 != n2): \n        return False\n  \n    # Sort both strings \n    word1 = sorted(word1) \n    word2 = sorted(word2) \n  \n    # Compare sorted strings \n    for i in range(n1): \n        if word1[i] != word2[i]: \n            return False\n  \n    return True\n  \n# Driver program \nwords = (\"dear\", \"read\")\n  \nif isAnagram(words[0], words[1]): \n    print(\"The word\", words[0], \"and\", words[1], \"are anagrams\") \nelse: \n    print(\"The word\", words[0], \"and\", words[1], \"are not anagrams\")\n```"
    },
    {
        "instruction": "Write a Python program to scrape a website and find the most common words and phrases used in the content.",
        "output": "from bs4 import BeautifulSoup\nimport requests\nimport collections\n\nURL = \"https://example.com\"\npage = requests.get(URL)\nsoup = BeautifulSoup(page.content, 'html.parser')\ntext = soup.get_text().split()\n\nwordcount = collections.Counter(text)\n\ntop_words = wordcount.most_common(10)\n\nprint(top_words)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to scrape a website and find the most common words and phrases used in the content.\n\n### Solution:\n```\nfrom bs4 import BeautifulSoup\nimport requests\nimport collections\n\nURL = \"https://example.com\"\npage = requests.get(URL)\nsoup = BeautifulSoup(page.content, 'html.parser')\ntext = soup.get_text().split()\n\nwordcount = collections.Counter(text)\n\ntop_words = wordcount.most_common(10)\n\nprint(top_words)\n```"
    },
    {
        "instruction": "Build a python program to convert any currency to a different currency given its exchange rate",
        "output": "def currency_converter(input_currency, output_currency, exchange_rate):\namount = float(input('Enter the amount to convert: '))\ntotal_amount = amount * exchange_rate\n\nprint('{} {} = {} {}'.format(amount, input_currency, total_amount, output_currency))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nBuild a python program to convert any currency to a different currency given its exchange rate\n\n### Solution:\n```\ndef currency_converter(input_currency, output_currency, exchange_rate):\namount = float(input('Enter the amount to convert: '))\ntotal_amount = amount * exchange_rate\n\nprint('{} {} = {} {}'.format(amount, input_currency, total_amount, output_currency))\n```"
    },
    {
        "instruction": "Construct a program in Python that determines the largest prime factor of a number.",
        "output": "def find_largest_prime_factor(number):\n  i = 2\n  while i < number // 2:\n    if number % i == 0:\n      number = number // i\n      i = 2\n    else:\n      i += 1\n  return number\n\nprint(find_largest_prime_factor(300))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConstruct a program in Python that determines the largest prime factor of a number.\n\n### Solution:\n```\ndef find_largest_prime_factor(number):\n  i = 2\n  while i < number // 2:\n    if number % i == 0:\n      number = number // i\n      i = 2\n    else:\n      i += 1\n  return number\n\nprint(find_largest_prime_factor(300))\n```"
    },
    {
        "instruction": "Design a script in Python to scrape text data from a particular web page.",
        "output": "from bs4 import BeautifulSoup\nimport requests\n\n# Get the HTML of the page\nhtml_content = requests.get(url).text\n\n# Create the Soup object\nsoup = BeautifulSoup(html_content, 'lxml')\n\n# Find the text data\ndata = soup.find_all('p')\n\n# Print the text data\nfor element in data:\n      print(element.text)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a script in Python to scrape text data from a particular web page.\n\n### Solution:\n```\nfrom bs4 import BeautifulSoup\nimport requests\n\n# Get the HTML of the page\nhtml_content = requests.get(url).text\n\n# Create the Soup object\nsoup = BeautifulSoup(html_content, 'lxml')\n\n# Find the text data\ndata = soup.find_all('p')\n\n# Print the text data\nfor element in data:\n      print(element.text)\n```"
    },
    {
        "instruction": "You need to write a python script that takes user input for hours worked and outputs the amount of salary due.",
        "output": "def calculate_salary(hours_worked):\n    wage_per_hour = 8.0\n    salary = wage_per_hour * hours_worked\n    return salary",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nYou need to write a python script that takes user input for hours worked and outputs the amount of salary due.\n\n### Solution:\n```\ndef calculate_salary(hours_worked):\n    wage_per_hour = 8.0\n    salary = wage_per_hour * hours_worked\n    return salary\n```"
    },
    {
        "instruction": "Write a Python function that takes a list of strings and returns a list of tuples containing each string and the number of characters in that string.",
        "output": "def list_to_tuples(words):\n    # create an empty list\n    result = []\n\n    # create a tuple for each string\n    for word in words:\n        result.append((word, len(word)))\n    \n    return result\n\nresult = list_to_tuples(['foo', 'bar', 'baz'])\nprint(result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python function that takes a list of strings and returns a list of tuples containing each string and the number of characters in that string.\n\n### Solution:\n```\ndef list_to_tuples(words):\n    # create an empty list\n    result = []\n\n    # create a tuple for each string\n    for word in words:\n        result.append((word, len(word)))\n    \n    return result\n\nresult = list_to_tuples(['foo', 'bar', 'baz'])\nprint(result)\n```"
    },
    {
        "instruction": "Write a function in Python to find the closest number to a given number in an unsorted array.",
        "output": "def closest_number(arr, number):\n    diff = []\n    for i in arr:\n       diff.append(abs(i-number))\n   \n    closestNumberIndex = 0\n    minDiff = diff[closestNumberIndex]\n    for i in range(len(diff)):\n        if diff[i] < minDiff:\n            closestNumberIndex = i\n            minDiff = diff[i]\n            \n    return arr[closestNumberIndex]\n    \narr = [3, 5, 8, 11, 12]\nnumber = 4\nans = closest_number(arr, number)\nprint(ans)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a function in Python to find the closest number to a given number in an unsorted array.\n\n### Solution:\n```\ndef closest_number(arr, number):\n    diff = []\n    for i in arr:\n       diff.append(abs(i-number))\n   \n    closestNumberIndex = 0\n    minDiff = diff[closestNumberIndex]\n    for i in range(len(diff)):\n        if diff[i] < minDiff:\n            closestNumberIndex = i\n            minDiff = diff[i]\n            \n    return arr[closestNumberIndex]\n    \narr = [3, 5, 8, 11, 12]\nnumber = 4\nans = closest_number(arr, number)\nprint(ans)\n```"
    },
    {
        "instruction": "Create a Python script for linear regression using gradient descent.",
        "output": "import numpy as np\n\ndef gradient_descent(x, y, alpha=1e-4, tol=1e-4):\n    n,m = x.shape\n    weights = np.zeros(m)\n    y_pred = np.matmul(x, weights)\n    SSE = np.sum((y - y_pred)**2)\n    prev_SSE = 0.\n    weights_list=[]\n    while np.abs(SSE - prev_SSE) > tol:        \n        prev_SSE = SSE\n        gradient = np.matmul(x.T,(y - y_pred))\n        weights += alpha * gradient\n        weights_list.append(weights)\n        y_pred = np.matmul(x, weights)\n        SSE = np.sum((y - y_pred)**2)\n\n    return weights_list, SSE",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python script for linear regression using gradient descent.\n\n### Solution:\n```\nimport numpy as np\n\ndef gradient_descent(x, y, alpha=1e-4, tol=1e-4):\n    n,m = x.shape\n    weights = np.zeros(m)\n    y_pred = np.matmul(x, weights)\n    SSE = np.sum((y - y_pred)**2)\n    prev_SSE = 0.\n    weights_list=[]\n    while np.abs(SSE - prev_SSE) > tol:        \n        prev_SSE = SSE\n        gradient = np.matmul(x.T,(y - y_pred))\n        weights += alpha * gradient\n        weights_list.append(weights)\n        y_pred = np.matmul(x, weights)\n        SSE = np.sum((y - y_pred)**2)\n\n    return weights_list, SSE\n```"
    },
    {
        "instruction": "Create a Python program that returns the index of an integer in a sorted array.",
        "output": "def binarySearch(arr, x): \n    l = 0\n    r = len(arr)-1\n    while l <= r: \n        mid = l + (r - l)//2\n        if arr[mid] == x: \n            return mid \n        elif arr[mid] < x: \n            l = mid + 1\n        else: \n            r = mid - 1\n    return -1",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program that returns the index of an integer in a sorted array.\n\n### Solution:\n```\ndef binarySearch(arr, x): \n    l = 0\n    r = len(arr)-1\n    while l <= r: \n        mid = l + (r - l)//2\n        if arr[mid] == x: \n            return mid \n        elif arr[mid] < x: \n            l = mid + 1\n        else: \n            r = mid - 1\n    return -1\n```"
    },
    {
        "instruction": "Create a class in Python to represent a 2D circle.",
        "output": "class Circle2D:\n    def __init__(self, x, y, radius):\n        self.x = x\n        self.y = y\n        self.radius = radius\n\n    def get_area(self):\n        \"\"\"Calculates the area of the circle\"\"\"\n        return 3.14 * (self.radius ** 2)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a class in Python to represent a 2D circle.\n\n### Solution:\n```\nclass Circle2D:\n    def __init__(self, x, y, radius):\n        self.x = x\n        self.y = y\n        self.radius = radius\n\n    def get_area(self):\n        \"\"\"Calculates the area of the circle\"\"\"\n        return 3.14 * (self.radius ** 2)\n```"
    },
    {
        "instruction": "Write a Python program to display a calendar showing the current month.",
        "output": "import calendar\nfrom datetime import date\n\ntoday = date.today()\n\ncal = calendar.month(today.year, today.month)\nprint(cal)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to display a calendar showing the current month.\n\n### Solution:\n```\nimport calendar\nfrom datetime import date\n\ntoday = date.today()\n\ncal = calendar.month(today.year, today.month)\nprint(cal)\n```"
    },
    {
        "instruction": "Write a Python script to generate a random linear sequence.",
        "output": "import random\n\n# generate the sequence\nsequence_length = 10\nsequence = [] \nfor i in range(sequence_length):\n  sequence.append(random.randint(1, 10))\n\nprint(sequence)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python script to generate a random linear sequence.\n\n### Solution:\n```\nimport random\n\n# generate the sequence\nsequence_length = 10\nsequence = [] \nfor i in range(sequence_length):\n  sequence.append(random.randint(1, 10))\n\nprint(sequence)\n```"
    },
    {
        "instruction": "Generate a Python function to find all anagrams of a given string in a given list of strings.",
        "output": "def find_anagrams(string, words):\n anagrams = []\n for word in words:\n  if sorted(word) == sorted(string):\n   anagrams.append(word)\n return anagrams",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python function to find all anagrams of a given string in a given list of strings.\n\n### Solution:\n```\ndef find_anagrams(string, words):\n anagrams = []\n for word in words:\n  if sorted(word) == sorted(string):\n   anagrams.append(word)\n return anagrams\n```"
    },
    {
        "instruction": "Given a list of integers, write a Python program to find the list's maximum value.",
        "output": "def find_max(nums):\n    max_value = nums[0] \n    for i in nums:\n        if i > max_value:\n            max_value = i\n    return max_value\n\nnums = [1, 8, 2, 4, 10]\nprint(find_max(nums))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGiven a list of integers, write a Python program to find the list's maximum value.\n\n### Solution:\n```\ndef find_max(nums):\n    max_value = nums[0] \n    for i in nums:\n        if i > max_value:\n            max_value = i\n    return max_value\n\nnums = [1, 8, 2, 4, 10]\nprint(find_max(nums))\n```"
    },
    {
        "instruction": "Create a virtual environment for Python using pipenv in the current directory.",
        "output": "pipenv --three",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a virtual environment for Python using pipenv in the current directory.\n\n### Solution:\n```\npipenv --three\n```"
    },
    {
        "instruction": "Convert a Javascript function to Python.",
        "output": "def add(a, b):\n    return a + b",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConvert a Javascript function to Python.\n\n### Solution:\n```\ndef add(a, b):\n    return a + b\n```"
    },
    {
        "instruction": "Create a program in Python that rotates an array right by one place",
        "output": "def rotateArrayRight(arr): \n    temp = arr[len(arr) - 1] \n    \n    for i in range(len(arr)-1, 0, -1): \n        arr[i] = arr[i-1] \n          \n    arr[0] = temp \n    return arr\n\narr = [1, 2, 3, 4, 5]\n\nprint(rotateArrayRight(arr))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a program in Python that rotates an array right by one place\n\n### Solution:\n```\ndef rotateArrayRight(arr): \n    temp = arr[len(arr) - 1] \n    \n    for i in range(len(arr)-1, 0, -1): \n        arr[i] = arr[i-1] \n          \n    arr[0] = temp \n    return arr\n\narr = [1, 2, 3, 4, 5]\n\nprint(rotateArrayRight(arr))\n```"
    },
    {
        "instruction": "Convert the given equation in Python to a mathematical expression.",
        "output": "x = y + 2*z - 7",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConvert the given equation in Python to a mathematical expression.\n\n### Solution:\n```\nx = y + 2*z - 7\n```"
    },
    {
        "instruction": "Write a Python program to fetch all the emails from a given mailbox using IMAP.",
        "output": "import imaplib, email\n\n#Connect to the mail server\nmail = imaplib.IMAP4_SSL('imap.example.com')\n\n#Login\nmail.login('username', 'password')\n\n#Select the mailbox\nmail.select('INBOX')\n\n#Search for emails\n_, data = mail.search(None, 'ALL')\n\n#Fetch the emails\nfor num in data[0].split():\n  _, data = mail.fetch(num, '(RFC822)')\n  email_message = email.message_from_bytes(data[0][1])\n  #Process the email",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to fetch all the emails from a given mailbox using IMAP.\n\n### Solution:\n```\nimport imaplib, email\n\n#Connect to the mail server\nmail = imaplib.IMAP4_SSL('imap.example.com')\n\n#Login\nmail.login('username', 'password')\n\n#Select the mailbox\nmail.select('INBOX')\n\n#Search for emails\n_, data = mail.search(None, 'ALL')\n\n#Fetch the emails\nfor num in data[0].split():\n  _, data = mail.fetch(num, '(RFC822)')\n  email_message = email.message_from_bytes(data[0][1])\n  #Process the email\n```"
    },
    {
        "instruction": "Write a function to create a JSON object from a given Python list.",
        "output": "import json\n\ndef list_to_json(data):\n    return json.dumps(data)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a function to create a JSON object from a given Python list.\n\n### Solution:\n```\nimport json\n\ndef list_to_json(data):\n    return json.dumps(data)\n```"
    },
    {
        "instruction": "Can you write a Python program that finds the second largest element in the given array by sorting it?",
        "output": "arr.sort()\nsecond_largest = arr[-2] # 35",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCan you write a Python program that finds the second largest element in the given array by sorting it?\n\n### Solution:\n```\narr.sort()\nsecond_largest = arr[-2] # 35\n```"
    },
    {
        "instruction": "Create a dictionary in Python storing customer information which contains the name, address, and email.",
        "output": "customer = {\n 'name': '',\n 'address': '',\n 'email': ''\n}",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a dictionary in Python storing customer information which contains the name, address, and email.\n\n### Solution:\n```\ncustomer = {\n 'name': '',\n 'address': '',\n 'email': ''\n}\n```"
    },
    {
        "instruction": "Write a Python program to count the number of occurrences of each word in a sentence.",
        "output": "sentence = 'The quick brown fox jumps over the lazy dog'\nwords = sentence.split(' ')\n\nword_count = {} \nfor word in words:\n    if word in word_count:\n        word_count[word] += 1\n    else:\n        word_count[word] = 1\n \nfor k,v in word_count.items():\n    print(k , ':' , v)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to count the number of occurrences of each word in a sentence.\n\n### Solution:\n```\nsentence = 'The quick brown fox jumps over the lazy dog'\nwords = sentence.split(' ')\n\nword_count = {} \nfor word in words:\n    if word in word_count:\n        word_count[word] += 1\n    else:\n        word_count[word] = 1\n \nfor k,v in word_count.items():\n    print(k , ':' , v)\n```"
    },
    {
        "instruction": "Develop an algorithm in Python for sorting the following array in ascending order.",
        "output": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n\narray = [9, 8, 11, 5]\nbubble_sort(array)\nprint(array)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop an algorithm in Python for sorting the following array in ascending order.\n\n### Solution:\n```\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n\narray = [9, 8, 11, 5]\nbubble_sort(array)\nprint(array)\n```"
    },
    {
        "instruction": "Create a Python program to sort the list of colors in alphabetical order.",
        "output": "colors = [\"red\", \"green\", \"blue\"]\n\n#sorting in ascending order\ndesc_colors = sorted(colors)\n\nprint(\"Colors in alphabetical order:\", desc_colors)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to sort the list of colors in alphabetical order.\n\n### Solution:\n```\ncolors = [\"red\", \"green\", \"blue\"]\n\n#sorting in ascending order\ndesc_colors = sorted(colors)\n\nprint(\"Colors in alphabetical order:\", desc_colors)\n```"
    },
    {
        "instruction": "Create a script in Python to select top-n most frequent words from a list of words.",
        "output": "import collections\n\n# Load Data\nwith open('words.txt', 'r') as file:\n words = [line.strip() for line in file.readlines()]\n\n# Count the frequency of each word in the list\nfrequency = collections.Counter(words)\n\n# Select the top n most frequent words\nn = 10\ntop_words = frequency.most_common(n)\n\n# Output\nprint('The ' + str(n) + ' most frequent words are:')\nfor word, count in top_words:\n print('\\t' + word + ' (' + str(count) + ')')",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a script in Python to select top-n most frequent words from a list of words.\n\n### Solution:\n```\nimport collections\n\n# Load Data\nwith open('words.txt', 'r') as file:\n words = [line.strip() for line in file.readlines()]\n\n# Count the frequency of each word in the list\nfrequency = collections.Counter(words)\n\n# Select the top n most frequent words\nn = 10\ntop_words = frequency.most_common(n)\n\n# Output\nprint('The ' + str(n) + ' most frequent words are:')\nfor word, count in top_words:\n print('\\t' + word + ' (' + str(count) + ')')\n```"
    },
    {
        "instruction": "Design a Python program which takes a list of strings and prints the elements in reversed order.",
        "output": "def list_reverse(sequence):\n    if len(sequence) == 0:\n        return []\n    else:\n        return list_reverse(sequence[1:]) + [sequence[0]]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a Python program which takes a list of strings and prints the elements in reversed order.\n\n### Solution:\n```\ndef list_reverse(sequence):\n    if len(sequence) == 0:\n        return []\n    else:\n        return list_reverse(sequence[1:]) + [sequence[0]]\n```"
    },
    {
        "instruction": "Create a python program to include a web-page rendering feature.",
        "output": "import webbrowser\n\nurl = \"www.example.com\"\nwebbrowser.open(url)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a python program to include a web-page rendering feature.\n\n### Solution:\n```\nimport webbrowser\n\nurl = \"www.example.com\"\nwebbrowser.open(url)\n```"
    },
    {
        "instruction": "Optimize the following Python code to minimize memory consumption and maximize speed.",
        "output": "def setup_list():\n    my_list = [[0] * 10000 for _ in range(10000)]\n    return my_list",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nOptimize the following Python code to minimize memory consumption and maximize speed.\n\n### Solution:\n```\ndef setup_list():\n    my_list = [[0] * 10000 for _ in range(10000)]\n    return my_list\n```"
    },
    {
        "instruction": "Can you build a python program to generate a random 5 character string?",
        "output": "import random\n\ndef generate_random_string():\n    char_list = \"abcdefghijklmnopqrstuvwxyz0123456789\"\n    random_string = \"\"\n    for _ in range(5):\n        random_string += random.choice(char_list)\n    return random_string",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCan you build a python program to generate a random 5 character string?\n\n### Solution:\n```\nimport random\n\ndef generate_random_string():\n    char_list = \"abcdefghijklmnopqrstuvwxyz0123456789\"\n    random_string = \"\"\n    for _ in range(5):\n        random_string += random.choice(char_list)\n    return random_string\n```"
    },
    {
        "instruction": "Is it possible to create a function in Python that takes a string as an argument and returns its length?",
        "output": "def string_length(str):\n    return len(str)\n\nstring = \"Hello World\"\nlength = string_length(string)\nprint(\"Length of the string is: %d\" % length)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nIs it possible to create a function in Python that takes a string as an argument and returns its length?\n\n### Solution:\n```\ndef string_length(str):\n    return len(str)\n\nstring = \"Hello World\"\nlength = string_length(string)\nprint(\"Length of the string is: %d\" % length)\n```"
    },
    {
        "instruction": "Write a function in Python to find all words in a string that are 4 characters in length.",
        "output": "def find_words(text):\n \n # find all words in the string\n words = text.split(' ')\n \n # filter out words that are not 4 characters long\n filtered_words = [word for word in words if len(word) == 4]\n \n return filtered_words\n \n# example\ntext = 'The quick brown fox jumps over the lazy dog'\nwords = find_words(text)\n \nprint(words)\n \n# output: ['quick', 'brown', 'over', 'lazy']",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a function in Python to find all words in a string that are 4 characters in length.\n\n### Solution:\n```\ndef find_words(text):\n \n # find all words in the string\n words = text.split(' ')\n \n # filter out words that are not 4 characters long\n filtered_words = [word for word in words if len(word) == 4]\n \n return filtered_words\n \n# example\ntext = 'The quick brown fox jumps over the lazy dog'\nwords = find_words(text)\n \nprint(words)\n \n# output: ['quick', 'brown', 'over', 'lazy']\n```"
    },
    {
        "instruction": "Write a function in Python for detecting outliers on a given data set.",
        "output": "import numpy as np\n\ndef detect_outliers(data):\n q75, q25 = np.percentile(data, [75 ,25])\n iqr = q75 - q25\n \n cut_off = iqr * 1.5\n lower, upper = q25 - cut_off, q75 + cut_off\n \n outliers = [x for x in data if x < lower or x > upper]\n return outliers",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a function in Python for detecting outliers on a given data set.\n\n### Solution:\n```\nimport numpy as np\n\ndef detect_outliers(data):\n q75, q25 = np.percentile(data, [75 ,25])\n iqr = q75 - q25\n \n cut_off = iqr * 1.5\n lower, upper = q25 - cut_off, q75 + cut_off\n \n outliers = [x for x in data if x < lower or x > upper]\n return outliers\n```"
    },
    {
        "instruction": "Develop Python code to reverse an array.",
        "output": "def reverse_array(arr): \n    start = 0\n    end = len(arr) - 1\n      \n    while start < end: \n        arr[start], arr[end] = arr[end], arr[start] \n        start += 1\n        end -= 1\n    return arr \n  \n# Driver code \narr = [1, 2, 3, 4, 5] \nprint(reverse_array(arr))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop Python code to reverse an array.\n\n### Solution:\n```\ndef reverse_array(arr): \n    start = 0\n    end = len(arr) - 1\n      \n    while start < end: \n        arr[start], arr[end] = arr[end], arr[start] \n        start += 1\n        end -= 1\n    return arr \n  \n# Driver code \narr = [1, 2, 3, 4, 5] \nprint(reverse_array(arr))\n```"
    },
    {
        "instruction": "Optimize a given Python program to shorten its running time.",
        "output": "def add_list(list_a, list_b):\n    return [a + b for a, b in zip(list_a, list_b)]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nOptimize a given Python program to shorten its running time.\n\n### Solution:\n```\ndef add_list(list_a, list_b):\n    return [a + b for a, b in zip(list_a, list_b)]\n```"
    },
    {
        "instruction": "Write a Python program to calculate a value from a given sequence of numbers. The program should calculate the sum of the sequence elements and return the sum of the squares of the odd numbers from the sequence.",
        "output": "def calc_sum(sequence):\n sum = 0\n for num in sequence:\n sum += num\n return sum\n\ndef calc_sum_squares(sequence):\n sum = 0\n for num in sequence:\n  if num % 2 == 1:\n   sum += num * num\n return sum\n\nsequence = [2, 4, 5, 6, 7]\ntotal_sum = calc_sum(sequence)\nsum_squares = calc_sum_squares(sequence)\n\nprint(\"Total sum:\", total_sum)\nprint(\"Sum of squares of odd numbers:\", sum_squares)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to calculate a value from a given sequence of numbers. The program should calculate the sum of the sequence elements and return the sum of the squares of the odd numbers from the sequence.\n\n### Solution:\n```\ndef calc_sum(sequence):\n sum = 0\n for num in sequence:\n sum += num\n return sum\n\ndef calc_sum_squares(sequence):\n sum = 0\n for num in sequence:\n  if num % 2 == 1:\n   sum += num * num\n return sum\n\nsequence = [2, 4, 5, 6, 7]\ntotal_sum = calc_sum(sequence)\nsum_squares = calc_sum_squares(sequence)\n\nprint(\"Total sum:\", total_sum)\nprint(\"Sum of squares of odd numbers:\", sum_squares)\n```"
    },
    {
        "instruction": "How would you improve the following Python code to make it more efficient?",
        "output": "def calculate_square(numbers):\n    return [number * number for number in numbers]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nHow would you improve the following Python code to make it more efficient?\n\n### Solution:\n```\ndef calculate_square(numbers):\n    return [number * number for number in numbers]\n```"
    },
    {
        "instruction": "Create a Python program to add two matrices of 3 x 3 dimension.",
        "output": "def add_matrices(matrix1, matrix2):\n    results = [[0, 0, 0],\n               [0, 0, 0],\n               [0, 0, 0]]\n\n    for i in range(len(matrix1)):\n        for j in range(len(matrix1[0])):\n            results[i][j] = matrix1[i][j] + matrix2[i][j]\n\n    return results\n\nresult = add_matrices(matrix1, matrix2)\nprint(result) # output: [[11, 13, 15], [17, 19, 21], [23, 25, 27]]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to add two matrices of 3 x 3 dimension.\n\n### Solution:\n```\ndef add_matrices(matrix1, matrix2):\n    results = [[0, 0, 0],\n               [0, 0, 0],\n               [0, 0, 0]]\n\n    for i in range(len(matrix1)):\n        for j in range(len(matrix1[0])):\n            results[i][j] = matrix1[i][j] + matrix2[i][j]\n\n    return results\n\nresult = add_matrices(matrix1, matrix2)\nprint(result) # output: [[11, 13, 15], [17, 19, 21], [23, 25, 27]]\n```"
    },
    {
        "instruction": "Design a Python algorithm to compute the total number of inversions in an array of integers.",
        "output": "def count_inversions(arr): \n  inversion_count = 0  \n  for i in range(len(arr)): \n    for j in range(i + 1, len(arr)): \n        if arr[i] > arr[j]: \n            inversion_count += 1\n  \n  return inversion_count",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a Python algorithm to compute the total number of inversions in an array of integers.\n\n### Solution:\n```\ndef count_inversions(arr): \n  inversion_count = 0  \n  for i in range(len(arr)): \n    for j in range(i + 1, len(arr)): \n        if arr[i] > arr[j]: \n            inversion_count += 1\n  \n  return inversion_count\n```"
    },
    {
        "instruction": "Optimize the following Python code to compute the sum of even numbers in a list.",
        "output": "my_list = [1, 2, 3, 4, 5, 6]\n\n# sum comprehension \ntotal = sum(num for num in my_list if num % 2 == 0)\nprint(total)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nOptimize the following Python code to compute the sum of even numbers in a list.\n\n### Solution:\n```\nmy_list = [1, 2, 3, 4, 5, 6]\n\n# sum comprehension \ntotal = sum(num for num in my_list if num % 2 == 0)\nprint(total)\n```"
    },
    {
        "instruction": "Create a function in Python that takes an input string and returns whether it is a palindrome.",
        "output": "def isPalindrome(txt):\n    i = 0\n    j = len(txt) - 1\n    \n    while i < j:\n        if txt[i] != txt[j]:\n            return False\n        i += 1\n        j -= 1\n    \n    return True\n\nprint(isPalindrome(txt)) // True",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a function in Python that takes an input string and returns whether it is a palindrome.\n\n### Solution:\n```\ndef isPalindrome(txt):\n    i = 0\n    j = len(txt) - 1\n    \n    while i < j:\n        if txt[i] != txt[j]:\n            return False\n        i += 1\n        j -= 1\n    \n    return True\n\nprint(isPalindrome(txt)) // True\n```"
    },
    {
        "instruction": "Create a Python class called Employee that represents an employee in an organization. The Employee class should have instance attributes for the employee’s name, job title, and job number.",
        "output": "class Employee:\n    def __init__(self, name, job_title, job_number):\n        self.name = name\n        self.job_title = job_title\n        self.job_number = job_number",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python class called Employee that represents an employee in an organization. The Employee class should have instance attributes for the employee’s name, job title, and job number.\n\n### Solution:\n```\nclass Employee:\n    def __init__(self, name, job_title, job_number):\n        self.name = name\n        self.job_title = job_title\n        self.job_number = job_number\n```"
    },
    {
        "instruction": "Write a Python script that displays a message in the console when a certain web page changes its content.",
        "output": "# import the required libraries\nimport requests\nimport time\n\n# enter the website url\nurl = \"https://example.com/\"\n\n# make the initial request to get the initial html content\ninitial_content = requests.get(url).text\n\n# loop for ever\nwhile True: \n    \n    # every 5 seconds, make a new request\n    time.sleep(5)\n\n    # make the new request\n    current_content = requests.get(url).text\n    \n    # compare the new content with the initial content\n    if current_content != initial_content:\n        # update the initial content\n        initial_content = current_content\n        # print the message\n        print(\"The content of the page has changed\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python script that displays a message in the console when a certain web page changes its content.\n\n### Solution:\n```\n# import the required libraries\nimport requests\nimport time\n\n# enter the website url\nurl = \"https://example.com/\"\n\n# make the initial request to get the initial html content\ninitial_content = requests.get(url).text\n\n# loop for ever\nwhile True: \n    \n    # every 5 seconds, make a new request\n    time.sleep(5)\n\n    # make the new request\n    current_content = requests.get(url).text\n    \n    # compare the new content with the initial content\n    if current_content != initial_content:\n        # update the initial content\n        initial_content = current_content\n        # print the message\n        print(\"The content of the page has changed\")\n```"
    },
    {
        "instruction": "Create a machine learning model in Python to predict the age of a person from their height and weight.",
        "output": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Creating the X and Y datasets \nx = []\ny = []\n\n# Adding the data\nx.append([59, 140])\ny.append(30)\n\nx = np.array(x)\ny = np.array(y)\n\n# Creating and fitting the model \nmodel = LinearRegression().fit(x, y)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a machine learning model in Python to predict the age of a person from their height and weight.\n\n### Solution:\n```\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Creating the X and Y datasets \nx = []\ny = []\n\n# Adding the data\nx.append([59, 140])\ny.append(30)\n\nx = np.array(x)\ny = np.array(y)\n\n# Creating and fitting the model \nmodel = LinearRegression().fit(x, y)\n```"
    },
    {
        "instruction": "Create a random forest classifier in Python which predicts if a house is affordable or not based on its features such as location, size, number of bedrooms, number of bathrooms, etc.",
        "output": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read in data\ndata = pd.read_csv('data.csv')\n\n# Train the classifier\nfeatures = ['location', 'size', 'bedrooms', 'bathrooms', 'price']\nX = data[features]\ny = data['label']\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X, y)\n\n# Make predictions\npredictions = clf.predict(X)\nprint(predictions)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a random forest classifier in Python which predicts if a house is affordable or not based on its features such as location, size, number of bedrooms, number of bathrooms, etc.\n\n### Solution:\n```\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read in data\ndata = pd.read_csv('data.csv')\n\n# Train the classifier\nfeatures = ['location', 'size', 'bedrooms', 'bathrooms', 'price']\nX = data[features]\ny = data['label']\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X, y)\n\n# Make predictions\npredictions = clf.predict(X)\nprint(predictions)\n```"
    },
    {
        "instruction": "Write a Python function that computes the average of a given array of numbers.",
        "output": "def find_average(numbers):\n return sum(numbers) / len(numbers)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python function that computes the average of a given array of numbers.\n\n### Solution:\n```\ndef find_average(numbers):\n return sum(numbers) / len(numbers)\n```"
    },
    {
        "instruction": "Convert a given string to an array of characters using Python.",
        "output": "\"\"\"\nConvert a given string to an array of characters using Python\n\"\"\"\n\nstr = \"Hello World!\"\n\nlist = []\n\nfor character in str:\n    list.append(character)\n    \nprint(list) #['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!']",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConvert a given string to an array of characters using Python.\n\n### Solution:\n```\n\"\"\"\nConvert a given string to an array of characters using Python\n\"\"\"\n\nstr = \"Hello World!\"\n\nlist = []\n\nfor character in str:\n    list.append(character)\n    \nprint(list) #['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!']\n```"
    },
    {
        "instruction": "Create a program in Python that calculates permutations of a given list.",
        "output": "def permutations(items):\n  if len(items) == 0:\n    return [[]]\n\n  permutations_list = []\n\n  for i in range(len(items)):\n    items_copy = items.copy()\n    item = items_copy.pop(i)\n    permutations_partial = permutations(items_copy)\n\n    for j in range(len(permutations_partial)):\n      permutations_partial[j] = [item] + permutations_partial[j] \n\n    permutations_list.extend(permutations_partial)\n\n  return permutations_list\n\nif __name__ == '__main__':\n  items = [1,2,3]\n  permutations_list = permutations(items)\n  print(permutations_list)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a program in Python that calculates permutations of a given list.\n\n### Solution:\n```\ndef permutations(items):\n  if len(items) == 0:\n    return [[]]\n\n  permutations_list = []\n\n  for i in range(len(items)):\n    items_copy = items.copy()\n    item = items_copy.pop(i)\n    permutations_partial = permutations(items_copy)\n\n    for j in range(len(permutations_partial)):\n      permutations_partial[j] = [item] + permutations_partial[j] \n\n    permutations_list.extend(permutations_partial)\n\n  return permutations_list\n\nif __name__ == '__main__':\n  items = [1,2,3]\n  permutations_list = permutations(items)\n  print(permutations_list)\n```"
    },
    {
        "instruction": "Generate a Python script to calculate the sum of elements in the following input array.",
        "output": "def SumArray(arr):\n  result = 0\n  for num in arr: \n    result += num\n  return result \n \nprint(SumArray([1, 4, 8, 10, 12]))\n    # Outputs: 35",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python script to calculate the sum of elements in the following input array.\n\n### Solution:\n```\ndef SumArray(arr):\n  result = 0\n  for num in arr: \n    result += num\n  return result \n \nprint(SumArray([1, 4, 8, 10, 12]))\n    # Outputs: 35\n```"
    },
    {
        "instruction": "Write a Python program which takes an input string, removes all non-alphanumeric characters, and prints all of the words used in the string along with the number of times each word appears?",
        "output": "words = []\n\n# remove all non-alphanumeric characters\nfor char in string:\n if char.isalnum():\n words.append(char)\n\n# count number of times each word is used\nword_count = {}\nfor word in words:\n if word in word_count:\n word_count[word] += 1\n else:\n word_count[word] = 1\n\nfor k,v in word_count.items():\n print('{} : {}'.format(k,v))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program which takes an input string, removes all non-alphanumeric characters, and prints all of the words used in the string along with the number of times each word appears?\n\n### Solution:\n```\nwords = []\n\n# remove all non-alphanumeric characters\nfor char in string:\n if char.isalnum():\n words.append(char)\n\n# count number of times each word is used\nword_count = {}\nfor word in words:\n if word in word_count:\n word_count[word] += 1\n else:\n word_count[word] = 1\n\nfor k,v in word_count.items():\n print('{} : {}'.format(k,v))\n```"
    },
    {
        "instruction": "Generate a Python function to calculate the least common multiple (LCM) of two numbers.",
        "output": "def lcm(a, b): \n    lcm = (a*b)//gcd(a,b) \n    return lcm",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python function to calculate the least common multiple (LCM) of two numbers.\n\n### Solution:\n```\ndef lcm(a, b): \n    lcm = (a*b)//gcd(a,b) \n    return lcm\n```"
    },
    {
        "instruction": "Create a Python function to optimize an objective function using gradient descent.",
        "output": "def gradient_descent(objective_function, gradients, learning_rate, initial_parameters):\n    parameters = initial_parameters\n    while True:\n        # Step 1: Calculate Gradient\n        grads = gradients(parameters)\n        \n        # Step 2: Update parameters\n        parameters -= learning_rate * grads\n        \n        # Step 3: Check stopping criteria\n        if np.allclose(grads, 0):\n            break\n    return parameters",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python function to optimize an objective function using gradient descent.\n\n### Solution:\n```\ndef gradient_descent(objective_function, gradients, learning_rate, initial_parameters):\n    parameters = initial_parameters\n    while True:\n        # Step 1: Calculate Gradient\n        grads = gradients(parameters)\n        \n        # Step 2: Update parameters\n        parameters -= learning_rate * grads\n        \n        # Step 3: Check stopping criteria\n        if np.allclose(grads, 0):\n            break\n    return parameters\n```"
    },
    {
        "instruction": "Create a Python program to convert a number to its corresponding month name.",
        "output": "def num_to_month(num):\n    months = [\n        'January', \n        'February', \n        'March', \n        'April', \n        'May', \n        'June', \n        'July', \n        'August', \n        'September', \n        'October', \n        'November', \n        'December'\n    ]\n    return months[num - 1]\n\nprint(num_to_month(2)) # February",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to convert a number to its corresponding month name.\n\n### Solution:\n```\ndef num_to_month(num):\n    months = [\n        'January', \n        'February', \n        'March', \n        'April', \n        'May', \n        'June', \n        'July', \n        'August', \n        'September', \n        'October', \n        'November', \n        'December'\n    ]\n    return months[num - 1]\n\nprint(num_to_month(2)) # February\n```"
    },
    {
        "instruction": "Create a Python function that takes a string and rotates the characters in the string by a specified integer.",
        "output": "def rotateString(s, n):\n    output = \"\"\n    for char in s:\n        output += chr(ord(char) + n)\n    return output\n\nresult = rotateString(\"Hello\", 3)\nprint(result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python function that takes a string and rotates the characters in the string by a specified integer.\n\n### Solution:\n```\ndef rotateString(s, n):\n    output = \"\"\n    for char in s:\n        output += chr(ord(char) + n)\n    return output\n\nresult = rotateString(\"Hello\", 3)\nprint(result)\n```"
    },
    {
        "instruction": "Write a Python loop to print the numbers between 2 and 10 (inclusive).",
        "output": "for i in range(2, 11):\n    print(i)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python loop to print the numbers between 2 and 10 (inclusive).\n\n### Solution:\n```\nfor i in range(2, 11):\n    print(i)\n```"
    },
    {
        "instruction": "Generate a Python program which will filter all prime numbers from a list of integers.",
        "output": "def filter_prime_numbers(l):\n    result = []\n    for num in l:\n        if is_prime(num):\n            result.append(num)\n    return result\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python program which will filter all prime numbers from a list of integers.\n\n### Solution:\n```\ndef filter_prime_numbers(l):\n    result = []\n    for num in l:\n        if is_prime(num):\n            result.append(num)\n    return result\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```"
    },
    {
        "instruction": "Using the data provided, write a program in Python to determine which city is furthest north.",
        "output": "cities = [[\"New York\", \"USA\", 40.71,-74.00], [\"London\", \"UK\", -0.13, 51.50], [\"Paris\", \"France\", 2.35, 48.85]]\n\ndef find_furthest_north(cities):\n  furthest_north = cities[0]\n  for city in cities:\n    if city[2] > furthest_north[2]:\n      furthest_north = city\n  return furthest_north\n\nfurthest_north = find_furthest_north(cities)\nprint(furthest_north) # prints [\"London\", \"UK\", -0.13, 51.50]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nUsing the data provided, write a program in Python to determine which city is furthest north.\n\n### Solution:\n```\ncities = [[\"New York\", \"USA\", 40.71,-74.00], [\"London\", \"UK\", -0.13, 51.50], [\"Paris\", \"France\", 2.35, 48.85]]\n\ndef find_furthest_north(cities):\n  furthest_north = cities[0]\n  for city in cities:\n    if city[2] > furthest_north[2]:\n      furthest_north = city\n  return furthest_north\n\nfurthest_north = find_furthest_north(cities)\nprint(furthest_north) # prints [\"London\", \"UK\", -0.13, 51.50]\n```"
    },
    {
        "instruction": "Create a Python program to find the sum of all numbers in a given string that can represent a mathematical expression.",
        "output": "import re\n\ndef sum_expression(expression):\n sum = 0\n \n # Extract all numbers from the expression\n numbers = re.findall(r\"\\d+\", expression)\n \n # Calculate the sum\n for num in numbers:\n sum += int(num)\n \n return sum\n\n# Driver code\nexpression = \"2 + 4 - 7 + 3 + 4 - 8\"\nresult = sum_expression(expression)\n\nprint(\"Sum of the expression:\", result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to find the sum of all numbers in a given string that can represent a mathematical expression.\n\n### Solution:\n```\nimport re\n\ndef sum_expression(expression):\n sum = 0\n \n # Extract all numbers from the expression\n numbers = re.findall(r\"\\d+\", expression)\n \n # Calculate the sum\n for num in numbers:\n sum += int(num)\n \n return sum\n\n# Driver code\nexpression = \"2 + 4 - 7 + 3 + 4 - 8\"\nresult = sum_expression(expression)\n\nprint(\"Sum of the expression:\", result)\n```"
    },
    {
        "instruction": "Implement a function in Python to print the number of times 'Hello World' is printed, given a string and a substring.",
        "output": "def countStringOccurrences(string, substring):\n    cnt = 0\n    index = -1\n    while string.find(substring, index + 1) != -1:\n        index = string.find(substring, index + 1)\n        cnt += 1 \n    return cnt\n\noccurrences = countStringOccurrences('Hello World, Hello World', 'Hello World')\nprint(occurrences)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nImplement a function in Python to print the number of times 'Hello World' is printed, given a string and a substring.\n\n### Solution:\n```\ndef countStringOccurrences(string, substring):\n    cnt = 0\n    index = -1\n    while string.find(substring, index + 1) != -1:\n        index = string.find(substring, index + 1)\n        cnt += 1 \n    return cnt\n\noccurrences = countStringOccurrences('Hello World, Hello World', 'Hello World')\nprint(occurrences)\n```"
    },
    {
        "instruction": "Clone a remote Git repository using a Python program.",
        "output": "import git\n\n# Clone a remote Git repository\nrepo = git.Repo.clone_from(\"https://github.com/username/repo.git\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nClone a remote Git repository using a Python program.\n\n### Solution:\n```\nimport git\n\n# Clone a remote Git repository\nrepo = git.Repo.clone_from(\"https://github.com/username/repo.git\")\n```"
    },
    {
        "instruction": "Create a Python list that contains strings [\"apple\", \"banana\", \"lemon\", \"mango\"].",
        "output": "my_list = [\"apple\", \"banana\", \"lemon\", \"mango\"]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python list that contains strings [\"apple\", \"banana\", \"lemon\", \"mango\"].\n\n### Solution:\n```\nmy_list = [\"apple\", \"banana\", \"lemon\", \"mango\"]\n```"
    },
    {
        "instruction": "Design a method in Python to deduplicate a given list of elements.",
        "output": "# store the given list\nmy_list = [4, 5, 1, 9, 5, 4, 3]\n\n# remove the duplicates\ndeduplicated_list = list(set(my_list))\n\n# print the result\nprint(\"Deduplicated list:\", deduplicated_list)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a method in Python to deduplicate a given list of elements.\n\n### Solution:\n```\n# store the given list\nmy_list = [4, 5, 1, 9, 5, 4, 3]\n\n# remove the duplicates\ndeduplicated_list = list(set(my_list))\n\n# print the result\nprint(\"Deduplicated list:\", deduplicated_list)\n```"
    },
    {
        "instruction": "Design a python database schema to store data describing a person's name, age, and address.",
        "output": "import sqlite3\n\n# Create database\ndb = sqlite3.connect('test.db')\n\nc = db.cursor() \n    \n# Create table\nc.execute('DROP TABLE IF EXISTS person')\n\nc.execute('''\n        CREATE TABLE person(\n        name TEXT,\n        age INTEGER,\n        address TEXT\n        )\n        ''')",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a python database schema to store data describing a person's name, age, and address.\n\n### Solution:\n```\nimport sqlite3\n\n# Create database\ndb = sqlite3.connect('test.db')\n\nc = db.cursor() \n    \n# Create table\nc.execute('DROP TABLE IF EXISTS person')\n\nc.execute('''\n        CREATE TABLE person(\n        name TEXT,\n        age INTEGER,\n        address TEXT\n        )\n        ''')\n```"
    },
    {
        "instruction": "Generate a Python function that will double the given input value.",
        "output": "def double(x):\n    return x * 2",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python function that will double the given input value.\n\n### Solution:\n```\ndef double(x):\n    return x * 2\n```"
    },
    {
        "instruction": "Design a python program to analyze a text document.",
        "output": "# Read in the War and Peace text file\nwith open('war_and_peace.txt', 'r') as f:\n    text = f.read()\n \n# Tokenize the text\nwords = text.lower().split()\n \n# Count the words\nword_freq = {}\nfor word in words:\n    if word not in word_freq:\n        word_freq[word] = 0\n    word_freq[word] += 1\n \n# Print out the most frequent words\nsorted_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)\n \nprint(\"Most frequent words:\")\nfor word, count in sorted_words[:20]:\n    print('{} : {}'.format(word, count))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a python program to analyze a text document.\n\n### Solution:\n```\n# Read in the War and Peace text file\nwith open('war_and_peace.txt', 'r') as f:\n    text = f.read()\n \n# Tokenize the text\nwords = text.lower().split()\n \n# Count the words\nword_freq = {}\nfor word in words:\n    if word not in word_freq:\n        word_freq[word] = 0\n    word_freq[word] += 1\n \n# Print out the most frequent words\nsorted_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)\n \nprint(\"Most frequent words:\")\nfor word, count in sorted_words[:20]:\n    print('{} : {}'.format(word, count))\n```"
    },
    {
        "instruction": "Write a Python statement that Finds the maximum value among the given numbers.",
        "output": "max_num = max([10, 5, 15, 35, 20])\nprint(max_num)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python statement that Finds the maximum value among the given numbers.\n\n### Solution:\n```\nmax_num = max([10, 5, 15, 35, 20])\nprint(max_num)\n```"
    },
    {
        "instruction": "Write a Python program to print out the first n numbers of the Fibonacci sequence.",
        "output": "def fibonacci_sequence(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib_numbers = [0, 1]\n        for i in range(2, n):\n            fib_numbers.append(fib_numbers[i-2] + fib_numbers[i-1])\n        return fib_numbers",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to print out the first n numbers of the Fibonacci sequence.\n\n### Solution:\n```\ndef fibonacci_sequence(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib_numbers = [0, 1]\n        for i in range(2, n):\n            fib_numbers.append(fib_numbers[i-2] + fib_numbers[i-1])\n        return fib_numbers\n```"
    },
    {
        "instruction": "Implement an algorithm in Python that can calculate the maximum path sum from the given tree.",
        "output": "def max_path_sum(root):\n    if not root:\n        return 0\n\n    left_sum = max_path_sum(root.left)\n    right_sum = max_path_sum(root.right)\n\n    max_single_val = max(max(left_sum, right_sum) + root.data, root.data)\n\n    max_top = max(max_single_val, left_sum + root.data + right_sum)\n\n    max_path_sum.res = max(max_path_sum.res, max_top)\n\n    return max_single_val\n\nmax_path_sum.res = float('-inf')\nmax_path_sum(root)\nprint (max_path_sum.res)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nImplement an algorithm in Python that can calculate the maximum path sum from the given tree.\n\n### Solution:\n```\ndef max_path_sum(root):\n    if not root:\n        return 0\n\n    left_sum = max_path_sum(root.left)\n    right_sum = max_path_sum(root.right)\n\n    max_single_val = max(max(left_sum, right_sum) + root.data, root.data)\n\n    max_top = max(max_single_val, left_sum + root.data + right_sum)\n\n    max_path_sum.res = max(max_path_sum.res, max_top)\n\n    return max_single_val\n\nmax_path_sum.res = float('-inf')\nmax_path_sum(root)\nprint (max_path_sum.res)\n```"
    },
    {
        "instruction": "Convert the following basic Python code into its equivalent JavaScript code.",
        "output": "for(let i = 1; i < 5; i++){\n    console.log(i);\n}",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConvert the following basic Python code into its equivalent JavaScript code.\n\n### Solution:\n```\nfor(let i = 1; i < 5; i++){\n    console.log(i);\n}\n```"
    },
    {
        "instruction": "Write a Python program to remove items from a list present in other list.",
        "output": "result_list = [item for item in list1 if item not in list2]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to remove items from a list present in other list.\n\n### Solution:\n```\nresult_list = [item for item in list1 if item not in list2]\n```"
    },
    {
        "instruction": "Provide a Python program that sorts a list of strings based on the length of the strings.",
        "output": "my_list = [\"banana\", \"apple\", \"watermelon\"]\nmy_list.sort(key=len)\n\n# my_list is now [\"apple\", \"banana\", \"watermelon\"]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nProvide a Python program that sorts a list of strings based on the length of the strings.\n\n### Solution:\n```\nmy_list = [\"banana\", \"apple\", \"watermelon\"]\nmy_list.sort(key=len)\n\n# my_list is now [\"apple\", \"banana\", \"watermelon\"]\n```"
    },
    {
        "instruction": "Implement a Python function that will take two strings and return true if the first string contains the second.",
        "output": "def check_contains(query, word): \n    if query.find(word) != -1:\n        return True\n    return False\n\nresult = check_contains(query, word)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nImplement a Python function that will take two strings and return true if the first string contains the second.\n\n### Solution:\n```\ndef check_contains(query, word): \n    if query.find(word) != -1:\n        return True\n    return False\n\nresult = check_contains(query, word)\n```"
    },
    {
        "instruction": "Create a function in Python that solves the Fibonacci sequence.",
        "output": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a function in Python that solves the Fibonacci sequence.\n\n### Solution:\n```\ndef fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)\n```"
    },
    {
        "instruction": "Design a Python program to find if a given number is Armstrong or not. A number is Armstrong if it is equal to the sum of its digits raised to the power of the number of digits.",
        "output": "def isArmstrong(num): \n    # To store the sum of the power of each digit \n    sum_digits = 0 \n  \n    # Find the number of digits \n    digits = len(str(num)) \n  \n    # Go through each digit \n    temp = num \n    while temp > 0: \n        digit = temp % 10\n  \n        # Raise it to the power of the number of digits\n        sum_digits += digit ** digits \n  \n        temp //= 10\n  \n    # Check if sum of the digits raised to the power is \n    # equal to the original number \n    return num == sum_digits",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a Python program to find if a given number is Armstrong or not. A number is Armstrong if it is equal to the sum of its digits raised to the power of the number of digits.\n\n### Solution:\n```\ndef isArmstrong(num): \n    # To store the sum of the power of each digit \n    sum_digits = 0 \n  \n    # Find the number of digits \n    digits = len(str(num)) \n  \n    # Go through each digit \n    temp = num \n    while temp > 0: \n        digit = temp % 10\n  \n        # Raise it to the power of the number of digits\n        sum_digits += digit ** digits \n  \n        temp //= 10\n  \n    # Check if sum of the digits raised to the power is \n    # equal to the original number \n    return num == sum_digits\n```"
    },
    {
        "instruction": "Generate a list of the first 10 Fibonacci numbers in Python.",
        "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n# Driver Program \nfib_list = [] \nfor i in range(10):\n   fib_list.append(fibonacci(i)) \n\nprint(fib_list)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a list of the first 10 Fibonacci numbers in Python.\n\n### Solution:\n```\ndef fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n# Driver Program \nfib_list = [] \nfor i in range(10):\n   fib_list.append(fibonacci(i)) \n\nprint(fib_list)\n```"
    },
    {
        "instruction": "Determine the type of the following python object.",
        "output": "list",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDetermine the type of the following python object.\n\n### Solution:\n```\nlist\n```"
    },
    {
        "instruction": "Create a Python program to solve the following equation.",
        "output": "#!/usr/bin/env python\n\ndef solve_equation(eqn):\n    eqn_parts = eqn.split(' ')\n\n    # co-efficients of x and y\n    a = int(eqn_parts[0].replace('x', ''))\n    b = int(eqn_parts[2].replace('y', ''))\n\n    # RHS value\n    c = int(eqn_parts[4])\n\n    # solving the equation\n    x = (c - (b * 3)) / (2 * a)\n    y = (5 - (2 * x)) / 3\n\n    return x, y\n\n\nif __name__ == '__main__':\n    eqn = '2x + 3y = 5'\n    x, y = solve_equation(eqn)\n\n    print(f'Equation: {eqn}\\n')\n    print(f'x = {x}')\n    print(f'y = {y}')",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to solve the following equation.\n\n### Solution:\n```\n#!/usr/bin/env python\n\ndef solve_equation(eqn):\n    eqn_parts = eqn.split(' ')\n\n    # co-efficients of x and y\n    a = int(eqn_parts[0].replace('x', ''))\n    b = int(eqn_parts[2].replace('y', ''))\n\n    # RHS value\n    c = int(eqn_parts[4])\n\n    # solving the equation\n    x = (c - (b * 3)) / (2 * a)\n    y = (5 - (2 * x)) / 3\n\n    return x, y\n\n\nif __name__ == '__main__':\n    eqn = '2x + 3y = 5'\n    x, y = solve_equation(eqn)\n\n    print(f'Equation: {eqn}\\n')\n    print(f'x = {x}')\n    print(f'y = {y}')\n```"
    },
    {
        "instruction": "How would you write a code to flatten a given nested list in Python?",
        "output": "def flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if type(item) == list:\n            flattened_list.extend(flatten_list (item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nHow would you write a code to flatten a given nested list in Python?\n\n### Solution:\n```\ndef flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if type(item) == list:\n            flattened_list.extend(flatten_list (item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n```"
    },
    {
        "instruction": "Implement a CRUD (Create Read Update Delete) system in Python.",
        "output": "class CRUD:\n    def __init__(self):\n        self.records = []\n    \n    def create(self,data):\n        record = data\n        self.records.append(record)\n    \n    def read(self):\n        return self.records\n \n    def update(self,index,data):\n        self.records[index] = data\n \n    def delete(self,index):\n        self.records.pop(index)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nImplement a CRUD (Create Read Update Delete) system in Python.\n\n### Solution:\n```\nclass CRUD:\n    def __init__(self):\n        self.records = []\n    \n    def create(self,data):\n        record = data\n        self.records.append(record)\n    \n    def read(self):\n        return self.records\n \n    def update(self,index,data):\n        self.records[index] = data\n \n    def delete(self,index):\n        self.records.pop(index)\n```"
    },
    {
        "instruction": "Create a Python program to group words of the same length together",
        "output": "def group_words(words):\n    # Function to group words of the same length together\n    groups = {}\n    \n    for word in words:\n        length = len(word)\n        if length not in groups:\n            groups[length] = []\n        groups[length].append(word)\n    return groups",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to group words of the same length together\n\n### Solution:\n```\ndef group_words(words):\n    # Function to group words of the same length together\n    groups = {}\n    \n    for word in words:\n        length = len(word)\n        if length not in groups:\n            groups[length] = []\n        groups[length].append(word)\n    return groups\n```"
    },
    {
        "instruction": "Write a function in Python that counts the number of words in the given string.",
        "output": "def word_count(str):\n words = str.split()\n return len(words)\n\nprint(word_count(\"This is a sample string with some words\"))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a function in Python that counts the number of words in the given string.\n\n### Solution:\n```\ndef word_count(str):\n words = str.split()\n return len(words)\n\nprint(word_count(\"This is a sample string with some words\"))\n```"
    },
    {
        "instruction": "Create a Python program to select all the words that contain at least four vowels from a list of words.",
        "output": "def find_words_with_four_vowels(words):\n    vowels = \"aeiou\"\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter in vowels:\n                count += 1 \n        if count >= 4:\n            result.append(word)\n    return result\n\nwords = [\"algorithm\", \"machine\", \"programming\", \"beast\"]\nresult = find_words_with_four_vowels(words)\nprint(result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to select all the words that contain at least four vowels from a list of words.\n\n### Solution:\n```\ndef find_words_with_four_vowels(words):\n    vowels = \"aeiou\"\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter in vowels:\n                count += 1 \n        if count >= 4:\n            result.append(word)\n    return result\n\nwords = [\"algorithm\", \"machine\", \"programming\", \"beast\"]\nresult = find_words_with_four_vowels(words)\nprint(result)\n```"
    },
    {
        "instruction": "Write an algorithm in Python that takes a list of elements and determines if the list is sorted or not.",
        "output": "def is_sorted(lst):\n # base case: if the list is empty then it is sorted\n if not lst:\n  return True\n # compare the first two element\n if lst[0] > lst[1]:\n  return False\n # recursively call the function with the remaining elements in the list\n return is_sorted(lst[1:])",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite an algorithm in Python that takes a list of elements and determines if the list is sorted or not.\n\n### Solution:\n```\ndef is_sorted(lst):\n # base case: if the list is empty then it is sorted\n if not lst:\n  return True\n # compare the first two element\n if lst[0] > lst[1]:\n  return False\n # recursively call the function with the remaining elements in the list\n return is_sorted(lst[1:])\n```"
    },
    {
        "instruction": "Design a program in Python that takes in a list of numbers and outputs the list after removing all negative numbers",
        "output": "def remove_negatives(list):\n    filtered_list = list(filter(lambda x: x>=0,list))\n    return filtered_list",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a program in Python that takes in a list of numbers and outputs the list after removing all negative numbers\n\n### Solution:\n```\ndef remove_negatives(list):\n    filtered_list = list(filter(lambda x: x>=0,list))\n    return filtered_list\n```"
    },
    {
        "instruction": "Evaluate a basic machine learning model for predicting house prices using the provided dataset. The model should be written in Python using the scikit-learn library.",
        "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# read the dataset\ndata = pd.read_csv('housing.csv')\n\n# split the data\nX = data.drop('price', axis=1)\ny = data['price']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# train the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# evaluate the model\nscore = model.score(X_test, y_test)\nprint(\"Model Score:\", score)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nEvaluate a basic machine learning model for predicting house prices using the provided dataset. The model should be written in Python using the scikit-learn library.\n\n### Solution:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# read the dataset\ndata = pd.read_csv('housing.csv')\n\n# split the data\nX = data.drop('price', axis=1)\ny = data['price']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# train the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# evaluate the model\nscore = model.score(X_test, y_test)\nprint(\"Model Score:\", score)\n```"
    },
    {
        "instruction": "Develop a Python code snippet to compute the Euclidean distance between two points.",
        "output": "def euclidean_distance(point1, point2):\n    dx = point1[0] - point2[0]\n    dy = point1[1] - point2[1]\n    return (dx*dx + dy*dy)**0.5",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop a Python code snippet to compute the Euclidean distance between two points.\n\n### Solution:\n```\ndef euclidean_distance(point1, point2):\n    dx = point1[0] - point2[0]\n    dy = point1[1] - point2[1]\n    return (dx*dx + dy*dy)**0.5\n```"
    },
    {
        "instruction": "Write a function to parse an http header to a python dictionary.",
        "output": "\"\"\"\nWrite a function to parse an http header to a python dictionary.\n\"\"\"\n\n# Get the input string\nhttp_header = 'Accept: application/json\\nContent-Type: text/html\\nContent-Length: 15\\n'\n\n# Parse the header string to a dictionary\ndef parse_http_header(header):\n    header_dict = {}\n    definition_list = header.split('\\n')\n    for definition in definition_list:\n        # Skip invalid definitions (ex: \"\")\n        if definition == '': \n            continue\n        # Split definition field into key and value\n        (key, value) = definition.split(': ')\n        # Update dictionary\n        header_dict[key] = value\n    return header_dict\n\n# Output the result\nheader_dict = parse_http_header(http_header)\nprint(header_dict)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a function to parse an http header to a python dictionary.\n\n### Solution:\n```\n\"\"\"\nWrite a function to parse an http header to a python dictionary.\n\"\"\"\n\n# Get the input string\nhttp_header = 'Accept: application/json\\nContent-Type: text/html\\nContent-Length: 15\\n'\n\n# Parse the header string to a dictionary\ndef parse_http_header(header):\n    header_dict = {}\n    definition_list = header.split('\\n')\n    for definition in definition_list:\n        # Skip invalid definitions (ex: \"\")\n        if definition == '': \n            continue\n        # Split definition field into key and value\n        (key, value) = definition.split(': ')\n        # Update dictionary\n        header_dict[key] = value\n    return header_dict\n\n# Output the result\nheader_dict = parse_http_header(http_header)\nprint(header_dict)\n```"
    },
    {
        "instruction": "Create a Python web crawler to collect data from web page.",
        "output": "import requests\nimport bs4 \n\ndef web_crawler(url):\n  # make request to the specified url and retrieve the response\n  response = requests.get(url) \n  # since this page is regular HTML page, we need to use the html parser\n  soup = bs4.BeautifulSoup(response.text, 'html.parser')\n  # extract the data from the parsed web page \n  results = soup.select(\"body\") \n  # return collected data\n  return results",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python web crawler to collect data from web page.\n\n### Solution:\n```\nimport requests\nimport bs4 \n\ndef web_crawler(url):\n  # make request to the specified url and retrieve the response\n  response = requests.get(url) \n  # since this page is regular HTML page, we need to use the html parser\n  soup = bs4.BeautifulSoup(response.text, 'html.parser')\n  # extract the data from the parsed web page \n  results = soup.select(\"body\") \n  # return collected data\n  return results\n```"
    },
    {
        "instruction": "Convert the following string to a list of individual elements in Python: \"apple,orange,banana\".",
        "output": "list = [\"apple\", \"orange\", \"banana\"]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConvert the following string to a list of individual elements in Python: \"apple,orange,banana\".\n\n### Solution:\n```\nlist = [\"apple\", \"orange\", \"banana\"]\n```"
    },
    {
        "instruction": "Produce a Python script that checks if a given input string is a valid IP address.",
        "output": "import re\n\ndef is_valid_ip(ip):\n    #https://www.regular-expressions.info/ip.html\n    pattern = r\"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\"\n    matcher = re.match(pattern, ip)\n    if matcher:\n        return True\n    else:\n        return False\n\nis_ip_valid = is_valid_ip(\"192.168.0.1\")\nif is_ip_valid:\n    print(\"IP is valid\")\nelse:\n    print(\"IP is not valid\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nProduce a Python script that checks if a given input string is a valid IP address.\n\n### Solution:\n```\nimport re\n\ndef is_valid_ip(ip):\n    #https://www.regular-expressions.info/ip.html\n    pattern = r\"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\"\n    matcher = re.match(pattern, ip)\n    if matcher:\n        return True\n    else:\n        return False\n\nis_ip_valid = is_valid_ip(\"192.168.0.1\")\nif is_ip_valid:\n    print(\"IP is valid\")\nelse:\n    print(\"IP is not valid\")\n```"
    },
    {
        "instruction": "Generate Python code to find the third largest element in an array.",
        "output": "def third_largest(arr): \n    first = arr[0] \n    second = -float(\"inf\") \n    third = -float(\"inf\") \n  \n    for num in arr[1:]: \n        if (num > first): \n            third = second \n            second = first \n            first = num\n  \n        elif (num > second):              \n            third = second \n            second = num \n  \n        elif (num > third):               \n            third = num \n                               \n    return third",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate Python code to find the third largest element in an array.\n\n### Solution:\n```\ndef third_largest(arr): \n    first = arr[0] \n    second = -float(\"inf\") \n    third = -float(\"inf\") \n  \n    for num in arr[1:]: \n        if (num > first): \n            third = second \n            second = first \n            first = num\n  \n        elif (num > second):              \n            third = second \n            second = num \n  \n        elif (num > third):               \n            third = num \n                               \n    return third\n```"
    },
    {
        "instruction": "Perform set theory operations using Python.",
        "output": "A = {1, 2, 3}\nB = {2, 3, 4}\n\n# Union of Sets\nC = A.union(B) \nprint(C) \n\n# Intersection of Sets \nC = A.intersection(B) \nprint(C) \n\n# Difference of Sets \nC = A.difference(B) \nprint(C)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nPerform set theory operations using Python.\n\n### Solution:\n```\nA = {1, 2, 3}\nB = {2, 3, 4}\n\n# Union of Sets\nC = A.union(B) \nprint(C) \n\n# Intersection of Sets \nC = A.intersection(B) \nprint(C) \n\n# Difference of Sets \nC = A.difference(B) \nprint(C)\n```"
    },
    {
        "instruction": "Create a DataFrame in Python Pandas using given dates, numbers, and strings.",
        "output": "import pandas as pd\n\n# Create the dataframe\ndf = pd.DataFrame({'date': dates, 'number': numbers, 'string': strings})\n\ndf\n   date  number string\n0  2013-01-01       1      a\n1  2013-01-02       2      b\n2  2013-01-03       3      c",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a DataFrame in Python Pandas using given dates, numbers, and strings.\n\n### Solution:\n```\nimport pandas as pd\n\n# Create the dataframe\ndf = pd.DataFrame({'date': dates, 'number': numbers, 'string': strings})\n\ndf\n   date  number string\n0  2013-01-01       1      a\n1  2013-01-02       2      b\n2  2013-01-03       3      c\n```"
    },
    {
        "instruction": "Create a recursive function in Python to find out if a number is a prime",
        "output": "def is_prime(num):\n    if num == 1:\n        return False\n    if num == 2 and num % 2 == 0:\n        return True\n    else:\n        for x in range(2, num):\n            if num % x == 0:\n                return False\n        return True",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a recursive function in Python to find out if a number is a prime\n\n### Solution:\n```\ndef is_prime(num):\n    if num == 1:\n        return False\n    if num == 2 and num % 2 == 0:\n        return True\n    else:\n        for x in range(2, num):\n            if num % x == 0:\n                return False\n        return True\n```"
    },
    {
        "instruction": "Play a game of Tic-Tac-Toe in Python.",
        "output": "# Define a 3x3 board\nboard = [['_','_','_'],\n         ['_','_','_'], ['_','_','_']]\n\n# Function to display the board\ndef print_board(board):\n  for i in range(3):\n    for j in range(3):\n      print(board[i][j] + \" \", end=\"\")\n    print()\n\n# Define a player A, who plays a piece 'X' at location (0,0)\nboard[0][0] = 'X'\n\n# Print the board\nprint_board(board)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nPlay a game of Tic-Tac-Toe in Python.\n\n### Solution:\n```\n# Define a 3x3 board\nboard = [['_','_','_'],\n         ['_','_','_'], ['_','_','_']]\n\n# Function to display the board\ndef print_board(board):\n  for i in range(3):\n    for j in range(3):\n      print(board[i][j] + \" \", end=\"\")\n    print()\n\n# Define a player A, who plays a piece 'X' at location (0,0)\nboard[0][0] = 'X'\n\n# Print the board\nprint_board(board)\n```"
    },
    {
        "instruction": "Write a Python program to remove a given element from a list.",
        "output": "def remove_item(items, target):\n    return [i for i in items if i != target]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to remove a given element from a list.\n\n### Solution:\n```\ndef remove_item(items, target):\n    return [i for i in items if i != target]\n```"
    },
    {
        "instruction": "Write a function in Python that takes a list of names as the parameter and returns the longest name in the list.",
        "output": "def longest_name(names):\n longest_name = ''\n\n for name in names:\n  if len(name) > len(longest_name):\n   longest_name = name\n \n return longest_name\n\nNames = ['John', 'Michael', 'Scott', 'Steve']\n\nlongest = longest_name(Names)\n\nprint(longest) # Michael",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a function in Python that takes a list of names as the parameter and returns the longest name in the list.\n\n### Solution:\n```\ndef longest_name(names):\n longest_name = ''\n\n for name in names:\n  if len(name) > len(longest_name):\n   longest_name = name\n \n return longest_name\n\nNames = ['John', 'Michael', 'Scott', 'Steve']\n\nlongest = longest_name(Names)\n\nprint(longest) # Michael\n```"
    },
    {
        "instruction": "Write a python program that takes a list of strings, checks if any of them are palindromes, and returns 'True' if at least one of them is a palindrome.",
        "output": "def is_palindrome(strings):\n    for string in strings:\n        reversed_string = string[::-1]\n        if string == reversed_string:\n            return True\n    return False\n\nstrings = ['abc', 'bob', 'kayak']\nout = is_palindrome(strings)\nprint(out)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a python program that takes a list of strings, checks if any of them are palindromes, and returns 'True' if at least one of them is a palindrome.\n\n### Solution:\n```\ndef is_palindrome(strings):\n    for string in strings:\n        reversed_string = string[::-1]\n        if string == reversed_string:\n            return True\n    return False\n\nstrings = ['abc', 'bob', 'kayak']\nout = is_palindrome(strings)\nprint(out)\n```"
    },
    {
        "instruction": "Write a python loop to print all the numbers from 1 to 10.",
        "output": "for i in range(1,11):\n    print(i)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a python loop to print all the numbers from 1 to 10.\n\n### Solution:\n```\nfor i in range(1,11):\n    print(i)\n```"
    },
    {
        "instruction": "Build a machine learning model in Python to classify animals.",
        "output": "#import libraries \nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.datasets import load_iris \nfrom sklearn.model_selection import train_test_split \n  \n#import dataset \ndata = load_iris() \n  \n#divide the data into independent and dependent variables \nX = data.data \ny = data.target \n  \n# Split the data into training and test set \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) \n  \n#Define the model \nmodel = RandomForestClassifier(n_estimators=100) \n  \n#Train the model \nmodel.fit(X_train, y_train) \n  \n# Test the model \nmodel.score(X_test, y_test)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nBuild a machine learning model in Python to classify animals.\n\n### Solution:\n```\n#import libraries \nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.datasets import load_iris \nfrom sklearn.model_selection import train_test_split \n  \n#import dataset \ndata = load_iris() \n  \n#divide the data into independent and dependent variables \nX = data.data \ny = data.target \n  \n# Split the data into training and test set \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) \n  \n#Define the model \nmodel = RandomForestClassifier(n_estimators=100) \n  \n#Train the model \nmodel.fit(X_train, y_train) \n  \n# Test the model \nmodel.score(X_test, y_test)\n```"
    },
    {
        "instruction": "Write a Python program to classify the given words as valid or invalid.",
        "output": "word_list = [\"code\", \"data\", \"text\", \"test\"]\n\ndef classify_words(word_list):\n    valid_words = []\n    invalid_words = []\n    for word in word_list:\n        if len(word) >= 4:\n            valid_words.append(word)\n        else:\n            invalid_words.append(word)\n    return valid_words, invalid_words\n\nvalid_words, invalid_words = classify_words(word_list)\n\nprint(\"Valid Words:\", valid_words)\nprint(\"Invalid Words:\", invalid_words)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to classify the given words as valid or invalid.\n\n### Solution:\n```\nword_list = [\"code\", \"data\", \"text\", \"test\"]\n\ndef classify_words(word_list):\n    valid_words = []\n    invalid_words = []\n    for word in word_list:\n        if len(word) >= 4:\n            valid_words.append(word)\n        else:\n            invalid_words.append(word)\n    return valid_words, invalid_words\n\nvalid_words, invalid_words = classify_words(word_list)\n\nprint(\"Valid Words:\", valid_words)\nprint(\"Invalid Words:\", invalid_words)\n```"
    },
    {
        "instruction": "Design a program in Python which generates a random mathematical equation with two numbers.",
        "output": "import random\n\ndef generateRandomEquation():\n    num1 = random.randint(0,9)\n    num2 = random.randint(0,9)\n    op = random.choice(['+','-','*','/'])\n    equation = str(num1) + op + str(num2)\n    return equation\n\nprint(generateRandomEquation())",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a program in Python which generates a random mathematical equation with two numbers.\n\n### Solution:\n```\nimport random\n\ndef generateRandomEquation():\n    num1 = random.randint(0,9)\n    num2 = random.randint(0,9)\n    op = random.choice(['+','-','*','/'])\n    equation = str(num1) + op + str(num2)\n    return equation\n\nprint(generateRandomEquation())\n```"
    },
    {
        "instruction": "Create a GPU-accelerated algorithm in Python that performs matrix multiplication.",
        "output": "import torch\n\ndef matrix_multiplication(A, B):\n    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n    A = torch.tensor(A).to(device)\n    B = torch.tensor(B).to(device)\n    return torch.matmul(A, B).cpu().numpy()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a GPU-accelerated algorithm in Python that performs matrix multiplication.\n\n### Solution:\n```\nimport torch\n\ndef matrix_multiplication(A, B):\n    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n    A = torch.tensor(A).to(device)\n    B = torch.tensor(B).to(device)\n    return torch.matmul(A, B).cpu().numpy()\n```"
    },
    {
        "instruction": "Construct a Python program that takes a list of words and checks if the list is in alphabetical order.",
        "output": "def check_if_list_is_in_alphabetical_order(words_list):\n    for i in range(len(words_list)-1):\n        if words_list[i] > words_list[i+1]:\n            return False\n    return True\n \nwords_list = ['cat', 'dog', 'hippo', 'horse']\nresult = check_if_list_is_in_alphabetical_order(words_list)\nprint (result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConstruct a Python program that takes a list of words and checks if the list is in alphabetical order.\n\n### Solution:\n```\ndef check_if_list_is_in_alphabetical_order(words_list):\n    for i in range(len(words_list)-1):\n        if words_list[i] > words_list[i+1]:\n            return False\n    return True\n \nwords_list = ['cat', 'dog', 'hippo', 'horse']\nresult = check_if_list_is_in_alphabetical_order(words_list)\nprint (result)\n```"
    },
    {
        "instruction": "Write a python program to find the Longest Common Subsequence (LCS) of two sequences",
        "output": "def lcs(X, Y, m, n): \n    if m == 0 or n == 0: \n        return 0; \n    elif X[m-1] == Y[n-1]: \n        return 1 + lcs(X, Y, m-1, n-1); \n    else: \n        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n)); \n  \n# Function to find the Longest Common Subsequence (LCS)\nX = \"MZJAWXU\"\nY = \"XMJYAUX\"\nm = len(X) \nn = len(Y) \nprint(\"Length of Longest Common Subsequence is\", lcs(X, Y, m, n))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a python program to find the Longest Common Subsequence (LCS) of two sequences\n\n### Solution:\n```\ndef lcs(X, Y, m, n): \n    if m == 0 or n == 0: \n        return 0; \n    elif X[m-1] == Y[n-1]: \n        return 1 + lcs(X, Y, m-1, n-1); \n    else: \n        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n)); \n  \n# Function to find the Longest Common Subsequence (LCS)\nX = \"MZJAWXU\"\nY = \"XMJYAUX\"\nm = len(X) \nn = len(Y) \nprint(\"Length of Longest Common Subsequence is\", lcs(X, Y, m, n))\n```"
    },
    {
        "instruction": "Find the most frequent element in a python list?",
        "output": "def find_most_frequent(lst):\n    max_count = 0\n    most_frequent = None\n    count_dict = {}\n    for elem in lst:\n        if elem not in count_dict:\n            count_dict[elem] = 1\n        else:\n            count_dict[elem] += 1\n            \n        if count_dict[elem] > max_count:\n            most_frequent = elem\n            max_count = count_dict[elem]\n            \n    return most_frequent, max_count",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nFind the most frequent element in a python list?\n\n### Solution:\n```\ndef find_most_frequent(lst):\n    max_count = 0\n    most_frequent = None\n    count_dict = {}\n    for elem in lst:\n        if elem not in count_dict:\n            count_dict[elem] = 1\n        else:\n            count_dict[elem] += 1\n            \n        if count_dict[elem] > max_count:\n            most_frequent = elem\n            max_count = count_dict[elem]\n            \n    return most_frequent, max_count\n```"
    },
    {
        "instruction": "Develop a Python script to generate a Fibonacci series",
        "output": "def fibonacci(n):\n    a = 0\n    b = 1\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2,n):\n            c = a + b\n            a = b\n            b = c\n        return b",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop a Python script to generate a Fibonacci series\n\n### Solution:\n```\ndef fibonacci(n):\n    a = 0\n    b = 1\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2,n):\n            c = a + b\n            a = b\n            b = c\n        return b\n```"
    },
    {
        "instruction": "Edit the following Python code to optimize the performance of a function that takes a list of numbers as input and prints the maximum and minimum values.",
        "output": "def print_min_max(numbers):\n max_num = min_num = numbers[0]\n for n in numbers[1:]:\n     max_num = max(max_num, n)\n     min_num = min(min_num, n)\n print(\"Max: {0}, Min: {1}\".format(max_num, min_num))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nEdit the following Python code to optimize the performance of a function that takes a list of numbers as input and prints the maximum and minimum values.\n\n### Solution:\n```\ndef print_min_max(numbers):\n max_num = min_num = numbers[0]\n for n in numbers[1:]:\n     max_num = max(max_num, n)\n     min_num = min(min_num, n)\n print(\"Max: {0}, Min: {1}\".format(max_num, min_num))\n```"
    },
    {
        "instruction": "Write a Python function to calculate the distance between two points given their coordinates.",
        "output": "def Euclidean_distance(coord1, coord2):\n    x1, y1 = coord1\n    x2, y2 = coord2\n\n    return ((x2-x1)**2 + (y2-y1)**2)**0.5",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python function to calculate the distance between two points given their coordinates.\n\n### Solution:\n```\ndef Euclidean_distance(coord1, coord2):\n    x1, y1 = coord1\n    x2, y2 = coord2\n\n    return ((x2-x1)**2 + (y2-y1)**2)**0.5\n```"
    },
    {
        "instruction": "Implement a Python function to convert a float to a string with two decimal places.",
        "output": "def float_to_string(number):\n     # Round the number\n    rounded_num = round(number, 2)\n     # Return the number converted to a string\n    return str(rounded_num)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nImplement a Python function to convert a float to a string with two decimal places.\n\n### Solution:\n```\ndef float_to_string(number):\n     # Round the number\n    rounded_num = round(number, 2)\n     # Return the number converted to a string\n    return str(rounded_num)\n```"
    },
    {
        "instruction": "Analyze a given Python script and provide a list of key terms and concepts that appear in the code.",
        "output": "Key Terms and Concepts:\n - Importing: os\n- Loops: for, while\n- Paths: os.walk\n- Opening files: open, with\n- File I/O: reading/writing files\n- Logical operators: endswith\n- Strings: join, read, append",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nAnalyze a given Python script and provide a list of key terms and concepts that appear in the code.\n\n### Solution:\n```\nKey Terms and Concepts:\n - Importing: os\n- Loops: for, while\n- Paths: os.walk\n- Opening files: open, with\n- File I/O: reading/writing files\n- Logical operators: endswith\n- Strings: join, read, append\n```"
    },
    {
        "instruction": "Change the following Python program such that you can pass any number of strings in the function.",
        "output": "def print_strings(*strings):\n    for s in strings:\n        print(s)\n\nprint_strings(\"Hello\", \"World\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nChange the following Python program such that you can pass any number of strings in the function.\n\n### Solution:\n```\ndef print_strings(*strings):\n    for s in strings:\n        print(s)\n\nprint_strings(\"Hello\", \"World\")\n```"
    },
    {
        "instruction": "Generate a program in Python that prints all prime numbers from 1 to 100.",
        "output": "for num in range(2, 101):\n   for i in range(2, num):\n      if (num % i == 0):\n         break\n   else:\n      print(num)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a program in Python that prints all prime numbers from 1 to 100.\n\n### Solution:\n```\nfor num in range(2, 101):\n   for i in range(2, num):\n      if (num % i == 0):\n         break\n   else:\n      print(num)\n```"
    },
    {
        "instruction": "Generate a python program that implements the insertion sort algorithm.",
        "output": "def insertionSort(arr): \n    # Traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key \n\n# Driver code to test above \narr = [12, 11, 13, 5, 6] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (str(arr[i]) +\" \")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a python program that implements the insertion sort algorithm.\n\n### Solution:\n```\ndef insertionSort(arr): \n    # Traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key \n\n# Driver code to test above \narr = [12, 11, 13, 5, 6] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (str(arr[i]) +\" \")\n```"
    },
    {
        "instruction": "Write a Python program to generate a fibonacci series until the total count reaches 50.",
        "output": "def fibonacci_series(num) : \n    num1, num2 = 0, 1\n    count = 0\n    while count < num : \n        print(num1) \n        nth = num1 + num2 \n        num1 = num2 \n        num2 = nth \n        count += 1\n\n# fibonacci series until count reaches 50 \nfibonacci_series(50)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to generate a fibonacci series until the total count reaches 50.\n\n### Solution:\n```\ndef fibonacci_series(num) : \n    num1, num2 = 0, 1\n    count = 0\n    while count < num : \n        print(num1) \n        nth = num1 + num2 \n        num1 = num2 \n        num2 = nth \n        count += 1\n\n# fibonacci series until count reaches 50 \nfibonacci_series(50)\n```"
    },
    {
        "instruction": "Write a Python program to construct a spam filter using Naïve Bayes.",
        "output": "from sklearn.naive_bayes import MultinomialNB\nimport pandas as pd\n\n# Read the data into a dataframe\ndf = pd.read_csv('spam.csv', header=None)\n\n#Split data into features and target\nX = df[df.columns[:-1]]\ny = df[df.columns[-1]]\n\n# Create a multinomial naive bayes classifier\nmodel = MultinomialNB()\n\n#Train the model\nmodel.fit(X,y)\n\n# Use the trained model to predict the class for the new data\npredicted_classes = model.predict(X)\n\n# Calculate the accuracy of the model\nprint(\"Accuracy:\", model.score(X,y))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to construct a spam filter using Naïve Bayes.\n\n### Solution:\n```\nfrom sklearn.naive_bayes import MultinomialNB\nimport pandas as pd\n\n# Read the data into a dataframe\ndf = pd.read_csv('spam.csv', header=None)\n\n#Split data into features and target\nX = df[df.columns[:-1]]\ny = df[df.columns[-1]]\n\n# Create a multinomial naive bayes classifier\nmodel = MultinomialNB()\n\n#Train the model\nmodel.fit(X,y)\n\n# Use the trained model to predict the class for the new data\npredicted_classes = model.predict(X)\n\n# Calculate the accuracy of the model\nprint(\"Accuracy:\", model.score(X,y))\n```"
    },
    {
        "instruction": "Implement a function in Python to remove all instances of an item from a list.",
        "output": "def remove_item(list, item):\n    while item in list:\n        list.remove(item)\n    return list\n\nresult = remove_item([1, 2, 1, 3, 4, 1], 1)\nprint(result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nImplement a function in Python to remove all instances of an item from a list.\n\n### Solution:\n```\ndef remove_item(list, item):\n    while item in list:\n        list.remove(item)\n    return list\n\nresult = remove_item([1, 2, 1, 3, 4, 1], 1)\nprint(result)\n```"
    },
    {
        "instruction": "Construct an algorithm in Python to find the deepest node in a binary tree.",
        "output": "def find_deepest_node(root):\n    if root is None: \n        return \n    queue = [] \n    queue.append(root) \n  \n    deepest_node = None\n    while queue:\n        node = queue.pop(0)\n        deepest_node = node \n  \n        if node.left: \n            queue.append(node.left)\n        if node.right: \n            queue.append(node.right)\n    return deepest_node",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConstruct an algorithm in Python to find the deepest node in a binary tree.\n\n### Solution:\n```\ndef find_deepest_node(root):\n    if root is None: \n        return \n    queue = [] \n    queue.append(root) \n  \n    deepest_node = None\n    while queue:\n        node = queue.pop(0)\n        deepest_node = node \n  \n        if node.left: \n            queue.append(node.left)\n        if node.right: \n            queue.append(node.right)\n    return deepest_node\n```"
    },
    {
        "instruction": "Create a Python function that takes two inputs, a list of integers and an integer n,and returns a new list of all the integers in the first list that are larger than n.",
        "output": "def greater_than_n(nums, n):\n return [num for num in nums if num > n]\n\ngreater_than_n([3,4,5,6,7], 5)\n# Returns [6,7]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python function that takes two inputs, a list of integers and an integer n,and returns a new list of all the integers in the first list that are larger than n.\n\n### Solution:\n```\ndef greater_than_n(nums, n):\n return [num for num in nums if num > n]\n\ngreater_than_n([3,4,5,6,7], 5)\n# Returns [6,7]\n```"
    },
    {
        "instruction": "Generate a Python script to detect the most frequent word in a sentence.",
        "output": "def most_frequent_word(s): \n    words = s.split() \n    freq_word = words[0] \n    freq_count = 1 \n      \n    for i in range(1, len(words)): \n        if words[i] == freq_word: \n            freq_count += 1\n        else: \n            if freq_count > 1: \n                freq_word = words[i] \n                freq_count = 1\n      \n    return freq_word",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python script to detect the most frequent word in a sentence.\n\n### Solution:\n```\ndef most_frequent_word(s): \n    words = s.split() \n    freq_word = words[0] \n    freq_count = 1 \n      \n    for i in range(1, len(words)): \n        if words[i] == freq_word: \n            freq_count += 1\n        else: \n            if freq_count > 1: \n                freq_word = words[i] \n                freq_count = 1\n      \n    return freq_word\n```"
    },
    {
        "instruction": "Create a function in Python to sort the elements of a list in ascending order.",
        "output": "def sort_asc(lst):\n    lst.sort()\n    return lst",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a function in Python to sort the elements of a list in ascending order.\n\n### Solution:\n```\ndef sort_asc(lst):\n    lst.sort()\n    return lst\n```"
    },
    {
        "instruction": "Develop an algorithm in Python for parsing a given text and counting the number of occurrences of a given word.",
        "output": "def parse_text(text, word):\n  word_count = 0\n  words = text.split()\n  for w in words:\n    if w == word:\n      word_count += 1\n  return word_count\n  \ntext = 'This is an example text.'\nword = 'example'\nword_count = parse_text(text, word)\nprint('The word \"{}\" appears {} times in the text.'.format(word, word_count))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop an algorithm in Python for parsing a given text and counting the number of occurrences of a given word.\n\n### Solution:\n```\ndef parse_text(text, word):\n  word_count = 0\n  words = text.split()\n  for w in words:\n    if w == word:\n      word_count += 1\n  return word_count\n  \ntext = 'This is an example text.'\nword = 'example'\nword_count = parse_text(text, word)\nprint('The word \"{}\" appears {} times in the text.'.format(word, word_count))\n```"
    },
    {
        "instruction": "Write an algorithm to implement a bubble sort in Python.",
        "output": "def bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [4, 2, 9, 12, 3, 5, 7] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite an algorithm to implement a bubble sort in Python.\n\n### Solution:\n```\ndef bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [4, 2, 9, 12, 3, 5, 7] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\n```"
    },
    {
        "instruction": "Write a function in Python to find the number of prime numbers up to a given number.",
        "output": "def countPrimes(num): \n    if num <= 1:  \n        return 0\n \n    primes = [2] \n    x = 3\n    \n    while x <= num: \n        for y in primes: \n            if x % y == 0: \n                x += 2\n                continue\n        primes.append(x) \n        x += 2\n    \n    return len(primes) \n\nnum_primes = countPrimes(100)\nprint(\"Number of primes between 1 and 100:\", num_primes)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a function in Python to find the number of prime numbers up to a given number.\n\n### Solution:\n```\ndef countPrimes(num): \n    if num <= 1:  \n        return 0\n \n    primes = [2] \n    x = 3\n    \n    while x <= num: \n        for y in primes: \n            if x % y == 0: \n                x += 2\n                continue\n        primes.append(x) \n        x += 2\n    \n    return len(primes) \n\nnum_primes = countPrimes(100)\nprint(\"Number of primes between 1 and 100:\", num_primes)\n```"
    },
    {
        "instruction": "Write a Python program to search a list of strings for a given string.",
        "output": "list = [\"dog\", \"cat\", \"bird\"]\ntarget = \"bird\"\n\nfor element in list:\n    if element == target:\n        print(\"Target string found: {}\".format(target))\n        break",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to search a list of strings for a given string.\n\n### Solution:\n```\nlist = [\"dog\", \"cat\", \"bird\"]\ntarget = \"bird\"\n\nfor element in list:\n    if element == target:\n        print(\"Target string found: {}\".format(target))\n        break\n```"
    },
    {
        "instruction": "Write a simple Python function that takes a list of integers and returns the sum of all elements divisible by 3.",
        "output": "def divisibleBy3(li):\n total = 0\n for num in li:\n  if num % 3 == 0:\n   total += num\n return total\n# Output: 24",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a simple Python function that takes a list of integers and returns the sum of all elements divisible by 3.\n\n### Solution:\n```\ndef divisibleBy3(li):\n total = 0\n for num in li:\n  if num % 3 == 0:\n   total += num\n return total\n# Output: 24\n```"
    },
    {
        "instruction": "Generate a stack class in Python",
        "output": "class Stack(object):\n\n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[len(self.items)-1]\n\n    def size(self):\n        return len(self.items)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a stack class in Python\n\n### Solution:\n```\nclass Stack(object):\n\n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[len(self.items)-1]\n\n    def size(self):\n        return len(self.items)\n```"
    },
    {
        "instruction": "Create a program in Python that takes in a sentence from the user, and reverse the sentence.",
        "output": "def reverseSentence(sentence): \n    words = sentence.split(' ') \n  \n    newWords = [word[::-1] for word in words] \n      \n    newSentence = ' '.join(newWords) \n      \n    return newSentence \n  \nsentence = input(\"Enter a sentence: \")\nprint(reverseSentence(sentence))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a program in Python that takes in a sentence from the user, and reverse the sentence.\n\n### Solution:\n```\ndef reverseSentence(sentence): \n    words = sentence.split(' ') \n  \n    newWords = [word[::-1] for word in words] \n      \n    newSentence = ' '.join(newWords) \n      \n    return newSentence \n  \nsentence = input(\"Enter a sentence: \")\nprint(reverseSentence(sentence))\n```"
    },
    {
        "instruction": "Write a python program to evaluate the Euclidean distance between two lists of numbers",
        "output": "def euclidean_distance(list1, list2): \n    dist = 0.0\n    for i in range(len(list1)): \n        dist += (list1[i] - list2[i]) ** 2 \n    return (dist ** 0.5) \n  \nlist1 = [1, 2, 3] \nlist2 = [4, 5, 6] \n\nprint(\"Euclidean distance between lists:\")\nprint(euclidean_distance(list1, list2))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a python program to evaluate the Euclidean distance between two lists of numbers\n\n### Solution:\n```\ndef euclidean_distance(list1, list2): \n    dist = 0.0\n    for i in range(len(list1)): \n        dist += (list1[i] - list2[i]) ** 2 \n    return (dist ** 0.5) \n  \nlist1 = [1, 2, 3] \nlist2 = [4, 5, 6] \n\nprint(\"Euclidean distance between lists:\")\nprint(euclidean_distance(list1, list2))\n```"
    },
    {
        "instruction": "Optimize a Python program for space efficiency. The program should take input from the command line, and should determine whether a given three-digit number is an Armstrong number or not.",
        "output": "import math  \n  \ndef ArmstrongNumber(num): \n  sum = 0 \n  temp_num = num \n  digits_count = 0 \n  \n  while temp_num>0: \n    digits_count += 1  \n    temp_num = math.floor(temp_num/10)  \n  \n  digits_sum = 0 \n    \n  while num > 0:  \n    r = num % 10  \n    sum += math.pow(r, digits_count)  \n    num = math.floor(num/10)  \n      \n  if sum == temp_num: \n    print (f'{temp_num} is an Armstrong number') \n  else: \n    print (f'{temp_num} is not an Armstrong number ')  \n  \nnum = int(input(\"Enter a number: \"))\nArmstrongNumber(num)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nOptimize a Python program for space efficiency. The program should take input from the command line, and should determine whether a given three-digit number is an Armstrong number or not.\n\n### Solution:\n```\nimport math  \n  \ndef ArmstrongNumber(num): \n  sum = 0 \n  temp_num = num \n  digits_count = 0 \n  \n  while temp_num>0: \n    digits_count += 1  \n    temp_num = math.floor(temp_num/10)  \n  \n  digits_sum = 0 \n    \n  while num > 0:  \n    r = num % 10  \n    sum += math.pow(r, digits_count)  \n    num = math.floor(num/10)  \n      \n  if sum == temp_num: \n    print (f'{temp_num} is an Armstrong number') \n  else: \n    print (f'{temp_num} is not an Armstrong number ')  \n  \nnum = int(input(\"Enter a number: \"))\nArmstrongNumber(num)\n```"
    },
    {
        "instruction": "Generate a Python program to compare two given strings to check if they are identical or not.",
        "output": "def is_identical(str1, str2): \n    if str1 == str2: \n        return True\n    else: \n        return False",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python program to compare two given strings to check if they are identical or not.\n\n### Solution:\n```\ndef is_identical(str1, str2): \n    if str1 == str2: \n        return True\n    else: \n        return False\n```"
    },
    {
        "instruction": "Write a Python program to check an array if it contains consecutive integers.",
        "output": "def check_array_for_consecutive(arr):\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] != 1:\n            return False\n    return True\n\narr = [2, 3, 4, 5, 6]\nprint(check_array_for_consecutive(arr))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to check an array if it contains consecutive integers.\n\n### Solution:\n```\ndef check_array_for_consecutive(arr):\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] != 1:\n            return False\n    return True\n\narr = [2, 3, 4, 5, 6]\nprint(check_array_for_consecutive(arr))\n```"
    },
    {
        "instruction": "Write a python program to round a float value to the next decimal place.",
        "output": "def round_up(value):\n    \"\"\"Rounds up a number to the next decimal.\"\"\"\n    return int(value * 10) / 10",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a python program to round a float value to the next decimal place.\n\n### Solution:\n```\ndef round_up(value):\n    \"\"\"Rounds up a number to the next decimal.\"\"\"\n    return int(value * 10) / 10\n```"
    },
    {
        "instruction": "Create a python program to remove odd numbers from a list of numbers.",
        "output": "def remove_odd_numbers(arr):\n    result = [i for i in arr if i % 2 == 0]\n    return result",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a python program to remove odd numbers from a list of numbers.\n\n### Solution:\n```\ndef remove_odd_numbers(arr):\n    result = [i for i in arr if i % 2 == 0]\n    return result\n```"
    },
    {
        "instruction": "Design a class for a generic linked list in Python.",
        "output": "class LinkedList:\n    \n    def __init__(self):\n        self.head = None\n        self.tail = None\n    \n    def append(self, data):\n        node = Node(data)\n        if self.tail is not None:\n            self.tail.next = node\n            self.tail = node\n        else:\n            self.head = node\n            self.tail = node\n    \n    def sort(self):\n        if self.head is None:\n            return\n        current_node = self.head\n        while current_node.next is not None:\n            next_node = current_node.next\n            if next_node.data < current_node.data:\n                temp = current_node.data\n                current_node.data = next_node.data\n                next_node.data = temp\n            current_node = next_node",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a class for a generic linked list in Python.\n\n### Solution:\n```\nclass LinkedList:\n    \n    def __init__(self):\n        self.head = None\n        self.tail = None\n    \n    def append(self, data):\n        node = Node(data)\n        if self.tail is not None:\n            self.tail.next = node\n            self.tail = node\n        else:\n            self.head = node\n            self.tail = node\n    \n    def sort(self):\n        if self.head is None:\n            return\n        current_node = self.head\n        while current_node.next is not None:\n            next_node = current_node.next\n            if next_node.data < current_node.data:\n                temp = current_node.data\n                current_node.data = next_node.data\n                next_node.data = temp\n            current_node = next_node\n```"
    },
    {
        "instruction": "Generate code to encrypt a message using the AES algorithm in Python.",
        "output": "from Crypto.Cipher import AES\n\nkey = b'0123456789ABCDEF'\n\ndef encryptAES(message):\n cipher = AES.new(key, AES.MODE_ECB)\n ciphertext = cipher.encrypt(message)\n return ciphertext\n \nmessage = b'Encrypt this message'\nencrypted_message = encryptAES(message)\nprint(encrypted_message)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate code to encrypt a message using the AES algorithm in Python.\n\n### Solution:\n```\nfrom Crypto.Cipher import AES\n\nkey = b'0123456789ABCDEF'\n\ndef encryptAES(message):\n cipher = AES.new(key, AES.MODE_ECB)\n ciphertext = cipher.encrypt(message)\n return ciphertext\n \nmessage = b'Encrypt this message'\nencrypted_message = encryptAES(message)\nprint(encrypted_message)\n```"
    },
    {
        "instruction": "Create a program to search for a substring in a string and return the starting position of the substring.",
        "output": "string = \"Python is powerful & fun\"\nsubstring = \"pow\"\n \nstart_pos = string.find(substring)\nif start_pos == -1:\n    print(\"substring not found\")\nelse:\n    print(\"substring found at position:\", start_pos)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a program to search for a substring in a string and return the starting position of the substring.\n\n### Solution:\n```\nstring = \"Python is powerful & fun\"\nsubstring = \"pow\"\n \nstart_pos = string.find(substring)\nif start_pos == -1:\n    print(\"substring not found\")\nelse:\n    print(\"substring found at position:\", start_pos)\n```"
    },
    {
        "instruction": "Create a Python class to store multiple objects in a dictionary?",
        "output": "class MultiObjectDict(object):\n    def __init__(self):\n        self.data = {}\n\n    def add(self, key, value):\n        try:\n            self.data[key].append(value)\n        except KeyError:\n            self.data[key] = [value]\n\n    def get(self, key):\n        return self.data.get(key, None)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python class to store multiple objects in a dictionary?\n\n### Solution:\n```\nclass MultiObjectDict(object):\n    def __init__(self):\n        self.data = {}\n\n    def add(self, key, value):\n        try:\n            self.data[key].append(value)\n        except KeyError:\n            self.data[key] = [value]\n\n    def get(self, key):\n        return self.data.get(key, None)\n```"
    },
    {
        "instruction": "Generate a class in Python that takes three parameters: name, age, and gender.",
        "output": "class Person:\n  def __init__(self, name, age, gender):\n    self.name = name\n    self.age = age\n    self.gender = gender\n    \n    def display_person(self):\n      print(\"Name: \" + self.name + \"\\nAge: \" + str(self.age) + \"\\nGender: \" + self.gender)\n\nperson = Person(\"John\", 28, \"Male\")\nperson.display_person()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a class in Python that takes three parameters: name, age, and gender.\n\n### Solution:\n```\nclass Person:\n  def __init__(self, name, age, gender):\n    self.name = name\n    self.age = age\n    self.gender = gender\n    \n    def display_person(self):\n      print(\"Name: \" + self.name + \"\\nAge: \" + str(self.age) + \"\\nGender: \" + self.gender)\n\nperson = Person(\"John\", 28, \"Male\")\nperson.display_person()\n```"
    },
    {
        "instruction": "Create a Python program that takes a two dimensional array of integers and calculates the sum of each row and each column of the array.",
        "output": "def calculateSum(arr):\n sums = [0] * len(arr[0])\n for r in arr:\n  for i in range(len(r)):\n   sums[i] += r[i]\n return sums\n\ndef getRowsSum(arr):\n rowSums = []\n for r in arr:\n  rowSums.append(sum(r))\n return rowSums\n\narr = [[2, 3, 5], \n [5, 7, 1], \n [4, 6, 9]]\n\ncolumnSums = calculateSum(arr)\nrowSums = getRowsSum(arr)\n\nprint(\"Row sums:\", rowSums)\nprint(\"Column sums:\", columnSums)\n\n# Output: Row sums: [10, 13, 15] Column sums: [11, 16, 15]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program that takes a two dimensional array of integers and calculates the sum of each row and each column of the array.\n\n### Solution:\n```\ndef calculateSum(arr):\n sums = [0] * len(arr[0])\n for r in arr:\n  for i in range(len(r)):\n   sums[i] += r[i]\n return sums\n\ndef getRowsSum(arr):\n rowSums = []\n for r in arr:\n  rowSums.append(sum(r))\n return rowSums\n\narr = [[2, 3, 5], \n [5, 7, 1], \n [4, 6, 9]]\n\ncolumnSums = calculateSum(arr)\nrowSums = getRowsSum(arr)\n\nprint(\"Row sums:\", rowSums)\nprint(\"Column sums:\", columnSums)\n\n# Output: Row sums: [10, 13, 15] Column sums: [11, 16, 15]\n```"
    },
    {
        "instruction": "In Python, write a function to format a given address into a human-readable form.",
        "output": "def format_address(address):\n    address_items = address.split(',')\n    street = address_items[0]\n    city_state = address_items[1].split()\n    city = city_state[0]\n    state = city_state[1]\n    formatted_address = street + ', ' + city + ', ' + state\n\n    return formatted_address\n\naddress = '60 Fifth Avenue, New York'\nformatted_address = format_address(address)\nprint(formatted_address)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nIn Python, write a function to format a given address into a human-readable form.\n\n### Solution:\n```\ndef format_address(address):\n    address_items = address.split(',')\n    street = address_items[0]\n    city_state = address_items[1].split()\n    city = city_state[0]\n    state = city_state[1]\n    formatted_address = street + ', ' + city + ', ' + state\n\n    return formatted_address\n\naddress = '60 Fifth Avenue, New York'\nformatted_address = format_address(address)\nprint(formatted_address)\n```"
    },
    {
        "instruction": "Generate a Python class that stores the details of customer orders.",
        "output": "class Order:\n def __init__(self, customer_name, customer_address, order_items):\n self.customer_name = customer_name \n self.customer_address = customer_address\n self.order_items = order_items\n \n def get_order_details(self):\n return f\"Customer name: {self.customer_name}, Address: {self.customer_address}, Order items: {self.order_items}\"",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python class that stores the details of customer orders.\n\n### Solution:\n```\nclass Order:\n def __init__(self, customer_name, customer_address, order_items):\n self.customer_name = customer_name \n self.customer_address = customer_address\n self.order_items = order_items\n \n def get_order_details(self):\n return f\"Customer name: {self.customer_name}, Address: {self.customer_address}, Order items: {self.order_items}\"\n```"
    },
    {
        "instruction": "Write a Python function that takes a rectangular array and prints it in rotated form (90° degree anticlockwise rotation)",
        "output": "def rotate_rectangle(rectangle):\n    n = len(rectangle)\n    for i in range(n):\n        for j in range(i + 1, n):\n           rectangle[i][j], rectangle[j][i] = rectangle[j][i], rectangle[i][j]\n\n    for row in rectangle:\n        row.reverse()\n\n    return rectangle\n\nrectangle = [\n    [1,2,3],\n    [4,5,6],\n    [7,8,9]\n] \nresult = rotate_rectangle(rectangle)\nprint(result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python function that takes a rectangular array and prints it in rotated form (90° degree anticlockwise rotation)\n\n### Solution:\n```\ndef rotate_rectangle(rectangle):\n    n = len(rectangle)\n    for i in range(n):\n        for j in range(i + 1, n):\n           rectangle[i][j], rectangle[j][i] = rectangle[j][i], rectangle[i][j]\n\n    for row in rectangle:\n        row.reverse()\n\n    return rectangle\n\nrectangle = [\n    [1,2,3],\n    [4,5,6],\n    [7,8,9]\n] \nresult = rotate_rectangle(rectangle)\nprint(result)\n```"
    },
    {
        "instruction": "Publish an article to Medium using the Medium Python SDK.",
        "output": "import medium\n\n# Create a client\nclient = medium.Client(\n  application_id=\"YourApplicationID\",\n  application_secret=\"YourApplicationSecret\",\n)\n\n# Log in to your account\nclient.access_token = \"<YourAccessToken>\"\n\n# Create a post to publish\npost = medium.Post(\n  title=\"Article Title\",\n  content=\"This is the article content that will be published on Medium.\",\n  content_format=\"html\",\n  tags=[\"Python\", \"Medium\"],\n  canonical_url=\"\",\n  publish_status=\"draft\",\n)\n\n# Publish the post\npublished_post = client.create_post(post, author_id=\"<YourAuthorID>\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nPublish an article to Medium using the Medium Python SDK.\n\n### Solution:\n```\nimport medium\n\n# Create a client\nclient = medium.Client(\n  application_id=\"YourApplicationID\",\n  application_secret=\"YourApplicationSecret\",\n)\n\n# Log in to your account\nclient.access_token = \"<YourAccessToken>\"\n\n# Create a post to publish\npost = medium.Post(\n  title=\"Article Title\",\n  content=\"This is the article content that will be published on Medium.\",\n  content_format=\"html\",\n  tags=[\"Python\", \"Medium\"],\n  canonical_url=\"\",\n  publish_status=\"draft\",\n)\n\n# Publish the post\npublished_post = client.create_post(post, author_id=\"<YourAuthorID>\")\n```"
    },
    {
        "instruction": "Generate a list of strings in Python containing all possible combinations of letters \"a\" and \"b\", with the length of each string being 5.",
        "output": "import itertools\n\nwords = [''.join(i) for i in itertools.product('ab', repeat = 5)]\nprint(words)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a list of strings in Python containing all possible combinations of letters \"a\" and \"b\", with the length of each string being 5.\n\n### Solution:\n```\nimport itertools\n\nwords = [''.join(i) for i in itertools.product('ab', repeat = 5)]\nprint(words)\n```"
    },
    {
        "instruction": "Write a Python code snippet to reverse the order of words in a sentence.",
        "output": "def reverseWords(sentence):\n  words = sentence.split()\n  words.reverse()\n  newSentence = ' '.join(words)\n  print(newSentence)\nreverseWords(\"Hello, World!\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python code snippet to reverse the order of words in a sentence.\n\n### Solution:\n```\ndef reverseWords(sentence):\n  words = sentence.split()\n  words.reverse()\n  newSentence = ' '.join(words)\n  print(newSentence)\nreverseWords(\"Hello, World!\")\n```"
    },
    {
        "instruction": "Using a dictionary, write a program in Python to categorize each list item into a group of the same type.",
        "output": "def categorize(items):\n    groups = {\n        'numbers': [],\n        'strings': []\n    }\n    for item in items:\n        if type(item) == int or type(item) == float:\n            groups['numbers'].append(item)\n        else:\n            groups['strings'].append(item)\n    return groups",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nUsing a dictionary, write a program in Python to categorize each list item into a group of the same type.\n\n### Solution:\n```\ndef categorize(items):\n    groups = {\n        'numbers': [],\n        'strings': []\n    }\n    for item in items:\n        if type(item) == int or type(item) == float:\n            groups['numbers'].append(item)\n        else:\n            groups['strings'].append(item)\n    return groups\n```"
    },
    {
        "instruction": "Create a program in Python that computes the area of a circle using Radius.",
        "output": "def get_area(radius): \n    return math.pi*(radius**2)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a program in Python that computes the area of a circle using Radius.\n\n### Solution:\n```\ndef get_area(radius): \n    return math.pi*(radius**2)\n```"
    },
    {
        "instruction": "Correct the syntax error in the below Python code.",
        "output": "def fibonacci_sequence(max): \n    nums = [] \n    current, nxt = 0, 1\n    while current < max: \n        current, nxt = nxt, nxt+current\n        nums.append(current)\n    \n    return nums",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCorrect the syntax error in the below Python code.\n\n### Solution:\n```\ndef fibonacci_sequence(max): \n    nums = [] \n    current, nxt = 0, 1\n    while current < max: \n        current, nxt = nxt, nxt+current\n        nums.append(current)\n    \n    return nums\n```"
    },
    {
        "instruction": "Generate an algorithm in Python to classify an email as spam or not spam.",
        "output": "def classify_email(email):\n    spam_words = ['spam', 'scam', 'unsubscribe', 'refund', 'free', 'win']\n\n    # Check if email contains any words that indicate a spam email\n    for word in spam_words:\n        if word in email:\n            return 'spam'\n\n    # If no words were found, return 'not spam' \n    return 'not spam'",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate an algorithm in Python to classify an email as spam or not spam.\n\n### Solution:\n```\ndef classify_email(email):\n    spam_words = ['spam', 'scam', 'unsubscribe', 'refund', 'free', 'win']\n\n    # Check if email contains any words that indicate a spam email\n    for word in spam_words:\n        if word in email:\n            return 'spam'\n\n    # If no words were found, return 'not spam' \n    return 'not spam'\n```"
    },
    {
        "instruction": "Optimize a Python program using multiprocessing.",
        "output": "from multiprocessing import Pool\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime_numbers(n):\n    primes = []\n    with Pool(processes=4) as pool:\n        primes = list(pool.map(is_prime, range(2, n)))\n    return primes",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nOptimize a Python program using multiprocessing.\n\n### Solution:\n```\nfrom multiprocessing import Pool\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime_numbers(n):\n    primes = []\n    with Pool(processes=4) as pool:\n        primes = list(pool.map(is_prime, range(2, n)))\n    return primes\n```"
    },
    {
        "instruction": "Given a Python dictionary, write a function that prints out the key-value pairs in alphabetical order.",
        "output": "def print_dict_alphabetically(dictionary):\n    sorted_keys = sorted(dictionary.keys())\n    for key in sorted_keys:\n        print(f\"{key}: {dictionary[key]}\")\n\nprint_dict_alphabetically({\n 'Mark': '68',\n 'Carol': '35',\n 'John': '42'\n})",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGiven a Python dictionary, write a function that prints out the key-value pairs in alphabetical order.\n\n### Solution:\n```\ndef print_dict_alphabetically(dictionary):\n    sorted_keys = sorted(dictionary.keys())\n    for key in sorted_keys:\n        print(f\"{key}: {dictionary[key]}\")\n\nprint_dict_alphabetically({\n 'Mark': '68',\n 'Carol': '35',\n 'John': '42'\n})\n```"
    },
    {
        "instruction": "Generate a python program to create a matrix of n rows and m columns.",
        "output": "def create_matrix(n, m):\n    matrix = [[0 for _ in range(m)] for _ in range(n)]\n    return matrix",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a python program to create a matrix of n rows and m columns.\n\n### Solution:\n```\ndef create_matrix(n, m):\n    matrix = [[0 for _ in range(m)] for _ in range(n)]\n    return matrix\n```"
    },
    {
        "instruction": "Generate a Python program to reverse the order of every letter in a sentence.",
        "output": "def reverseLetterOrder(string):\n reversed = ''\n\n for char in string:\n  reversed = char + reversed\n\n return reversed\n\nprint(reverseLetterOrder('The quick brown fox jumps over the lazy dog')) # returns \"god yzal eht revo spmuj xof nworb kciuq ehT\"",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python program to reverse the order of every letter in a sentence.\n\n### Solution:\n```\ndef reverseLetterOrder(string):\n reversed = ''\n\n for char in string:\n  reversed = char + reversed\n\n return reversed\n\nprint(reverseLetterOrder('The quick brown fox jumps over the lazy dog')) # returns \"god yzal eht revo spmuj xof nworb kciuq ehT\"\n```"
    },
    {
        "instruction": "Create a web scraper in Python that scrapes the website \"example.com\" and prints out the content of all the h1 tags.",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\nresponse = requests.get('https://example.com/')\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nfor h1 in soup.find_all('h1'):\n print(h1.text)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a web scraper in Python that scrapes the website \"example.com\" and prints out the content of all the h1 tags.\n\n### Solution:\n```\nimport requests\nfrom bs4 import BeautifulSoup\n\nresponse = requests.get('https://example.com/')\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nfor h1 in soup.find_all('h1'):\n print(h1.text)\n```"
    },
    {
        "instruction": "Develop a recursive program in Python to traverse a given binary tree in-order.",
        "output": "class Node: \n  \n    # Constructor to create a new binary node \n    def __init__(self, data):\n        self.data = data  \n        self.left = None\n        self.right = None\n\ndef inorder(root): \n    if root: \n        # First recur on left child \n        inorder(root.left) \n  \n        # then print the data of node \n        print(root.data)\n  \n        # now recur on right child \n        inorder(root.right) \n  \n\n# Driver program to test the above function \nroot = Node(1) \nroot.left      = Node(2) \nroot.right     = Node(3) \nroot.left.left  = Node(4) \nroot.left.right  = Node(5) \n  \ninorder(root)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop a recursive program in Python to traverse a given binary tree in-order.\n\n### Solution:\n```\nclass Node: \n  \n    # Constructor to create a new binary node \n    def __init__(self, data):\n        self.data = data  \n        self.left = None\n        self.right = None\n\ndef inorder(root): \n    if root: \n        # First recur on left child \n        inorder(root.left) \n  \n        # then print the data of node \n        print(root.data)\n  \n        # now recur on right child \n        inorder(root.right) \n  \n\n# Driver program to test the above function \nroot = Node(1) \nroot.left      = Node(2) \nroot.right     = Node(3) \nroot.left.left  = Node(4) \nroot.left.right  = Node(5) \n  \ninorder(root)\n```"
    },
    {
        "instruction": "Create a sorting algorithm in Python to sort an unsorted set of names.",
        "output": "def sort_names(names):\n    # sorted() returns an alphabetically sorted list\n    return sorted(names)\n\nunsorted_names = [\"John\", \"Jack\", \"Joan\", \"Adam\", \"Elena\", \"Mia\"]\n\nprint(sort_names(unsorted_names)) # ['Adam', 'Elena', 'Jack', 'Joan', 'John', 'Mia']",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a sorting algorithm in Python to sort an unsorted set of names.\n\n### Solution:\n```\ndef sort_names(names):\n    # sorted() returns an alphabetically sorted list\n    return sorted(names)\n\nunsorted_names = [\"John\", \"Jack\", \"Joan\", \"Adam\", \"Elena\", \"Mia\"]\n\nprint(sort_names(unsorted_names)) # ['Adam', 'Elena', 'Jack', 'Joan', 'John', 'Mia']\n```"
    },
    {
        "instruction": "Create a Python script to generate specific figures using matplotlib.",
        "output": "import matplotlib.pyplot as plt\n \n# data\nlabels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August']\nsales = [15, 30, 25, 50, 20, 35, 45, 10]\n \n# create the figure\nfig = plt.figure(figsize=(10, 6))\n \n# plotting the chart\nplt.plot(labels, sales, 'bo-', linewidth=2)\n \n# title and labels\nplt.title('Monthly Sales Results', fontsize=20)\nplt.xlabel('Months', fontsize=16)\nplt.ylabel('Sales (Units)', fontsize=16)\n \n# tick parameters\nplt.xticks(ticks=range(len(labels)), labels=labels, rotation=45, fontsize=12)\nplt.yticks(fontsize=12)\n \n# legend \nplt.legend(['Sales'], loc='upper right')\n \n# grid\nplt.grid(alpha=0.25)\n \n# show\nplt.show()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python script to generate specific figures using matplotlib.\n\n### Solution:\n```\nimport matplotlib.pyplot as plt\n \n# data\nlabels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August']\nsales = [15, 30, 25, 50, 20, 35, 45, 10]\n \n# create the figure\nfig = plt.figure(figsize=(10, 6))\n \n# plotting the chart\nplt.plot(labels, sales, 'bo-', linewidth=2)\n \n# title and labels\nplt.title('Monthly Sales Results', fontsize=20)\nplt.xlabel('Months', fontsize=16)\nplt.ylabel('Sales (Units)', fontsize=16)\n \n# tick parameters\nplt.xticks(ticks=range(len(labels)), labels=labels, rotation=45, fontsize=12)\nplt.yticks(fontsize=12)\n \n# legend \nplt.legend(['Sales'], loc='upper right')\n \n# grid\nplt.grid(alpha=0.25)\n \n# show\nplt.show()\n```"
    },
    {
        "instruction": "Write a Python program to validate the given password according to the given criteria.",
        "output": "def validate_password(password):\n    if len(password) < 8:\n        return False\n    if not any(c.isupper() for c in password):\n        return False\n    if not any(c.isdigit() for c in password):\n        return False\n    return True",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to validate the given password according to the given criteria.\n\n### Solution:\n```\ndef validate_password(password):\n    if len(password) < 8:\n        return False\n    if not any(c.isupper() for c in password):\n        return False\n    if not any(c.isdigit() for c in password):\n        return False\n    return True\n```"
    },
    {
        "instruction": "Develop a program in Python to classify the sentiment of a given sentence.",
        "output": "from textblob import TextBlob\n\ndef sentiment_classifier(sentence):\n  sentiment_score = TextBlob(sentence).sentiment.polarity\n  if sentiment_score > 0:\n    return 'positive'\n  elif sentiment_score < 0:\n    return 'negative'\n  else:\n    return 'neutral'",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop a program in Python to classify the sentiment of a given sentence.\n\n### Solution:\n```\nfrom textblob import TextBlob\n\ndef sentiment_classifier(sentence):\n  sentiment_score = TextBlob(sentence).sentiment.polarity\n  if sentiment_score > 0:\n    return 'positive'\n  elif sentiment_score < 0:\n    return 'negative'\n  else:\n    return 'neutral'\n```"
    },
    {
        "instruction": "Create a function to remove duplicates from an array with Python.",
        "output": "def remove_duplicates(arr): \n    result = [] \n    seen = set() \n   \n    for item in arr: \n        if item not in seen: \n            seen.add(item) \n            result.append(item) \n    return result",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a function to remove duplicates from an array with Python.\n\n### Solution:\n```\ndef remove_duplicates(arr): \n    result = [] \n    seen = set() \n   \n    for item in arr: \n        if item not in seen: \n            seen.add(item) \n            result.append(item) \n    return result\n```"
    },
    {
        "instruction": "Build an abbreviation dictionary in Python.",
        "output": "abbreviations = {\n    'AD': 'advertisement',\n    'ASAP': 'as soon as possible',\n    'ATM': 'automated teller machine',\n    'AV': 'audio-visual',\n    'CEO': 'chief executive officer'\n    # Add more abbreviations and meanings\n}",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nBuild an abbreviation dictionary in Python.\n\n### Solution:\n```\nabbreviations = {\n    'AD': 'advertisement',\n    'ASAP': 'as soon as possible',\n    'ATM': 'automated teller machine',\n    'AV': 'audio-visual',\n    'CEO': 'chief executive officer'\n    # Add more abbreviations and meanings\n}\n```"
    },
    {
        "instruction": "Generate a voltage signal with random noise using a Python script.",
        "output": "import numpy as np \n\nfreq = 250 \namplitude = 1 \n\nt= np.linspace(0, 1, 1000) \nvoltage_signal = np.sin(2*np.pi*freq*t) + np.random.normal(0, 0.1, 1000)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a voltage signal with random noise using a Python script.\n\n### Solution:\n```\nimport numpy as np \n\nfreq = 250 \namplitude = 1 \n\nt= np.linspace(0, 1, 1000) \nvoltage_signal = np.sin(2*np.pi*freq*t) + np.random.normal(0, 0.1, 1000)\n```"
    },
    {
        "instruction": "Using a Python dictionary, create a function that counts the occurrence of each word in a given string.",
        "output": "def count_words(string):\n    \n    #split the string into individual words\n    words = string.split()\n    \n    #create an empty dictionary to store the word counts\n    word_counts = {}\n    \n    #loop through each word in the list\n    for word in words:\n        #if the word is not in the dictionary, add it with a count of 1\n        if word not in word_counts:\n            word_counts[word] = 1\n        #otherwise increment the count for that word\n        else:\n            word_counts[word] += 1\n            \n    #return the dictionary of word counts\n    return word_counts",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nUsing a Python dictionary, create a function that counts the occurrence of each word in a given string.\n\n### Solution:\n```\ndef count_words(string):\n    \n    #split the string into individual words\n    words = string.split()\n    \n    #create an empty dictionary to store the word counts\n    word_counts = {}\n    \n    #loop through each word in the list\n    for word in words:\n        #if the word is not in the dictionary, add it with a count of 1\n        if word not in word_counts:\n            word_counts[word] = 1\n        #otherwise increment the count for that word\n        else:\n            word_counts[word] += 1\n            \n    #return the dictionary of word counts\n    return word_counts\n```"
    },
    {
        "instruction": "Develop a Python program to find the most common word in a sentence",
        "output": "def frequency(sentence):\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    \n    most_common_word, frequency = max(frequency.items(), key=lambda x: x[1])\n    return most_common_word, frequency",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop a Python program to find the most common word in a sentence\n\n### Solution:\n```\ndef frequency(sentence):\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    \n    most_common_word, frequency = max(frequency.items(), key=lambda x: x[1])\n    return most_common_word, frequency\n```"
    },
    {
        "instruction": "Generate a Python program that translates a sentence into pig latin",
        "output": "def pig_latin(sentence):\n  words = sentence.split(' ')\n  result = \"\"\n  for word in words:\n    result += word[1:] + word[0] + \"ay\" + \" \"\n  return result\n\nprint(pig_latin(\"Hello world\"))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python program that translates a sentence into pig latin\n\n### Solution:\n```\ndef pig_latin(sentence):\n  words = sentence.split(' ')\n  result = \"\"\n  for word in words:\n    result += word[1:] + word[0] + \"ay\" + \" \"\n  return result\n\nprint(pig_latin(\"Hello world\"))\n```"
    },
    {
        "instruction": "Define an interface for a data import task in Python.",
        "output": "class DataImportTask:\n\n    def __init__(self, source, destination):\n        self.source = source\n        self.destination = destination\n\n    # Method to download the source file to the file system\n    def download(self):\n        # Implementation here\n\n    # Method to read the content of the source file into a CSV format\n    def read(self):\n        # Implementation here\n\n    # Method to format the content into the destination format\n    def format(self):\n        # Implementation here\n\n    # Method to save the destination in the desired location\n    def save(self):\n        # Implementation here",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDefine an interface for a data import task in Python.\n\n### Solution:\n```\nclass DataImportTask:\n\n    def __init__(self, source, destination):\n        self.source = source\n        self.destination = destination\n\n    # Method to download the source file to the file system\n    def download(self):\n        # Implementation here\n\n    # Method to read the content of the source file into a CSV format\n    def read(self):\n        # Implementation here\n\n    # Method to format the content into the destination format\n    def format(self):\n        # Implementation here\n\n    # Method to save the destination in the desired location\n    def save(self):\n        # Implementation here\n```"
    },
    {
        "instruction": "Create an AI game in Python for the user to guess a number between 1 and 10.",
        "output": "import random\n\n# set the maximum number of guess\nmax_guesses = 5\n\n# generate a random number\ntarget_num = random.randint(1, 10)\n\n# initialize number of guesses\nnum_guesses = 0\n\n# prompt user for a guess\nwhile num_guesses < max_guesses:\n    user_guess = int(input(\"Guess a number between 1 and 10: \"))\n    \n    # check if user guess is correct\n    if user_guess == target_num:\n        print(\"You have guessed the number correctly\")\n        break\n    # check if user guess is greater or lesser\n    elif user_guess > target_num:\n        print(\"Your guess is greater than the target number\")\n    else:\n        print(\"Your guess is lesser than the target number\")\n    num_guesses += 1\n\nif num_guesses == max_guesses:\n    print(\"You have reached your maximum number of guesses\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate an AI game in Python for the user to guess a number between 1 and 10.\n\n### Solution:\n```\nimport random\n\n# set the maximum number of guess\nmax_guesses = 5\n\n# generate a random number\ntarget_num = random.randint(1, 10)\n\n# initialize number of guesses\nnum_guesses = 0\n\n# prompt user for a guess\nwhile num_guesses < max_guesses:\n    user_guess = int(input(\"Guess a number between 1 and 10: \"))\n    \n    # check if user guess is correct\n    if user_guess == target_num:\n        print(\"You have guessed the number correctly\")\n        break\n    # check if user guess is greater or lesser\n    elif user_guess > target_num:\n        print(\"Your guess is greater than the target number\")\n    else:\n        print(\"Your guess is lesser than the target number\")\n    num_guesses += 1\n\nif num_guesses == max_guesses:\n    print(\"You have reached your maximum number of guesses\")\n```"
    },
    {
        "instruction": "Write a Python program to generate a randomly sized array with random numbers between 0 and 1000.",
        "output": "import random\n\nn = random.randint(1, 10)\narray = [random.randint(0, 1000) for i in range(n)]\nprint(array)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to generate a randomly sized array with random numbers between 0 and 1000.\n\n### Solution:\n```\nimport random\n\nn = random.randint(1, 10)\narray = [random.randint(0, 1000) for i in range(n)]\nprint(array)\n```"
    },
    {
        "instruction": "Create a Python program that prints the numbers from 1 to 100, except when the number is divisible by 3, print \"Fizz\" and when the number is divisible by 5, print \"Buzz\" and when the number is divisible by both, print \"FizzBuzz\".",
        "output": "for i in range(1, 101):\n if i%3 == 0 and i%5 == 0:\n  print(\"FizzBuzz\")\n elif i%3 == 0:\n  print(\"Fizz\")\n elif i%5 == 0:\n  print(\"Buzz\")\n else:\n  print(i)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program that prints the numbers from 1 to 100, except when the number is divisible by 3, print \"Fizz\" and when the number is divisible by 5, print \"Buzz\" and when the number is divisible by both, print \"FizzBuzz\".\n\n### Solution:\n```\nfor i in range(1, 101):\n if i%3 == 0 and i%5 == 0:\n  print(\"FizzBuzz\")\n elif i%3 == 0:\n  print(\"Fizz\")\n elif i%5 == 0:\n  print(\"Buzz\")\n else:\n  print(i)\n```"
    },
    {
        "instruction": "Design a python program to delete a specified index element from a given list.",
        "output": "# Defining a function to delete an element from the list \ndef delete_element(List, index): \n     \n    # List is passed by reference and it won't work without passing reference \n    del List[index] \n     \n    # Printing the list aftter the deletion \n    print(\"The new list: \", List) \n     \n# Driver code \nList = [2, 3, 5, 8] \nindex = int(input(\"Enter the index of the element to be deleted: \")) \n     \n# Function calling \ndelete_element(List, index)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a python program to delete a specified index element from a given list.\n\n### Solution:\n```\n# Defining a function to delete an element from the list \ndef delete_element(List, index): \n     \n    # List is passed by reference and it won't work without passing reference \n    del List[index] \n     \n    # Printing the list aftter the deletion \n    print(\"The new list: \", List) \n     \n# Driver code \nList = [2, 3, 5, 8] \nindex = int(input(\"Enter the index of the element to be deleted: \")) \n     \n# Function calling \ndelete_element(List, index)\n```"
    },
    {
        "instruction": "Create an algorithm to reverse a given string without using the built-in python reverse function",
        "output": "\"\"\"\nReverse a given string without using the built-in python reverse function.\n\"\"\"\n\ndef reverse_string(in_str):\n    rev_str = ''\n    for i in range(len(in_str) - 1, -1, -1):\n        rev_str += in_str[i]\n    return rev_str\n\nif __name__ == '__main__':\n    in_str = 'reverse me'\n    rev_str = reverse_string(in_str)\n    print(rev_str)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate an algorithm to reverse a given string without using the built-in python reverse function\n\n### Solution:\n```\n\"\"\"\nReverse a given string without using the built-in python reverse function.\n\"\"\"\n\ndef reverse_string(in_str):\n    rev_str = ''\n    for i in range(len(in_str) - 1, -1, -1):\n        rev_str += in_str[i]\n    return rev_str\n\nif __name__ == '__main__':\n    in_str = 'reverse me'\n    rev_str = reverse_string(in_str)\n    print(rev_str)\n```"
    },
    {
        "instruction": "Create a function in Python that takes in a string and returns the frequency of each character in the string in form of a dictionary.",
        "output": "def frequency(string): \n    freq = {} \n    for i in string: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n    return freq\n\nprint(frequency('hello world'))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a function in Python that takes in a string and returns the frequency of each character in the string in form of a dictionary.\n\n### Solution:\n```\ndef frequency(string): \n    freq = {} \n    for i in string: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n    return freq\n\nprint(frequency('hello world'))\n```"
    },
    {
        "instruction": "Generate a python dictionary with all prime numbers between 10 and 30 as keys and their squares as values.",
        "output": "prime_nos = {11, 13, 17, 19, 23, 29}\n\noutput_dict = {prime_no: prime_no**2 for prime_no in prime_nos}\nprint(output_dict)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a python dictionary with all prime numbers between 10 and 30 as keys and their squares as values.\n\n### Solution:\n```\nprime_nos = {11, 13, 17, 19, 23, 29}\n\noutput_dict = {prime_no: prime_no**2 for prime_no in prime_nos}\nprint(output_dict)\n```"
    },
    {
        "instruction": "Write a Python program to check if a string contains a specific substring",
        "output": "def contains_substring(string, substring):\n    return substring in string",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to check if a string contains a specific substring\n\n### Solution:\n```\ndef contains_substring(string, substring):\n    return substring in string\n```"
    },
    {
        "instruction": "Create a trigonometric function using Python that produces a sinusoidal wave.",
        "output": "def sinusoidal_wave(x):\n    return np.sin(2*np.pi*x)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a trigonometric function using Python that produces a sinusoidal wave.\n\n### Solution:\n```\ndef sinusoidal_wave(x):\n    return np.sin(2*np.pi*x)\n```"
    },
    {
        "instruction": "Create a Python script that extracts the text from a webpage",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com\"\n\npage = requests.get(url)\n\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ntext = soup.find_all(text=True)\n\nfor t in text:\n    print(t.strip())",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python script that extracts the text from a webpage\n\n### Solution:\n```\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com\"\n\npage = requests.get(url)\n\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ntext = soup.find_all(text=True)\n\nfor t in text:\n    print(t.strip())\n```"
    },
    {
        "instruction": "Generate a dynamic query for creating a new table named “employees” with 3 columns: “id”, “name”, and “salary” using a Python script.",
        "output": "query = 'CREATE TABLE employees (id INTEGER PRIMARY KEY, name VARCHAR(255), salary INTEGER)'",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a dynamic query for creating a new table named “employees” with 3 columns: “id”, “name”, and “salary” using a Python script.\n\n### Solution:\n```\nquery = 'CREATE TABLE employees (id INTEGER PRIMARY KEY, name VARCHAR(255), salary INTEGER)'\n```"
    },
    {
        "instruction": "Write a Python code to encode a given string using the Caesar cipher.",
        "output": "def caesar_encrypt(string, shift_amount):\n encrypted_string = \"\"\n for i in range(len(string)):\n  char = string[i]\n  x = ord(char) + shift_amount\n  encrypted_string += chr(x)\n \n return encrypted_string\n\nencoded_string = caesar_encrypt(string, 3)\nprint(encoded_string) // Output: Khoor Zruog",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python code to encode a given string using the Caesar cipher.\n\n### Solution:\n```\ndef caesar_encrypt(string, shift_amount):\n encrypted_string = \"\"\n for i in range(len(string)):\n  char = string[i]\n  x = ord(char) + shift_amount\n  encrypted_string += chr(x)\n \n return encrypted_string\n\nencoded_string = caesar_encrypt(string, 3)\nprint(encoded_string) // Output: Khoor Zruog\n```"
    },
    {
        "instruction": "Create Python code for a basic Hangman game.",
        "output": "import random\n\ndef hangman(word):\n guesses = 0\n guessed_letters = \"\"\n chances = 5\n \n while chances > 0:\n     chance = True\n     for letter in word:\n         if letter in guessed_letters:\n             print(letter, end=' ')\n         else:\n             print('_', end=' ')\n             chance = False\n \n     if chance:\n         print('You won!')\n         break\n \n     guess_letter = input('Guess a letter: ')\n     guessed_letters += guess_letter\n \n     if guess_letter not in word:\n         chances -= 1\n         print('Incorrect. You have {} chances left.'.format(chances))\n \n if chances == 0:\n     print('You lost! \\nThe word is {}.'.format(word))\n\n# Words\nwords = ['cat', 'mouse', 'lion', 'dog']\nword = random.choice(words)\nhangman(word)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate Python code for a basic Hangman game.\n\n### Solution:\n```\nimport random\n\ndef hangman(word):\n guesses = 0\n guessed_letters = \"\"\n chances = 5\n \n while chances > 0:\n     chance = True\n     for letter in word:\n         if letter in guessed_letters:\n             print(letter, end=' ')\n         else:\n             print('_', end=' ')\n             chance = False\n \n     if chance:\n         print('You won!')\n         break\n \n     guess_letter = input('Guess a letter: ')\n     guessed_letters += guess_letter\n \n     if guess_letter not in word:\n         chances -= 1\n         print('Incorrect. You have {} chances left.'.format(chances))\n \n if chances == 0:\n     print('You lost! \\nThe word is {}.'.format(word))\n\n# Words\nwords = ['cat', 'mouse', 'lion', 'dog']\nword = random.choice(words)\nhangman(word)\n```"
    },
    {
        "instruction": "Develop an algorithm to check if a string S is a palindrome in Python.",
        "output": "def is_palindrome(s):\n    # Convert strings to lowercase\n    s = s.lower()\n \n    # Iterate through middle of string with indices \n    for i in range(len(s) // 2):\n        if s[i] != s[len(s) - i - 1]:\n            return False\n    return True",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop an algorithm to check if a string S is a palindrome in Python.\n\n### Solution:\n```\ndef is_palindrome(s):\n    # Convert strings to lowercase\n    s = s.lower()\n \n    # Iterate through middle of string with indices \n    for i in range(len(s) // 2):\n        if s[i] != s[len(s) - i - 1]:\n            return False\n    return True\n```"
    },
    {
        "instruction": "Create an algorithm in Python to print the binary representation of a given number.",
        "output": "def binary_rep(num):\n    binary_string = \"\"\n    while num>0:\n        remainder = num%2\n        binary_string = str(remainder) + binary_string\n        num = num//2\n\n    print(binary_string)\n\nbinary_rep(23) # prints 10111",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate an algorithm in Python to print the binary representation of a given number.\n\n### Solution:\n```\ndef binary_rep(num):\n    binary_string = \"\"\n    while num>0:\n        remainder = num%2\n        binary_string = str(remainder) + binary_string\n        num = num//2\n\n    print(binary_string)\n\nbinary_rep(23) # prints 10111\n```"
    },
    {
        "instruction": "Modify the given Python code to handle errors more precisely.",
        "output": "try:\n    a = 5 / 0\nexcept ZeroDivisionError as error:\n    print(error)\nexcept Exception as error:\n    print(error)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nModify the given Python code to handle errors more precisely.\n\n### Solution:\n```\ntry:\n    a = 5 / 0\nexcept ZeroDivisionError as error:\n    print(error)\nexcept Exception as error:\n    print(error)\n```"
    },
    {
        "instruction": "Compose a Python class that creates a list of unique elements in the input.",
        "output": "class ListUnique:\n    \n    def __init__(self,list1):\n        # set up empty list\n        self.list1 = []\n        \n        # loop through input list\n        for x in list1:\n            # add element to list if it is not already in the list\n            if x not in self.list1:\n                self.list1.append(x)\n                \n    # returns the modified list\n    def get_list(self):\n        return self.list1\n\nlist1 = ['a','b','b','c','a','c']\n\n# create instance of ListUnique\nlu = ListUnique(list1)\n\n# print the modified list\nprint(lu.get_list()) # prints ['a', 'b', 'c']",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCompose a Python class that creates a list of unique elements in the input.\n\n### Solution:\n```\nclass ListUnique:\n    \n    def __init__(self,list1):\n        # set up empty list\n        self.list1 = []\n        \n        # loop through input list\n        for x in list1:\n            # add element to list if it is not already in the list\n            if x not in self.list1:\n                self.list1.append(x)\n                \n    # returns the modified list\n    def get_list(self):\n        return self.list1\n\nlist1 = ['a','b','b','c','a','c']\n\n# create instance of ListUnique\nlu = ListUnique(list1)\n\n# print the modified list\nprint(lu.get_list()) # prints ['a', 'b', 'c']\n```"
    },
    {
        "instruction": "Build an algorithm in Python to concatenate two binary strings.",
        "output": "def concatTwoBinStrings(str1, str2):\n    str = \"\"\n    for i in (str1 + str2):\n        if i == '0':\n            str += '0'\n        else:\n            str += '1'\n    return str\n\nstr1 = \"10101\"\nstr2 = \"101\"\n\nprint(concatTwoBinStrings(str1, str2))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nBuild an algorithm in Python to concatenate two binary strings.\n\n### Solution:\n```\ndef concatTwoBinStrings(str1, str2):\n    str = \"\"\n    for i in (str1 + str2):\n        if i == '0':\n            str += '0'\n        else:\n            str += '1'\n    return str\n\nstr1 = \"10101\"\nstr2 = \"101\"\n\nprint(concatTwoBinStrings(str1, str2))\n```"
    },
    {
        "instruction": "Generate a list of the top 10 common words in a given list of words.",
        "output": "from collections import Counter\n\nwords = ['Python', 'programming', 'language', 'is', 'powerful', 'and', 'versatile']\n\nword_counts = Counter(words)\ntop_10 = word_counts.most_common(10)\nprint (top_10)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a list of the top 10 common words in a given list of words.\n\n### Solution:\n```\nfrom collections import Counter\n\nwords = ['Python', 'programming', 'language', 'is', 'powerful', 'and', 'versatile']\n\nword_counts = Counter(words)\ntop_10 = word_counts.most_common(10)\nprint (top_10)\n```"
    },
    {
        "instruction": "Create a vector of 10 random numbers using Python NumPy.",
        "output": "import numpy as np\n\nnp.random.seed(123)\nvector = np.random.rand(10)\nprint(vector)\n\n# Output:\n# [0.69646919 0.28613933 0.22685145 0.55131477 0.71946897 0.42310646\n#  0.9807642  0.68482974 0.4809319  0.39211752]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a vector of 10 random numbers using Python NumPy.\n\n### Solution:\n```\nimport numpy as np\n\nnp.random.seed(123)\nvector = np.random.rand(10)\nprint(vector)\n\n# Output:\n# [0.69646919 0.28613933 0.22685145 0.55131477 0.71946897 0.42310646\n#  0.9807642  0.68482974 0.4809319  0.39211752]\n```"
    },
    {
        "instruction": "Write a Python program to sort a given list in ascending order without using built-in functions.",
        "output": "def sort_list(lst):\n    for i in range(0, len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    \n    return lst\n\nprint(sort_list([3, 7, 4, 1, 9])) # prints [1, 3, 4, 7, 9]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to sort a given list in ascending order without using built-in functions.\n\n### Solution:\n```\ndef sort_list(lst):\n    for i in range(0, len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    \n    return lst\n\nprint(sort_list([3, 7, 4, 1, 9])) # prints [1, 3, 4, 7, 9]\n```"
    },
    {
        "instruction": "Suggest an implementation for the following class declaration in Python.",
        "output": "class Profile:\n    def __init__(self, first_name, last_name, occupation):\n        self.first_name = first_name \n        self.last_name = last_name \n        self.occupation = occupation \n        \n    def full_name(self): \n        return self.first_name + \" \" + self.last_name",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nSuggest an implementation for the following class declaration in Python.\n\n### Solution:\n```\nclass Profile:\n    def __init__(self, first_name, last_name, occupation):\n        self.first_name = first_name \n        self.last_name = last_name \n        self.occupation = occupation \n        \n    def full_name(self): \n        return self.first_name + \" \" + self.last_name\n```"
    },
    {
        "instruction": "Create a text-based game using Python.",
        "output": "# Game setup\nname = input(\"What is your name? \")\nprint(\"Welcome, \" + name + \"!\")\n\n# Main loop\nwhile True:\n\n    # Get player input\n    command = input(\"What would you like to do? \")\n\n    # Execute command\n    if command == \"go north\":\n        print(\"You head north.\")\n    elif command == \"go east\":\n        print(\"You head east.\")\n    elif command == \"go south\":\n        print(\"You head south.\")\n    elif command == \"go west\":\n        print(\"You head west.\")\n    elif command == \"quit\":\n        print(\"Goodbye, \" + name + \"!\")\n        break\n    else:\n        print(\"Sorry, I don't understand.\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a text-based game using Python.\n\n### Solution:\n```\n# Game setup\nname = input(\"What is your name? \")\nprint(\"Welcome, \" + name + \"!\")\n\n# Main loop\nwhile True:\n\n    # Get player input\n    command = input(\"What would you like to do? \")\n\n    # Execute command\n    if command == \"go north\":\n        print(\"You head north.\")\n    elif command == \"go east\":\n        print(\"You head east.\")\n    elif command == \"go south\":\n        print(\"You head south.\")\n    elif command == \"go west\":\n        print(\"You head west.\")\n    elif command == \"quit\":\n        print(\"Goodbye, \" + name + \"!\")\n        break\n    else:\n        print(\"Sorry, I don't understand.\")\n```"
    },
    {
        "instruction": "Create an interactive program to Convert text to Pig Latin in Python.",
        "output": "# Function to convert a sentence to Pig Latin\ndef toPigLatin(sentence):\n  words = sentence.split()\n  pigLatin = []\n  for word in words:\n    firstLetter = word[0]\n\n    if firstLetter in 'aeiou':\n      pigLatinWord = word + 'way'\n    else:\n      pigLatinWord = word[1:] + firstLetter + 'ay'\n\n    pigLatin.append(pigLatinWord)\n\n  return ' '.join(pigLatin)\n\n# Get a sentence from the user\nsentence = input('Enter a sentence: ')\n\n# Convert the sentence to Pig Latin\npigLatin = toPigLatin(sentence)\n\n# Print the result\nprint(pigLatin)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate an interactive program to Convert text to Pig Latin in Python.\n\n### Solution:\n```\n# Function to convert a sentence to Pig Latin\ndef toPigLatin(sentence):\n  words = sentence.split()\n  pigLatin = []\n  for word in words:\n    firstLetter = word[0]\n\n    if firstLetter in 'aeiou':\n      pigLatinWord = word + 'way'\n    else:\n      pigLatinWord = word[1:] + firstLetter + 'ay'\n\n    pigLatin.append(pigLatinWord)\n\n  return ' '.join(pigLatin)\n\n# Get a sentence from the user\nsentence = input('Enter a sentence: ')\n\n# Convert the sentence to Pig Latin\npigLatin = toPigLatin(sentence)\n\n# Print the result\nprint(pigLatin)\n```"
    },
    {
        "instruction": "Generate a valid Python 3 cURL request to the OpenWeatherMap API for current weather information.",
        "output": "import requests \n  \n# defining the api-endpoint \nAPI_ENDPOINT = \"https://api.openweathermap.org/data/2.5/weather\"\n  \n# data to be sent to api \ndata = {\"q\" : \"Paris\", \"appid\" : YOUR_API_KEY} \n  \n# sending post request and saving response as response object \nr = requests.get(url = API_ENDPOINT, params = data) \n  \n# extracting response text  \npastebin_url = r.text \nprint(\"The current weather for Paris is :%s\"%pastebin_url)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a valid Python 3 cURL request to the OpenWeatherMap API for current weather information.\n\n### Solution:\n```\nimport requests \n  \n# defining the api-endpoint \nAPI_ENDPOINT = \"https://api.openweathermap.org/data/2.5/weather\"\n  \n# data to be sent to api \ndata = {\"q\" : \"Paris\", \"appid\" : YOUR_API_KEY} \n  \n# sending post request and saving response as response object \nr = requests.get(url = API_ENDPOINT, params = data) \n  \n# extracting response text  \npastebin_url = r.text \nprint(\"The current weather for Paris is :%s\"%pastebin_url)\n```"
    },
    {
        "instruction": "Automate the testing of a Python Flask application by writing a script that will run unit tests on the models.",
        "output": "import unittest\nfrom flask_testing import TestCase\nfrom app import db, Task\n\nclass TestModel(TestCase):\n def create_app(self):\n return app\n\n def setUp(self):\n db.create_all()\n self.task = Task(description='Description')\n db.session.add(self.task)\n db.session.commit()\n\n def tearDown(self):\n db.session.remove()\n db.drop_all()\n\nclass TestTask(TestModel):\n def test_task_creation(self):\n self.assertEqual('Description', self.task.description)\n\nif __name__ == '__main__':\n unittest.main()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nAutomate the testing of a Python Flask application by writing a script that will run unit tests on the models.\n\n### Solution:\n```\nimport unittest\nfrom flask_testing import TestCase\nfrom app import db, Task\n\nclass TestModel(TestCase):\n def create_app(self):\n return app\n\n def setUp(self):\n db.create_all()\n self.task = Task(description='Description')\n db.session.add(self.task)\n db.session.commit()\n\n def tearDown(self):\n db.session.remove()\n db.drop_all()\n\nclass TestTask(TestModel):\n def test_task_creation(self):\n self.assertEqual('Description', self.task.description)\n\nif __name__ == '__main__':\n unittest.main()\n```"
    },
    {
        "instruction": "Develop a prototype of a geographic information system in Python.",
        "output": "import geopandas\nimport matplotlib.pyplot as plt\n\n# Read in the shapefile of nations\nworld = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))\n\n# Set up the base figure\nfig, ax = plt.subplots(figsize=(12, 8))\n# Set up the title of the map as a subplot\nax.set_title(\"Geographic Information System\", fontdict={'fontsize': 20}, loc='left')\n\n# Display the world map\nworld.plot(ax=ax, color='white', edgecolor='black')\n\n# Display a legend\nax.legend(loc='upper right')\n\n# Show the map\nplt.show()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop a prototype of a geographic information system in Python.\n\n### Solution:\n```\nimport geopandas\nimport matplotlib.pyplot as plt\n\n# Read in the shapefile of nations\nworld = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))\n\n# Set up the base figure\nfig, ax = plt.subplots(figsize=(12, 8))\n# Set up the title of the map as a subplot\nax.set_title(\"Geographic Information System\", fontdict={'fontsize': 20}, loc='left')\n\n# Display the world map\nworld.plot(ax=ax, color='white', edgecolor='black')\n\n# Display a legend\nax.legend(loc='upper right')\n\n# Show the map\nplt.show()\n```"
    },
    {
        "instruction": "Develop a Python code to print the pairs of the numbers in the given list which adds up to the given target number.",
        "output": "def pairs_adding_to_target(nums, target): \n \n\tresult = [] \n\tfor i in range(0, len(nums)): \n\t\tfor j in range(i+1, len(nums))\t: \n\t\t\tif nums[i] + nums[j] == target:\t \n\t\t\t\tresult.append([nums[i], nums[j]]) \n\treturn result \n\nresult = pairs_adding_to_target([1, 5, 9, 4], 10)\nprint(result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop a Python code to print the pairs of the numbers in the given list which adds up to the given target number.\n\n### Solution:\n```\ndef pairs_adding_to_target(nums, target): \n \n\tresult = [] \n\tfor i in range(0, len(nums)): \n\t\tfor j in range(i+1, len(nums))\t: \n\t\t\tif nums[i] + nums[j] == target:\t \n\t\t\t\tresult.append([nums[i], nums[j]]) \n\treturn result \n\nresult = pairs_adding_to_target([1, 5, 9, 4], 10)\nprint(result)\n```"
    },
    {
        "instruction": "Design and implement a function in Python that takes a list of strings as an argument and returns the words that appear the most.",
        "output": "def most_frequent(words):\n frequency = {}\n \n for word in words:\n  if word in frequency:\n   frequency[word] += 1\n  else:\n   frequency[word] = 1\n \n most_frequent_word = None\n max_frequency = 0\n \n for word, count in frequency.items():\n  if count > max_frequency:\n   max_frequency = count\n   most_frequent_word = word\n \n return most_frequent_word",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign and implement a function in Python that takes a list of strings as an argument and returns the words that appear the most.\n\n### Solution:\n```\ndef most_frequent(words):\n frequency = {}\n \n for word in words:\n  if word in frequency:\n   frequency[word] += 1\n  else:\n   frequency[word] = 1\n \n most_frequent_word = None\n max_frequency = 0\n \n for word, count in frequency.items():\n  if count > max_frequency:\n   max_frequency = count\n   most_frequent_word = word\n \n return most_frequent_word\n```"
    },
    {
        "instruction": "Create a Python program that returns a certain number of prime numbers.",
        "output": "# function to check whether a number is prime or not\ndef is_prime(num): \n    for i in range(2,num): \n        if (num % i == 0): \n            return False\n    else: \n        return True\n\n# list to store prime numbers\nprimes = []\n\n# create a list of prime numbers\nfor num in range(2,100): \n    if (is_prime(num)): \n        primes.append(num)\n\n# print the first 10 prime numbers\nfor x in range(10):\n    print(primes[x])",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program that returns a certain number of prime numbers.\n\n### Solution:\n```\n# function to check whether a number is prime or not\ndef is_prime(num): \n    for i in range(2,num): \n        if (num % i == 0): \n            return False\n    else: \n        return True\n\n# list to store prime numbers\nprimes = []\n\n# create a list of prime numbers\nfor num in range(2,100): \n    if (is_prime(num)): \n        primes.append(num)\n\n# print the first 10 prime numbers\nfor x in range(10):\n    print(primes[x])\n```"
    },
    {
        "instruction": "Generate a Python program that takes two strings from the user and compares them to indicate if they are equal.",
        "output": "string1 = input(\"Enter a string: \")\nstring2 = input(\"Enter another string: \")\n\nif string1 == string2:\n print(\"The strings are equal\")\nelse:\n print(\"The strings are not equal\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python program that takes two strings from the user and compares them to indicate if they are equal.\n\n### Solution:\n```\nstring1 = input(\"Enter a string: \")\nstring2 = input(\"Enter another string: \")\n\nif string1 == string2:\n print(\"The strings are equal\")\nelse:\n print(\"The strings are not equal\")\n```"
    },
    {
        "instruction": "Generate a for-loop in Python that prints out the numbers from 1 to 10",
        "output": "for i in range(1, 11):\n    print(i)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a for-loop in Python that prints out the numbers from 1 to 10\n\n### Solution:\n```\nfor i in range(1, 11):\n    print(i)\n```"
    },
    {
        "instruction": "Create a Python script to print characters from the \"abcd\" string until the total of characters printed reaches 50.",
        "output": "string = \"abcd\"\ncount = 0\nwhile count < 50:\n    for ch in string:\n        print(ch)\n        count += 1\n    if count >= 50:\n        break",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python script to print characters from the \"abcd\" string until the total of characters printed reaches 50.\n\n### Solution:\n```\nstring = \"abcd\"\ncount = 0\nwhile count < 50:\n    for ch in string:\n        print(ch)\n        count += 1\n    if count >= 50:\n        break\n```"
    },
    {
        "instruction": "Generate a python algorithm to swap two elements in an array",
        "output": "def swap_array(arr, pos_1, pos_2):\n    arr[pos_1], arr[pos_2] = arr[pos_2], arr[pos_1]\n    return arr",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a python algorithm to swap two elements in an array\n\n### Solution:\n```\ndef swap_array(arr, pos_1, pos_2):\n    arr[pos_1], arr[pos_2] = arr[pos_2], arr[pos_1]\n    return arr\n```"
    },
    {
        "instruction": "Create a Python function to search and replace words in a given sentence.",
        "output": "def search_replace(sentence, target, replacement):\n    words = sentence.split(\" \")\n\n    for i in range(len(words)):\n        if words[i] == target:\n            words[i] = replacement\n    \n    return \" \".join(words)\n\nsentence = \"The quick brown fox jumps over the lazy dog\"\nprint(search_replace(sentence, \"quick\", \"slow\")) # \"The slow brown fox jumps over the lazy dog\"",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python function to search and replace words in a given sentence.\n\n### Solution:\n```\ndef search_replace(sentence, target, replacement):\n    words = sentence.split(\" \")\n\n    for i in range(len(words)):\n        if words[i] == target:\n            words[i] = replacement\n    \n    return \" \".join(words)\n\nsentence = \"The quick brown fox jumps over the lazy dog\"\nprint(search_replace(sentence, \"quick\", \"slow\")) # \"The slow brown fox jumps over the lazy dog\"\n```"
    },
    {
        "instruction": "Create an array using Python containing the numbers 0 to 9.",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate an array using Python containing the numbers 0 to 9.\n\n### Solution:\n```\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```"
    },
    {
        "instruction": "Given the following input JSON data, write a Python program to print out all the elements that have an even length.",
        "output": "import json\n\ndata = '{\"apple\":[\"red\",\"green\"],\"pear\":[\"green\"],\"grapes\":[\"green\",\"red\"],\"banana\":[\"yellow\"]}'\n\njson_data = json.loads(data)\n\nfor item in json_data.items():\n    if len(item[1]) % 2 == 0:\n        print(item[0])",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGiven the following input JSON data, write a Python program to print out all the elements that have an even length.\n\n### Solution:\n```\nimport json\n\ndata = '{\"apple\":[\"red\",\"green\"],\"pear\":[\"green\"],\"grapes\":[\"green\",\"red\"],\"banana\":[\"yellow\"]}'\n\njson_data = json.loads(data)\n\nfor item in json_data.items():\n    if len(item[1]) % 2 == 0:\n        print(item[0])\n```"
    },
    {
        "instruction": "Generate a Python class to construct a linked list.",
        "output": "class Node:\n def __init__(self, data):\n self.data = data\n self.next = None\n\nclass LinkedList:\n def __init__(self):\n self.head = None\n\ndef append(self, new_data):\n new_node = Node(new_data)\n if self.head == None:\n self.head = new_node\n return\n last = self.head\n while last.next:\n last = last.next\n last.next = new_node",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python class to construct a linked list.\n\n### Solution:\n```\nclass Node:\n def __init__(self, data):\n self.data = data\n self.next = None\n\nclass LinkedList:\n def __init__(self):\n self.head = None\n\ndef append(self, new_data):\n new_node = Node(new_data)\n if self.head == None:\n self.head = new_node\n return\n last = self.head\n while last.next:\n last = last.next\n last.next = new_node\n```"
    },
    {
        "instruction": "Create an AI assistant in Python that can tell jokes.",
        "output": "import random\n\njokes = [\n   'Why did the chicken cross the playground? To get to the other slide!',\n   'Why did the monkey fall out of the tree? Because it was dead!',\n   'Why did the dinosaur go to the dentist? Because he had a toothache!'\n]\n\ndef tell_joke():\n   joke = random.choice(jokes)\n   print(joke)\n\ntell_joke()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate an AI assistant in Python that can tell jokes.\n\n### Solution:\n```\nimport random\n\njokes = [\n   'Why did the chicken cross the playground? To get to the other slide!',\n   'Why did the monkey fall out of the tree? Because it was dead!',\n   'Why did the dinosaur go to the dentist? Because he had a toothache!'\n]\n\ndef tell_joke():\n   joke = random.choice(jokes)\n   print(joke)\n\ntell_joke()\n```"
    },
    {
        "instruction": "Write a Python program to calculate the sum of all words in a sentence.",
        "output": "def sum_of_words(sentence):\n words = sentence.split() \n total = 0 \n for word in words: \n total += len(word) \n return total\n\nresult = sum_of_words(\"This is a sentence\")\nprint(result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to calculate the sum of all words in a sentence.\n\n### Solution:\n```\ndef sum_of_words(sentence):\n words = sentence.split() \n total = 0 \n for word in words: \n total += len(word) \n return total\n\nresult = sum_of_words(\"This is a sentence\")\nprint(result)\n```"
    },
    {
        "instruction": "Create a machine learning model in Python to predict the stock prices of a company given the stock prices for the be past 10 days.",
        "output": "import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndf = pd.read_csv(\"stock_data.csv\")\nX = df[['Day1', 'Day2', 'Day3', 'Day4', 'Day5', 'Day6', 'Day7', 'Day8', 'Day9', 'Day10']]\ny = df['Day11']\n\nmodel = LinearRegression()\nmodel.fit(X, y)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a machine learning model in Python to predict the stock prices of a company given the stock prices for the be past 10 days.\n\n### Solution:\n```\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndf = pd.read_csv(\"stock_data.csv\")\nX = df[['Day1', 'Day2', 'Day3', 'Day4', 'Day5', 'Day6', 'Day7', 'Day8', 'Day9', 'Day10']]\ny = df['Day11']\n\nmodel = LinearRegression()\nmodel.fit(X, y)\n```"
    },
    {
        "instruction": "Create a function in Python to optimize the hyperparameters of a support vector machine model for a given data set.",
        "output": "import numpy as np\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\n\ndef optimize_svm(X, y):\n    \"\"\"Optimizes the hyperparameters of a Support Vector Machine model\n    using GridSearchCV.\n    \n    Parameters\n    ----------\n    X : numpy array\n        The feature dataset\n    y : numpy array\n        The target values\n        \n    Returns\n    -------\n    best_estimator : sklearn.svm.SVC\n        A fitted SVM Estimator instance\n    \"\"\"\n    tuned_parameters = [{'kernel': ['rbf'], 'gamma': [1e-3, 1e-4],\n                     'C': [1, 10, 100, 1000]},\n                    {'kernel': ['linear'], 'C': [1, 10, 100, 1000]}]\n    clf = GridSearchCV(SVC(), tuned_parameters, cv=5)\n    clf.fit(X, y)\n    best_estimator = clf.best_estimator_\n\n    return best_estimator",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a function in Python to optimize the hyperparameters of a support vector machine model for a given data set.\n\n### Solution:\n```\nimport numpy as np\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\n\ndef optimize_svm(X, y):\n    \"\"\"Optimizes the hyperparameters of a Support Vector Machine model\n    using GridSearchCV.\n    \n    Parameters\n    ----------\n    X : numpy array\n        The feature dataset\n    y : numpy array\n        The target values\n        \n    Returns\n    -------\n    best_estimator : sklearn.svm.SVC\n        A fitted SVM Estimator instance\n    \"\"\"\n    tuned_parameters = [{'kernel': ['rbf'], 'gamma': [1e-3, 1e-4],\n                     'C': [1, 10, 100, 1000]},\n                    {'kernel': ['linear'], 'C': [1, 10, 100, 1000]}]\n    clf = GridSearchCV(SVC(), tuned_parameters, cv=5)\n    clf.fit(X, y)\n    best_estimator = clf.best_estimator_\n\n    return best_estimator\n```"
    },
    {
        "instruction": "Describe the given Python code snippet.",
        "output": "The given code snippet defines a function called 'count_ones' which takes a single integer argument 'n'. It then initializes a count variable which is used to keep track of the number of ones in binary representation of the given argument. It then executes a loop which runs until all bits of the argument are processed in binary representation. It uses bitwise & operation on the argument with 1 and then compares the result with 1 to recognize whether the bit is 1 or 0. If it is 1, it increments the count by 1, and if it is 0, it does nothing. Finally, it shifts the argument to the right by 1 bit before looping back and processes the next bit.",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDescribe the given Python code snippet.\n\n### Solution:\n```\nThe given code snippet defines a function called 'count_ones' which takes a single integer argument 'n'. It then initializes a count variable which is used to keep track of the number of ones in binary representation of the given argument. It then executes a loop which runs until all bits of the argument are processed in binary representation. It uses bitwise & operation on the argument with 1 and then compares the result with 1 to recognize whether the bit is 1 or 0. If it is 1, it increments the count by 1, and if it is 0, it does nothing. Finally, it shifts the argument to the right by 1 bit before looping back and processes the next bit.\n```"
    },
    {
        "instruction": "Write a function to remove a given item from a python list.",
        "output": "def remove_item(lst, item):\n    while item in lst:\n        lst.remove(item)\n    return lst\n\nprint(remove_item([1, 4, 8, 2], 8)) # prints [1, 4, 2]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a function to remove a given item from a python list.\n\n### Solution:\n```\ndef remove_item(lst, item):\n    while item in lst:\n        lst.remove(item)\n    return lst\n\nprint(remove_item([1, 4, 8, 2], 8)) # prints [1, 4, 2]\n```"
    },
    {
        "instruction": "Create a class in Python that will represent a tree. The class should include methods for adding and removing nodes.",
        "output": "class Tree:\n def __init__(self, data=None):\n self.data = data\n self.children = []\n\n def add_child(self, obj):\n self.children.append(obj)\n\n def remove_child(self, obj):\n self.children.remove(obj)\n\n\nroot = Tree('root')\nnode1 = Tree('node1')\nnode2 = Tree('node2')\n\nroot.add_child(node1)\nroot.add_child(node2)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a class in Python that will represent a tree. The class should include methods for adding and removing nodes.\n\n### Solution:\n```\nclass Tree:\n def __init__(self, data=None):\n self.data = data\n self.children = []\n\n def add_child(self, obj):\n self.children.append(obj)\n\n def remove_child(self, obj):\n self.children.remove(obj)\n\n\nroot = Tree('root')\nnode1 = Tree('node1')\nnode2 = Tree('node2')\n\nroot.add_child(node1)\nroot.add_child(node2)\n```"
    },
    {
        "instruction": "Write a Python program to calculate the area of a circle when a user inputs its radius.",
        "output": "def calculate_area_circle(radius): \n    pi = 3.14\n    area = pi * (radius * radius) \n    return area \n  \n# Output\nprint(\"Area of circle is: \", calculate_area_circle(10))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to calculate the area of a circle when a user inputs its radius.\n\n### Solution:\n```\ndef calculate_area_circle(radius): \n    pi = 3.14\n    area = pi * (radius * radius) \n    return area \n  \n# Output\nprint(\"Area of circle is: \", calculate_area_circle(10))\n```"
    },
    {
        "instruction": "Create a function in Python that takes in a list of integers and prints out the largest multiple of 3.",
        "output": "def largestMultipleOf3(list): \n    list.sort() \n    running_sum = 0\n    for i in range(len(list)): \n        running_sum += list[i] \n\n    if running_sum % 3 == 0:  \n        return running_sum  \n\n    return largestMultipleOf3(list[:-1]) \n\nlist = [3, 15, 4, 6, 5] \nprint(largestMultipleOf3(list)) // 15",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a function in Python that takes in a list of integers and prints out the largest multiple of 3.\n\n### Solution:\n```\ndef largestMultipleOf3(list): \n    list.sort() \n    running_sum = 0\n    for i in range(len(list)): \n        running_sum += list[i] \n\n    if running_sum % 3 == 0:  \n        return running_sum  \n\n    return largestMultipleOf3(list[:-1]) \n\nlist = [3, 15, 4, 6, 5] \nprint(largestMultipleOf3(list)) // 15\n```"
    },
    {
        "instruction": "Design a function in Python that takes a string as an input and prints all of the permutations of the string.",
        "output": "def permutation(string): \n    if len(string) == 1: \n        return [string] \n  \n    perm_list = [] \n    for i in range(len(string)): \n        m = string[i] \n        rem_string = string[:i] + string[i+1:] \n        for perm in permutation(rem_string): \n            perm_list.append(m + perm) \n  \n    return perm_list \n  \nstring = \"ABC\"\npermutation_list = permutation(string) \n  \nprint(permutation_list)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a function in Python that takes a string as an input and prints all of the permutations of the string.\n\n### Solution:\n```\ndef permutation(string): \n    if len(string) == 1: \n        return [string] \n  \n    perm_list = [] \n    for i in range(len(string)): \n        m = string[i] \n        rem_string = string[:i] + string[i+1:] \n        for perm in permutation(rem_string): \n            perm_list.append(m + perm) \n  \n    return perm_list \n  \nstring = \"ABC\"\npermutation_list = permutation(string) \n  \nprint(permutation_list)\n```"
    },
    {
        "instruction": "Create a Ruby program to implement lexicographical sorting.",
        "output": "def lexicographical_sort(arr)\n  arr.sort_by { |word| word.downcase }\nend\n\nsorted_arr = lexicographical_sort([\"ruby\", \"go\", \"java\", \"python\"])\n\nputs sorted_arr",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Ruby program to implement lexicographical sorting.\n\n### Solution:\n```\ndef lexicographical_sort(arr)\n  arr.sort_by { |word| word.downcase }\nend\n\nsorted_arr = lexicographical_sort([\"ruby\", \"go\", \"java\", \"python\"])\n\nputs sorted_arr\n```"
    },
    {
        "instruction": "Generate python code to rotate an array to the left.",
        "output": "def rotate_left(arr):\n    first_element = arr[0]\n    for i in range(len(arr) - 1):\n        arr[i] = arr[i + 1]\n    arr[len(arr) - 1] = first_element\n\nrotate_left(arr)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate python code to rotate an array to the left.\n\n### Solution:\n```\ndef rotate_left(arr):\n    first_element = arr[0]\n    for i in range(len(arr) - 1):\n        arr[i] = arr[i + 1]\n    arr[len(arr) - 1] = first_element\n\nrotate_left(arr)\n```"
    },
    {
        "instruction": "Implement a linear search algorithm in Python to find the position of a given element in an array.",
        "output": "def linear_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nImplement a linear search algorithm in Python to find the position of a given element in an array.\n\n### Solution:\n```\ndef linear_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1\n```"
    },
    {
        "instruction": "Write a Python program to sort a list of tuples by the second element in the tuple.",
        "output": "def sort_tuples_by_second_element(tuples):\n  return sorted(tuples, key=lambda tup: tup[1])",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to sort a list of tuples by the second element in the tuple.\n\n### Solution:\n```\ndef sort_tuples_by_second_element(tuples):\n  return sorted(tuples, key=lambda tup: tup[1])\n```"
    },
    {
        "instruction": "Create a program in Python that takes two integer values and finds the greatest common divisor (GCD).",
        "output": "# function to find the GCD of two numbers using Euclidean algorithm\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n \n# take input from the user\na = 18\nb = 54\n\n# find GCD\ngcd = gcd(a,b) \n\n# display result\nprint(\"The GCD of {} and {} is {}\".format(a, b, gcd))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a program in Python that takes two integer values and finds the greatest common divisor (GCD).\n\n### Solution:\n```\n# function to find the GCD of two numbers using Euclidean algorithm\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n \n# take input from the user\na = 18\nb = 54\n\n# find GCD\ngcd = gcd(a,b) \n\n# display result\nprint(\"The GCD of {} and {} is {}\".format(a, b, gcd))\n```"
    },
    {
        "instruction": "Create a Python script that servers a realtime notifications to subscribed users.",
        "output": "import time\nimport websocket\n\n# Server script to send realtime notifications to subscribed users \n# Connect to websocket host\nws = websocket.WebSocket()\nws.connect(\"ws://localhost:8888/\")\n\n# handle incoming messages\nwhile True:\n msg = ws.recv()\n print(f\"Notification to users: {msg}\")\n \n# broadcast the message to subscribed users\nws.send(msg)\n\n# wait for 5 seconds \ntime.sleep(5)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python script that servers a realtime notifications to subscribed users.\n\n### Solution:\n```\nimport time\nimport websocket\n\n# Server script to send realtime notifications to subscribed users \n# Connect to websocket host\nws = websocket.WebSocket()\nws.connect(\"ws://localhost:8888/\")\n\n# handle incoming messages\nwhile True:\n msg = ws.recv()\n print(f\"Notification to users: {msg}\")\n \n# broadcast the message to subscribed users\nws.send(msg)\n\n# wait for 5 seconds \ntime.sleep(5)\n```"
    },
    {
        "instruction": "Create a Python program to reverse a given array by swapping the elements.",
        "output": "def reverse_array(arr): \n      \n    # Initialize start and end index \n        start = 0\n        end = len(arr) - 1\n  \n    # Loop over the array \n    while start < end: \n  \n        # Swap the elements at start and end \n        arr[start], arr[end] = arr[end], arr[start]  \n          \n        # Update start and end index \n        start += 1\n        end -= 1\n  \n# Driver code \narr = [1, 2, 3] \n  \nreverse_array(arr) \n  \n# Print our modified array   \nprint(arr)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to reverse a given array by swapping the elements.\n\n### Solution:\n```\ndef reverse_array(arr): \n      \n    # Initialize start and end index \n        start = 0\n        end = len(arr) - 1\n  \n    # Loop over the array \n    while start < end: \n  \n        # Swap the elements at start and end \n        arr[start], arr[end] = arr[end], arr[start]  \n          \n        # Update start and end index \n        start += 1\n        end -= 1\n  \n# Driver code \narr = [1, 2, 3] \n  \nreverse_array(arr) \n  \n# Print our modified array   \nprint(arr)\n```"
    },
    {
        "instruction": "Write a python program to which given a list of numbers, will calculate the mean value",
        "output": "def mean(nums):\n    total = 0\n    for num in nums:\n        total += num\n    # Return the mean by dividing by the number of elements \n    return total / len(nums)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a python program to which given a list of numbers, will calculate the mean value\n\n### Solution:\n```\ndef mean(nums):\n    total = 0\n    for num in nums:\n        total += num\n    # Return the mean by dividing by the number of elements \n    return total / len(nums)\n```"
    },
    {
        "instruction": "Modify the given Python code to add exception handling.",
        "output": "def divide(a,b):\n    try:\n        return a/b\n    except (ZeroDivisionError) as e:\n        print('Division by zero')\n    except Exception as e:\n        print(str(e))\n        return None",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nModify the given Python code to add exception handling.\n\n### Solution:\n```\ndef divide(a,b):\n    try:\n        return a/b\n    except (ZeroDivisionError) as e:\n        print('Division by zero')\n    except Exception as e:\n        print(str(e))\n        return None\n```"
    },
    {
        "instruction": "Write a recursive function in Python to calculate the Fibonacci sequence for an input value N.",
        "output": "def Fibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n   # First Fibonacci number is 0 \n   elif n==1: \n      return 0\n   # Second Fibonacci number is 1 \n   elif n==2: \n      return 1\n   else: \n      return Fibonacci(n-1)+Fibonacci(n-2)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a recursive function in Python to calculate the Fibonacci sequence for an input value N.\n\n### Solution:\n```\ndef Fibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n   # First Fibonacci number is 0 \n   elif n==1: \n      return 0\n   # Second Fibonacci number is 1 \n   elif n==2: \n      return 1\n   else: \n      return Fibonacci(n-1)+Fibonacci(n-2)\n```"
    },
    {
        "instruction": "Construct a Python program to print all the numbers between 0 and a given number n that are divisible by 3.",
        "output": "def print_divisible_by_three(n):\n  for num in range(n+1):\n    if num % 3 == 0:\n      print(num, end=\" \")\n\nprint_divisible_by_three(10)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConstruct a Python program to print all the numbers between 0 and a given number n that are divisible by 3.\n\n### Solution:\n```\ndef print_divisible_by_three(n):\n  for num in range(n+1):\n    if num % 3 == 0:\n      print(num, end=\" \")\n\nprint_divisible_by_three(10)\n```"
    },
    {
        "instruction": "Design a Python function that takes a string as a parameter and returns a string with extra spaces in between each character.",
        "output": "def add_spaces(string):\n new_string = \"\"\n for char in string:\n new_string += char + \" \"\n return new_string\n\nmy_string = add_spaces(\"Hello World\")\nprint(my_string)\n# H e l l o   W o r l d",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a Python function that takes a string as a parameter and returns a string with extra spaces in between each character.\n\n### Solution:\n```\ndef add_spaces(string):\n new_string = \"\"\n for char in string:\n new_string += char + \" \"\n return new_string\n\nmy_string = add_spaces(\"Hello World\")\nprint(my_string)\n# H e l l o   W o r l d\n```"
    },
    {
        "instruction": "Generate a secure random password in Python.",
        "output": "import string \nimport random \n\ndef secure_password(length): \n password_characters = string.ascii_letters + string.punctuation + string.digits\n password = \"\".join(random.choice(password_characters) for i in range(length)) \n return password \n\nsecure_pw = secure_password(20) \nprint(\"Secure Password:\", secure_pw)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a secure random password in Python.\n\n### Solution:\n```\nimport string \nimport random \n\ndef secure_password(length): \n password_characters = string.ascii_letters + string.punctuation + string.digits\n password = \"\".join(random.choice(password_characters) for i in range(length)) \n return password \n\nsecure_pw = secure_password(20) \nprint(\"Secure Password:\", secure_pw)\n```"
    },
    {
        "instruction": "Design a solution using python to find the sum of all even numbers between x and y",
        "output": "def even_sum(x, y): \n    \n    result=0 \n    for i in range(x,y+1): \n        if i%2 == 0: \n            result += i\n            \n    return result \n  \nx=2\ny=8\nsum = even_sum(x,y) \nprint(sum)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a solution using python to find the sum of all even numbers between x and y\n\n### Solution:\n```\ndef even_sum(x, y): \n    \n    result=0 \n    for i in range(x,y+1): \n        if i%2 == 0: \n            result += i\n            \n    return result \n  \nx=2\ny=8\nsum = even_sum(x,y) \nprint(sum)\n```"
    },
    {
        "instruction": "Develop an algorithm in Python to arrange an array in a non-descending order.",
        "output": "def selection_sort(arr):\n    # traverse through all array elements\n    for i in range(len(arr)):\n        # find the minimum element in the remaining unsorted array\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        # swap the found minimum element\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\narr = [5, 8, 10, 15, 2] \nselection_sort(arr)\nprint(\"Sorted array: \", arr)\n\nOutput: Sorted array:  [2, 5, 8, 10, 15]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop an algorithm in Python to arrange an array in a non-descending order.\n\n### Solution:\n```\ndef selection_sort(arr):\n    # traverse through all array elements\n    for i in range(len(arr)):\n        # find the minimum element in the remaining unsorted array\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        # swap the found minimum element\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\narr = [5, 8, 10, 15, 2] \nselection_sort(arr)\nprint(\"Sorted array: \", arr)\n\nOutput: Sorted array:  [2, 5, 8, 10, 15]\n```"
    },
    {
        "instruction": "Write a loop in Python for printing ‘Hello World’ 10 times",
        "output": "for _ in range(10):\n  print('Hello World')",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a loop in Python for printing ‘Hello World’ 10 times\n\n### Solution:\n```\nfor _ in range(10):\n  print('Hello World')\n```"
    },
    {
        "instruction": "Write a Python program to fetch the contents of a web page.",
        "output": "import urllib.request\n\n# Pass in the URL of the web page\nurl = 'http://example.com/index.html' \n\n# Fetch the web page\nresponse = urllib.request.urlopen(url)\n\n# Read and print the contents of the web page\ncontents = response.read()\nprint(contents)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to fetch the contents of a web page.\n\n### Solution:\n```\nimport urllib.request\n\n# Pass in the URL of the web page\nurl = 'http://example.com/index.html' \n\n# Fetch the web page\nresponse = urllib.request.urlopen(url)\n\n# Read and print the contents of the web page\ncontents = response.read()\nprint(contents)\n```"
    },
    {
        "instruction": "Design a Python program to find the first prime number greater than a user-specified number.",
        "output": "def find_prime_number(n):\n    number = n + 1\n    while True:\n        counter = 0\n        for i in range(2, number):\n          if number % i == 0:\n            counter = 1\n        if counter == 0:\n            break\n        number += 1\n    return number\n\nnum = int(input(\"Enter a number:\"))\nprime = find_prime_number(num)\n\nprint(prime)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a Python program to find the first prime number greater than a user-specified number.\n\n### Solution:\n```\ndef find_prime_number(n):\n    number = n + 1\n    while True:\n        counter = 0\n        for i in range(2, number):\n          if number % i == 0:\n            counter = 1\n        if counter == 0:\n            break\n        number += 1\n    return number\n\nnum = int(input(\"Enter a number:\"))\nprime = find_prime_number(num)\n\nprint(prime)\n```"
    },
    {
        "instruction": "Create a program in Python to determine the frequency of each letter in a given sentence.",
        "output": "sentence = \"hello world\"\n\nfreq = {} \nfor i in sentence: \n\tif i in freq: \n\t\tfreq[i] += 1\n\telse: \n\t\tfreq[i] = 1\n\n# Print frequencies \nfor key in freq.keys(): \n\tprint (key, ':', freq[key])",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a program in Python to determine the frequency of each letter in a given sentence.\n\n### Solution:\n```\nsentence = \"hello world\"\n\nfreq = {} \nfor i in sentence: \n\tif i in freq: \n\t\tfreq[i] += 1\n\telse: \n\t\tfreq[i] = 1\n\n# Print frequencies \nfor key in freq.keys(): \n\tprint (key, ':', freq[key])\n```"
    },
    {
        "instruction": "Design a python program to create a directory",
        "output": "import os\n\ndef create_dir(path):\n    try:\n        os.mkdir(path)\n    except OSError:\n        print(\"Creation of the directory %s failed\" % path)\n    else:\n        print(\"Successfully created the directory %s \" % path)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a python program to create a directory\n\n### Solution:\n```\nimport os\n\ndef create_dir(path):\n    try:\n        os.mkdir(path)\n    except OSError:\n        print(\"Creation of the directory %s failed\" % path)\n    else:\n        print(\"Successfully created the directory %s \" % path)\n```"
    },
    {
        "instruction": "Generate code to remove any duplicates from a list of integers in Python.",
        "output": "def remove_duplicates(lst): \n    final_list = [] \n    for num in lst: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list \n    \nlst = [1, 1, 2, 3, 4, 4, 5] \nprint(remove_duplicates(lst))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate code to remove any duplicates from a list of integers in Python.\n\n### Solution:\n```\ndef remove_duplicates(lst): \n    final_list = [] \n    for num in lst: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list \n    \nlst = [1, 1, 2, 3, 4, 4, 5] \nprint(remove_duplicates(lst))\n```"
    },
    {
        "instruction": "Create a search algorithm that searches for a given string in a given list of strings",
        "output": "def linear_search(lst, str): \n    for i in range(0, len(lst)): \n        if lst[i] == str:\n            return i \n    return -1\n\nlst = ['remote', 'deliver', 'python', 'code']\nstr = 'python'\nresult = linear_search(lst, str) \n  \nif result != -1: \n    print (\"Element is present at index\", result) \nelse: \n    print (\"Element is not present in list\")",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a search algorithm that searches for a given string in a given list of strings\n\n### Solution:\n```\ndef linear_search(lst, str): \n    for i in range(0, len(lst)): \n        if lst[i] == str:\n            return i \n    return -1\n\nlst = ['remote', 'deliver', 'python', 'code']\nstr = 'python'\nresult = linear_search(lst, str) \n  \nif result != -1: \n    print (\"Element is present at index\", result) \nelse: \n    print (\"Element is not present in list\")\n```"
    },
    {
        "instruction": "Write a Python script for sorting an array of numbers.",
        "output": "arr = [4, 2, 3, 5, 1]\narr.sort()\nprint(arr)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python script for sorting an array of numbers.\n\n### Solution:\n```\narr = [4, 2, 3, 5, 1]\narr.sort()\nprint(arr)\n```"
    },
    {
        "instruction": "Build a natural language processor that can translate English to French.",
        "output": "# Python\nimport googletrans\nfrom googletrans import Translator\n\ntranslator = Translator()\ntext = 'Hello, World!'\nresult = translator.translate(text, dest='fr') \n\nprint(result.text)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nBuild a natural language processor that can translate English to French.\n\n### Solution:\n```\n# Python\nimport googletrans\nfrom googletrans import Translator\n\ntranslator = Translator()\ntext = 'Hello, World!'\nresult = translator.translate(text, dest='fr') \n\nprint(result.text)\n```"
    },
    {
        "instruction": "Generate a SQL query in Python to find the sum of numbers in a given dataset.",
        "output": "import pandas as pd\n\ndf = pd.DataFrame([[1, 2], [3, 4], [5, 6]])\n\nquery = 'SELECT SUM(NUM1 + NUM2) AS SUM_NUM FROM df'\n\nsum_num = pd.read_sql_query(query, con=df.to_sql('df'))\nprint(sum_num)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a SQL query in Python to find the sum of numbers in a given dataset.\n\n### Solution:\n```\nimport pandas as pd\n\ndf = pd.DataFrame([[1, 2], [3, 4], [5, 6]])\n\nquery = 'SELECT SUM(NUM1 + NUM2) AS SUM_NUM FROM df'\n\nsum_num = pd.read_sql_query(query, con=df.to_sql('df'))\nprint(sum_num)\n```"
    },
    {
        "instruction": "Compare two strings using Python and output the similarity score between them.",
        "output": "import difflib\n\ndef compare_strings(str1, str2):\n score = difflib.SequenceMatcher(None, str1, str2).ratio() \n print(\"Similarity score is:\", score)\n\ncompare_strings(\"hello world\", \"hey world\") # Output: Similarity score is: 0.909",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCompare two strings using Python and output the similarity score between them.\n\n### Solution:\n```\nimport difflib\n\ndef compare_strings(str1, str2):\n score = difflib.SequenceMatcher(None, str1, str2).ratio() \n print(\"Similarity score is:\", score)\n\ncompare_strings(\"hello world\", \"hey world\") # Output: Similarity score is: 0.909\n```"
    },
    {
        "instruction": "Write a Python function to check whether the number is prime or not.",
        "output": "# Python program to check whether the number is prime or not\n\ndef is_prime(num):\n    \"\"\" Function to check whether the number is prime or not \"\"\"\n\n    # Check whether the given number is greater than 1 \n    if num > 1:\n        # Iterate through the range of numbers to check if any number is a multiple of the given number\n        for i in range(2,num):\n            # If there is any multiple, the number is not prime\n            if (num % i) == 0:\n                return False\n        # If there are no multiples, the number is prime \n        else:\n            return True\n\n# Call the function \nnum = 97\nprint(is_prime(num))\n\n# Output:\n# True",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python function to check whether the number is prime or not.\n\n### Solution:\n```\n# Python program to check whether the number is prime or not\n\ndef is_prime(num):\n    \"\"\" Function to check whether the number is prime or not \"\"\"\n\n    # Check whether the given number is greater than 1 \n    if num > 1:\n        # Iterate through the range of numbers to check if any number is a multiple of the given number\n        for i in range(2,num):\n            # If there is any multiple, the number is not prime\n            if (num % i) == 0:\n                return False\n        # If there are no multiples, the number is prime \n        else:\n            return True\n\n# Call the function \nnum = 97\nprint(is_prime(num))\n\n# Output:\n# True\n```"
    },
    {
        "instruction": "Develop a program in Python for counting the occurrences of a given character in a string.",
        "output": "def countOccurences(str, char):\n    count = 0\n    for ch in str:\n        if ch == char:\n            count += 1\n    return count\n\nprint(countOccurences('abcdefg', 'a'))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop a program in Python for counting the occurrences of a given character in a string.\n\n### Solution:\n```\ndef countOccurences(str, char):\n    count = 0\n    for ch in str:\n        if ch == char:\n            count += 1\n    return count\n\nprint(countOccurences('abcdefg', 'a'))\n```"
    },
    {
        "instruction": "Write a Python function capable of generating a personalized Etsy product listing URL for a given product.",
        "output": "def generateURL(productName, productCategory, productPrice):\n productName = productName.lower().replace(' ', '-')\n productCategory = productCategory.lower().replace(' ', '-')\n return 'https://www.etsy.com/listing/{}-{}-{}/{}'.format(productName, productPrice, productCategory, productName)\n \ngeneratedURL = generateURL('Tulip Breeze Necklace', 'Jewelry', 45)\n# https://www.etsy.com/listing/tulip-breeze-necklace-45-jewelry/tulip-breeze-necklace",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python function capable of generating a personalized Etsy product listing URL for a given product.\n\n### Solution:\n```\ndef generateURL(productName, productCategory, productPrice):\n productName = productName.lower().replace(' ', '-')\n productCategory = productCategory.lower().replace(' ', '-')\n return 'https://www.etsy.com/listing/{}-{}-{}/{}'.format(productName, productPrice, productCategory, productName)\n \ngeneratedURL = generateURL('Tulip Breeze Necklace', 'Jewelry', 45)\n# https://www.etsy.com/listing/tulip-breeze-necklace-45-jewelry/tulip-breeze-necklace\n```"
    },
    {
        "instruction": "Create a class called <Person> in Python with three properties - <name>, <age> and <height>.",
        "output": "class Person:\n    def __init__(self, name, age, height):\n        self.name = name\n        self.age = age\n        self.height = height",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a class called <Person> in Python with three properties - <name>, <age> and <height>.\n\n### Solution:\n```\nclass Person:\n    def __init__(self, name, age, height):\n        self.name = name\n        self.age = age\n        self.height = height\n```"
    },
    {
        "instruction": "Generate a Python program that performs quick sort on a given array of integers",
        "output": "def quicksort(arr):\n    if len(arr) < 2:\n        return arr\n    \n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range(1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        elif arr[i] > pivot:\n            right.append(arr[i])\n    arr = quicksort(left) + [pivot] + quicksort(right)\n    return arr\n\narr = [1, 5, 8, 7, 2]\nsorted_arr = quicksort(arr)\nprint(sorted_arr)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python program that performs quick sort on a given array of integers\n\n### Solution:\n```\ndef quicksort(arr):\n    if len(arr) < 2:\n        return arr\n    \n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range(1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        elif arr[i] > pivot:\n            right.append(arr[i])\n    arr = quicksort(left) + [pivot] + quicksort(right)\n    return arr\n\narr = [1, 5, 8, 7, 2]\nsorted_arr = quicksort(arr)\nprint(sorted_arr)\n```"
    },
    {
        "instruction": "Develop a Python Program to sort an array without using any built-in functions.",
        "output": "def sort_array(array): \n    for i in range(len(array)): \n        for j in range(i+1, len(array)): \n            if array[j] < array[i]: \n                array[j], array[i] = array[i], array[j] \n  \n    return array",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop a Python Program to sort an array without using any built-in functions.\n\n### Solution:\n```\ndef sort_array(array): \n    for i in range(len(array)): \n        for j in range(i+1, len(array)): \n            if array[j] < array[i]: \n                array[j], array[i] = array[i], array[j] \n  \n    return array\n```"
    },
    {
        "instruction": "Write a Python program to calculate the maximum, minimum and mean number of elements in a given string.",
        "output": "def get_stats_for_string(string):\n    num_elements = len(string)\n    max_element = max(string)\n    min_element = min(string)\n    mean_element = sum(string) / num_elements\n    return (max_element, min_element, mean_element)\n\nstring = \"abcdef\"\nstats_for_string = get_stats_for_string(string)\nprint(\"Max: {0}, Min: {1}, Mean: {2}\".format(*stats_for_string))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to calculate the maximum, minimum and mean number of elements in a given string.\n\n### Solution:\n```\ndef get_stats_for_string(string):\n    num_elements = len(string)\n    max_element = max(string)\n    min_element = min(string)\n    mean_element = sum(string) / num_elements\n    return (max_element, min_element, mean_element)\n\nstring = \"abcdef\"\nstats_for_string = get_stats_for_string(string)\nprint(\"Max: {0}, Min: {1}, Mean: {2}\".format(*stats_for_string))\n```"
    },
    {
        "instruction": "Implement a binary search algorithm in Python.",
        "output": "def binarySearch(nums, target):\n\tif len(nums) == 0:\n\t\treturn -1\n \n\tleft = 0\n\tright = len(nums) - 1\n\twhile left <= right:\n\t\tmid = (left + right) // 2\n\t\tif nums[mid] == target:\n\t\t\treturn mid\n\t\telif nums[mid] < target:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid - 1\n \n\treturn -1",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nImplement a binary search algorithm in Python.\n\n### Solution:\n```\ndef binarySearch(nums, target):\n\tif len(nums) == 0:\n\t\treturn -1\n \n\tleft = 0\n\tright = len(nums) - 1\n\twhile left <= right:\n\t\tmid = (left + right) // 2\n\t\tif nums[mid] == target:\n\t\t\treturn mid\n\t\telif nums[mid] < target:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid - 1\n \n\treturn -1\n```"
    },
    {
        "instruction": "Refactor the following Python code to use list comprehension instead of for-loops.",
        "output": "my_list = [1, 2, 3, 4, 5] \nnew_list = [x**2 for x in my_list if x % 2 == 0]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nRefactor the following Python code to use list comprehension instead of for-loops.\n\n### Solution:\n```\nmy_list = [1, 2, 3, 4, 5] \nnew_list = [x**2 for x in my_list if x % 2 == 0]\n```"
    },
    {
        "instruction": "Write a Python program to return the day, date and time when the user enters a specific date as an argument.",
        "output": "import datetime\n\ndef get_day_date_time(date_string):\n    date = datetime.datetime.strptime(date_string, '%Y-%m-%d')\n    return date.strftime('%A, %d %B %Y, %H:%M:%S')\n\ndate_string = input('Please enter a date in the format YYYY-MM-DD: ')\nprint(get_day_date_time(date_string))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to return the day, date and time when the user enters a specific date as an argument.\n\n### Solution:\n```\nimport datetime\n\ndef get_day_date_time(date_string):\n    date = datetime.datetime.strptime(date_string, '%Y-%m-%d')\n    return date.strftime('%A, %d %B %Y, %H:%M:%S')\n\ndate_string = input('Please enter a date in the format YYYY-MM-DD: ')\nprint(get_day_date_time(date_string))\n```"
    },
    {
        "instruction": "Generate a python code to find the size of an object.",
        "output": "import sys\n  \ndef size_of_object(obj): \n    return (sys.getsizeof(obj)) \n  \nobject1 = 10\nprint(size_of_object(object1))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a python code to find the size of an object.\n\n### Solution:\n```\nimport sys\n  \ndef size_of_object(obj): \n    return (sys.getsizeof(obj)) \n  \nobject1 = 10\nprint(size_of_object(object1))\n```"
    },
    {
        "instruction": "Create a Python program to detect and print the number of vowels in a given string.",
        "output": "def number_of_vowels(s):\n    count = 0\n    for char in s:\n        if char in 'aeiouAEIOU':\n            count += 1\n    return count\n\ns = 'Hi everyone'\nprint('The number of vowels in the given string is :', number_of_vowels(s))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to detect and print the number of vowels in a given string.\n\n### Solution:\n```\ndef number_of_vowels(s):\n    count = 0\n    for char in s:\n        if char in 'aeiouAEIOU':\n            count += 1\n    return count\n\ns = 'Hi everyone'\nprint('The number of vowels in the given string is :', number_of_vowels(s))\n```"
    },
    {
        "instruction": "Create a Python script that takes a number and a power as parameters and calculates the result.",
        "output": "def power(number, power):\n return number**power\n\nprint(power(2, 3)) # Output: 8",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python script that takes a number and a power as parameters and calculates the result.\n\n### Solution:\n```\ndef power(number, power):\n return number**power\n\nprint(power(2, 3)) # Output: 8\n```"
    },
    {
        "instruction": "Convert the JavaScript code snippet to Python.",
        "output": "def sum(a, b):\n    return a + b",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nConvert the JavaScript code snippet to Python.\n\n### Solution:\n```\ndef sum(a, b):\n    return a + b\n```"
    },
    {
        "instruction": "Create a program in Python which generates a digital ticket for a ticket reservation system.",
        "output": "import uuid\n\n# Generate a random ticket ID\nticket_id = uuid.uuid4()\n\n# Print the ticket ID\nprint(\"Your ticket ID is:\", ticket_id)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a program in Python which generates a digital ticket for a ticket reservation system.\n\n### Solution:\n```\nimport uuid\n\n# Generate a random ticket ID\nticket_id = uuid.uuid4()\n\n# Print the ticket ID\nprint(\"Your ticket ID is:\", ticket_id)\n```"
    },
    {
        "instruction": "Generate a Python function that takes a dataframe and returns a new dataframe with only the columns that start with the letter 'A'.",
        "output": "def filter_A_columns(df): \n    col_list = [col for col in df.columns if col[0] == 'A']\n    return df[col_list]",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a Python function that takes a dataframe and returns a new dataframe with only the columns that start with the letter 'A'.\n\n### Solution:\n```\ndef filter_A_columns(df): \n    col_list = [col for col in df.columns if col[0] == 'A']\n    return df[col_list]\n```"
    },
    {
        "instruction": "Write a python program to fill missing values in a given dataset.",
        "output": "def fill_missing_values(data):\n    for column in data.columns:\n        if data[column].isnull().any():\n            mean = data[column].mean()\n            data[column] = data[column].fillna(mean)\n    return data",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a python program to fill missing values in a given dataset.\n\n### Solution:\n```\ndef fill_missing_values(data):\n    for column in data.columns:\n        if data[column].isnull().any():\n            mean = data[column].mean()\n            data[column] = data[column].fillna(mean)\n    return data\n```"
    },
    {
        "instruction": "Implement a web server in Python that responds to incoming requests.",
        "output": "import http.server\n\ndef respond(handler):\n    handler.send_response(200)\n    handler.send_header('Content-type','text/html')\n    handler.end_headers()\n    handler.wfile.write(b'Hello World')\n\nclass MyWebRequestHandler(http.server.BaseHTTPRequestHandler):\n    def do_GET(self):\n        respond(self)\n\nif __name__=='__main__':\n    server = http.server.HTTPServer(('0.0.0.0', 8001), MyWebRequestHandler)\n    print('Starting server at port 8001...')\n    server.serve_forever()",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nImplement a web server in Python that responds to incoming requests.\n\n### Solution:\n```\nimport http.server\n\ndef respond(handler):\n    handler.send_response(200)\n    handler.send_header('Content-type','text/html')\n    handler.end_headers()\n    handler.wfile.write(b'Hello World')\n\nclass MyWebRequestHandler(http.server.BaseHTTPRequestHandler):\n    def do_GET(self):\n        respond(self)\n\nif __name__=='__main__':\n    server = http.server.HTTPServer(('0.0.0.0', 8001), MyWebRequestHandler)\n    print('Starting server at port 8001...')\n    server.serve_forever()\n```"
    },
    {
        "instruction": "Create a python function \"add_numbers\" that takes two ints and returns their sum",
        "output": "def add_numbers(a, b):\n    return a + b",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a python function \"add_numbers\" that takes two ints and returns their sum\n\n### Solution:\n```\ndef add_numbers(a, b):\n    return a + b\n```"
    },
    {
        "instruction": "Create a program in Python to calculate the sum of the digits in a number using recursion.",
        "output": "def sum_of_digits(number):\n if len(str(number)) == 1:\n  return number\n else:\n  return number % 10 + sum_of_digits(number // 10)\n\n# example\nsum_of_digits(1234)\n# returns 10",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a program in Python to calculate the sum of the digits in a number using recursion.\n\n### Solution:\n```\ndef sum_of_digits(number):\n if len(str(number)) == 1:\n  return number\n else:\n  return number % 10 + sum_of_digits(number // 10)\n\n# example\nsum_of_digits(1234)\n# returns 10\n```"
    },
    {
        "instruction": "Create a Python class for an employee with variable type member fields of name, age, and salary.",
        "output": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python class for an employee with variable type member fields of name, age, and salary.\n\n### Solution:\n```\nclass Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n```"
    },
    {
        "instruction": "Create a Python program to calculate the distance between two points given their x and y coordinates.",
        "output": "def calculateDistance(x1, y1, x2, y2):\n distance = ((x2 - x1)**2 + (y2 - y1)**2)**(1/2)\n return distance\n\n# main\nx1 = 0\ny1 = 0\nx2 = 10\ny2 = 10\n\ndist = calculateDistance(x1, y1, x2, y2)\n\nprint(\"Distance between the two points is\", dist)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to calculate the distance between two points given their x and y coordinates.\n\n### Solution:\n```\ndef calculateDistance(x1, y1, x2, y2):\n distance = ((x2 - x1)**2 + (y2 - y1)**2)**(1/2)\n return distance\n\n# main\nx1 = 0\ny1 = 0\nx2 = 10\ny2 = 10\n\ndist = calculateDistance(x1, y1, x2, y2)\n\nprint(\"Distance between the two points is\", dist)\n```"
    },
    {
        "instruction": "Modify this given Python code to handle inputs of any size",
        "output": "def sum_digits(num):\n    total = 0\n    while num != 0:\n        total += num % 10\n        num //= 10\n    return total",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nModify this given Python code to handle inputs of any size\n\n### Solution:\n```\ndef sum_digits(num):\n    total = 0\n    while num != 0:\n        total += num % 10\n        num //= 10\n    return total\n```"
    },
    {
        "instruction": "Create an algorithm in Python that takes a list and returns the sum of the list items.",
        "output": "def listSum(lst):\n    s = 0\n    for i in range (len(lst)):\n        s += lst[i]\n    return s\n\nprint (listSum([1,2,3])) # 6",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate an algorithm in Python that takes a list and returns the sum of the list items.\n\n### Solution:\n```\ndef listSum(lst):\n    s = 0\n    for i in range (len(lst)):\n        s += lst[i]\n    return s\n\nprint (listSum([1,2,3])) # 6\n```"
    },
    {
        "instruction": "Design aPython program to replace the last element in a list with another list.",
        "output": "def replace_last_element(list1, list2): \n    list1[-1:] = list2 \n    return list1",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign aPython program to replace the last element in a list with another list.\n\n### Solution:\n```\ndef replace_last_element(list1, list2): \n    list1[-1:] = list2 \n    return list1\n```"
    },
    {
        "instruction": "Design a class in Python that stores student information.",
        "output": "class Student:\n    def __init__(self, name, age, class_name, grade):\n        self.name = name\n        self.age = age\n        self.class_name = class_name\n        self.grade = grade\n\n    def get_name(self):\n        return self.name \n    \n    def get_age(self):\n        return self.age\n\n    def get_class_name(self):\n        return self.class_name\n\n    def get_grade(self):\n        return self.grade",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDesign a class in Python that stores student information.\n\n### Solution:\n```\nclass Student:\n    def __init__(self, name, age, class_name, grade):\n        self.name = name\n        self.age = age\n        self.class_name = class_name\n        self.grade = grade\n\n    def get_name(self):\n        return self.name \n    \n    def get_age(self):\n        return self.age\n\n    def get_class_name(self):\n        return self.class_name\n\n    def get_grade(self):\n        return self.grade\n```"
    },
    {
        "instruction": "Create a Python program to print out the first 20 numbers of the Fibonacci sequence.",
        "output": "def Fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n == 0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n == 1: \n        return 1\n    else: \n        return Fibonacci(n-1) + Fibonacci(n-2) \n\n# Driver Program \nprint(\"First 20 Fibonacci numbers:\")\nfor i in range(20): \n    print(Fibonacci(i))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python program to print out the first 20 numbers of the Fibonacci sequence.\n\n### Solution:\n```\ndef Fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n == 0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n == 1: \n        return 1\n    else: \n        return Fibonacci(n-1) + Fibonacci(n-2) \n\n# Driver Program \nprint(\"First 20 Fibonacci numbers:\")\nfor i in range(20): \n    print(Fibonacci(i))\n```"
    },
    {
        "instruction": "Develop a program to normalize a list of numbers in Python.",
        "output": "def normalize_list(lst):\n    '''Normalizes a list of numbers'''\n    max_val = max(lst)\n    min_val = min(lst)\n\n    normalized_lst = []\n    for num in lst:\n        normalized_val = (num - min_val)/(max_val - min_val)\n        normalized_lst.append(normalized_val)\n\n    return normalized_lst",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nDevelop a program to normalize a list of numbers in Python.\n\n### Solution:\n```\ndef normalize_list(lst):\n    '''Normalizes a list of numbers'''\n    max_val = max(lst)\n    min_val = min(lst)\n\n    normalized_lst = []\n    for num in lst:\n        normalized_val = (num - min_val)/(max_val - min_val)\n        normalized_lst.append(normalized_val)\n\n    return normalized_lst\n```"
    },
    {
        "instruction": "Write a Python program to find the lowest common multiple of two numbers.",
        "output": "def lowest_common_multiple(x, y): \n    if x > y:\n        greater = x \n    else: \n        greater = y \n\n    while(True): \n        if((greater % x == 0) and (greater % y == 0)): \n            lcm = greater \n            break\n        greater += 1\n\n    return lcm \n\nprint(lowest_common_multiple(x, y))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to find the lowest common multiple of two numbers.\n\n### Solution:\n```\ndef lowest_common_multiple(x, y): \n    if x > y:\n        greater = x \n    else: \n        greater = y \n\n    while(True): \n        if((greater % x == 0) and (greater % y == 0)): \n            lcm = greater \n            break\n        greater += 1\n\n    return lcm \n\nprint(lowest_common_multiple(x, y))\n```"
    },
    {
        "instruction": "Create a python program that modifies a given string to remove all spaces.",
        "output": "def remove_spaces(my_string):\n    return my_string.replace(' ', '')\n\n#test\nmy_string = \"This is a string with spaces\"\nno_spaces_string = remove_spaces(my_string)\nprint(no_spaces_string) # Output: Thisisastringwithspaces",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a python program that modifies a given string to remove all spaces.\n\n### Solution:\n```\ndef remove_spaces(my_string):\n    return my_string.replace(' ', '')\n\n#test\nmy_string = \"This is a string with spaces\"\nno_spaces_string = remove_spaces(my_string)\nprint(no_spaces_string) # Output: Thisisastringwithspaces\n```"
    },
    {
        "instruction": "Generate a python script to filter the words in a given list of strings.",
        "output": "def word_filter(words, filter_list):\n    filtered_words = []\n    for word in words:\n        if word not in filter_list:\n            filtered_words.append(word)\n    return filtered_words",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a python script to filter the words in a given list of strings.\n\n### Solution:\n```\ndef word_filter(words, filter_list):\n    filtered_words = []\n    for word in words:\n        if word not in filter_list:\n            filtered_words.append(word)\n    return filtered_words\n```"
    },
    {
        "instruction": "Write an algorithm in Python 3 that calculates the factorial of a number.",
        "output": "def factorial(n):\n if n == 0:\n  return 1\n else:\n  return n * factorial(n-1)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite an algorithm in Python 3 that calculates the factorial of a number.\n\n### Solution:\n```\ndef factorial(n):\n if n == 0:\n  return 1\n else:\n  return n * factorial(n-1)\n```"
    },
    {
        "instruction": "Create a Python function to filter a given list of strings and return a new list of strings containing only unique elements.",
        "output": "def filter_list(strings):\n    unique_strings = []\n    for string in strings:\n        if string not in unique_strings:\n            unique_strings.append(string)\n    return unique_strings\n\nstrings = [\"abc\", \"def\", \"abc\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"pqr\"]\nfiltered_strings = filter_list(strings)\nprint(filtered_strings)\n\n# Output: ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python function to filter a given list of strings and return a new list of strings containing only unique elements.\n\n### Solution:\n```\ndef filter_list(strings):\n    unique_strings = []\n    for string in strings:\n        if string not in unique_strings:\n            unique_strings.append(string)\n    return unique_strings\n\nstrings = [\"abc\", \"def\", \"abc\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"pqr\"]\nfiltered_strings = filter_list(strings)\nprint(filtered_strings)\n\n# Output: ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']\n```"
    },
    {
        "instruction": "Build a machine learning model in Python to predict the price of a house using its size as the independent variable.",
        "output": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndata = pd.read_csv('house_price-data.csv')\n\nX = data[['size']]\ny = data['price']\n\nmodel = LinearRegression()\nmodel.fit(X, y)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nBuild a machine learning model in Python to predict the price of a house using its size as the independent variable.\n\n### Solution:\n```\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndata = pd.read_csv('house_price-data.csv')\n\nX = data[['size']]\ny = data['price']\n\nmodel = LinearRegression()\nmodel.fit(X, y)\n```"
    },
    {
        "instruction": "Generate a code to optimize the following program for better performance in Python.",
        "output": "import random\n\nrandom_list = [random.randint(0, 10) for _ in range(10)]\nunique_list = list(set(random_list))",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a code to optimize the following program for better performance in Python.\n\n### Solution:\n```\nimport random\n\nrandom_list = [random.randint(0, 10) for _ in range(10)]\nunique_list = list(set(random_list))\n```"
    },
    {
        "instruction": "Create a web scraper with Python BeautifulSoup library for gathering data from a website.",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get('http://example.com')\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ndata = []\n\nfor item in soup.find_all('div', class_='item'):\n title = item.find('h3').get_text()\n description = item.find('p').get_text()\n \n data.append({\n 'title': title,\n 'description': description\n })\n \nprint(data)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a web scraper with Python BeautifulSoup library for gathering data from a website.\n\n### Solution:\n```\nimport requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get('http://example.com')\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ndata = []\n\nfor item in soup.find_all('div', class_='item'):\n title = item.find('h3').get_text()\n description = item.find('p').get_text()\n \n data.append({\n 'title': title,\n 'description': description\n })\n \nprint(data)\n```"
    },
    {
        "instruction": "Given an array and a number, write a Python function that will determine if the number is present in the array.",
        "output": "def is_present(arr, number):\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return True\n    return False",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGiven an array and a number, write a Python function that will determine if the number is present in the array.\n\n### Solution:\n```\ndef is_present(arr, number):\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return True\n    return False\n```"
    },
    {
        "instruction": "Generate a random number from 1 to 10 in Python and assign it to the variable 'number'.",
        "output": "import random\n\nnumber = random.randint(1, 10)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a random number from 1 to 10 in Python and assign it to the variable 'number'.\n\n### Solution:\n```\nimport random\n\nnumber = random.randint(1, 10)\n```"
    },
    {
        "instruction": "Create a program that takes a numerical array and returns a reversed array in Python.",
        "output": "def reverse_array(array):\n    reversed_array = array[::-1]\n    return reversed_array\n\nreversed_array = reverse_array([1,2,3,4,5])\nprint(reversed_array)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a program that takes a numerical array and returns a reversed array in Python.\n\n### Solution:\n```\ndef reverse_array(array):\n    reversed_array = array[::-1]\n    return reversed_array\n\nreversed_array = reverse_array([1,2,3,4,5])\nprint(reversed_array)\n```"
    },
    {
        "instruction": "Write a Python program to calculate the total sum of a given list of numbers",
        "output": "\"\"\"\nCalculate the total sum of a given list of numbers using Python\n\"\"\"\n\n# Function to calculate the total sum of a given list of numbers\ndef get_total_sum(num_list):\n    total = 0\n    \n    for num in num_list:\n        total += num\n\n    return total\n\nif __name__ == '__main__':\n    num_list = [1,2,3,4,5]\n    total_sum = get_total_sum(num_list)\n    print(total_sum)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nWrite a Python program to calculate the total sum of a given list of numbers\n\n### Solution:\n```\n\"\"\"\nCalculate the total sum of a given list of numbers using Python\n\"\"\"\n\n# Function to calculate the total sum of a given list of numbers\ndef get_total_sum(num_list):\n    total = 0\n    \n    for num in num_list:\n        total += num\n\n    return total\n\nif __name__ == '__main__':\n    num_list = [1,2,3,4,5]\n    total_sum = get_total_sum(num_list)\n    print(total_sum)\n```"
    },
    {
        "instruction": "Build a Python command-line program that takes in a string and encrypts it with a password.",
        "output": "import hashlib \n  \ndef encrypt_string(string, password):\n    md5_string = hashlib.md5(string.encode()).hexdigest()\n    password_string = hashlib.md5(password.encode()).hexdigest()\n    result = \"\"\n\n    for i in range(32):\n        result += md5_string[i] + password_string[i]\n    return result\n\nstring = \"Hello World!\"\npassword = \"password\"\n\nresult = encrypt_string(string, password)\nprint(result)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nBuild a Python command-line program that takes in a string and encrypts it with a password.\n\n### Solution:\n```\nimport hashlib \n  \ndef encrypt_string(string, password):\n    md5_string = hashlib.md5(string.encode()).hexdigest()\n    password_string = hashlib.md5(password.encode()).hexdigest()\n    result = \"\"\n\n    for i in range(32):\n        result += md5_string[i] + password_string[i]\n    return result\n\nstring = \"Hello World!\"\npassword = \"password\"\n\nresult = encrypt_string(string, password)\nprint(result)\n```"
    },
    {
        "instruction": "Generate a random 10-letter string using Python",
        "output": "import string\nimport random\n\ndef generateRandomString():\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for _ in range(10))\n    \nif __name__ == '__main__':\n    print(generateRandomString())",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nGenerate a random 10-letter string using Python\n\n### Solution:\n```\nimport string\nimport random\n\ndef generateRandomString():\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for _ in range(10))\n    \nif __name__ == '__main__':\n    print(generateRandomString())\n```"
    },
    {
        "instruction": "Create a basic web scraper in Python using the BeautifulSoup library and the Requests library.",
        "output": "import requests \nfrom bs4 import BeautifulSoup\n\n# URL of the site to scrape\nurl = 'https://www.example.com'\n\n# Send the request to the URL\nresponse = requests.get(url)\n\n# Parse the html content\nhtml_soup = BeautifulSoup(response.text, 'html.parser')\n\n# Get all of the <div> elements with a class of 'content'\ncontent = html_soup.find_all('div', class_ = 'content')\n\n# Iterate over the content and print out the text\nfor item in content:\n print(item.text.strip())",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a basic web scraper in Python using the BeautifulSoup library and the Requests library.\n\n### Solution:\n```\nimport requests \nfrom bs4 import BeautifulSoup\n\n# URL of the site to scrape\nurl = 'https://www.example.com'\n\n# Send the request to the URL\nresponse = requests.get(url)\n\n# Parse the html content\nhtml_soup = BeautifulSoup(response.text, 'html.parser')\n\n# Get all of the <div> elements with a class of 'content'\ncontent = html_soup.find_all('div', class_ = 'content')\n\n# Iterate over the content and print out the text\nfor item in content:\n print(item.text.strip())\n```"
    },
    {
        "instruction": "Create a Python script to store and manipulate contact information.",
        "output": "# Create a dictionary to store contact info\ncontacts = {}\n \n# Ask user to enter contact name\nname = input('Enter contact name: ')\n \n# Ask user to enter contact number\nnumber = input('Enter contact number: ')\n \n# Store contact in contacts dictionary\ncontacts[name] = number\n \n# Print out contact info\nfor contact, number in contacts.items():\n    print(f'{contact}: {number}')",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a Python script to store and manipulate contact information.\n\n### Solution:\n```\n# Create a dictionary to store contact info\ncontacts = {}\n \n# Ask user to enter contact name\nname = input('Enter contact name: ')\n \n# Ask user to enter contact number\nnumber = input('Enter contact number: ')\n \n# Store contact in contacts dictionary\ncontacts[name] = number\n \n# Print out contact info\nfor contact, number in contacts.items():\n    print(f'{contact}: {number}')\n```"
    },
    {
        "instruction": "Create a program in Python to find the maximum value from a dictionary.",
        "output": "# Get the maximum value in the dictionary\nmax_value = max(my_dict.values())\n\n# Print the maximum value\nprint (max_value)",
        "text": "Generate a python code for the given task description.\n\n### TASK:\nCreate a program in Python to find the maximum value from a dictionary.\n\n### Solution:\n```\n# Get the maximum value in the dictionary\nmax_value = max(my_dict.values())\n\n# Print the maximum value\nprint (max_value)\n```"
    }
]